%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: submarine1-01.eps
%%Creator: Adobe Illustrator(R) 17.1
%%For: Иван Иванов
%%CreationDate: 7/9/2018
%%BoundingBox: 0 0 1500 1000
%%HiResBoundingBox: 0 0 1500 1000
%%CropBox: 0 0 1500 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.1.0 x273 R agm 4.7709 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">for_wire2</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-07-09T22:42:03+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-07-09T22:42:03+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-07-09T22:42:03+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>116</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAdAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6J+fP5jeevKeqaNb6FJD&#xA;Y6deRyPLfzRLMHmQ/wBx8fwr8NG8T26YpCVeS/8AnJcrJFY+erD6qZADFrNgrSW7KSaNLEOTpsK1&#xA;Xl8hitPcNM1XTNVsYr/TLqK9sphWK4gdZI2HsykjFCKxV2KuxV2KuxV2KuxV2KuxV8N/845/lp+X&#xA;3nKy16fzJFPqF/YGH6vp0E5gKwyBuU/w0LUcBevEd+uKp953/wCcUobhZLz8utRa7kQMz6DqLBLi&#xA;qirCCfjHG9CaUelO7b4q+ftY0XV9F1GbTdXs5rC/gNJba4Ro5F/2LAbHse+KoLFXYq7FXYq7FX6F&#xA;f843f+SS8rf8YJv+omXFXpWKuxVgv55f+Sp8wf8AGKL/AJPx5Vm+kuNq/wC6L558oeT/ACvqHlyC&#xA;8uVlmuJWdbiWNyPSZWIC8RUfZofi8c0uSRBfPtdrs0MxiKAHLzQ+r/l3fWoa40qT9IWo6xgUnWnY&#xA;p+19G/tlJyd7bh7SjLafpP2McVWVirAqymjKdiCOxyJc0q6UyosC5qYhAQ8mWRbAhZcui2xQU2ZE&#xA;W+L7y8weXdF8w6VNpWs2kd7YTj44ZB0I6MrCjKw7MpBGbp6x86effyS8weUjLqOhpJ5g8ugF5LZl&#xA;D3tstKGtBWVKUPJAGFB4csU2xDQLvzDpUcmoeQ9RktrqTl61gjD0rjYl2aNuSglOJUNuK/CR1KlU&#xA;8jfnp558tXCQz38moWQIN1pmqGSd1XuYZ95lY9lNVxWn1zomuaRrulwappF0l5YXI5QzxnY0NCCD&#xA;Qgg7EEVB64sUdirsVdirsVdirsVdir8vfL/mLW/LurQatot5JY6hbmsc8RoaHqrA7MrdCrCh74q+&#xA;nfy7/wCcgfL/AJx9LTPMskXlzzMw4Q6kpMdlcS9VYvX9y5bqHqrbjkKgYqz3zPpug6zb/of8xtMS&#xA;5sI+IjvmSk9vzACmOaMiT9rfiSKJVga0xVZ59/5x/wDy581wNINOh0q6dD9V1nSAkHxrX4Zrb4IZ&#xA;FHHiSKPt+yN8VfFPmLy3rnlvV59I1uzey1G2NJYZKdD0ZWBKurdVZSQe2KpZirsVdir9Cv8AnG7/&#xA;AMkl5W/4wTf9RMuKvSsVdirBPzz/APJUeYf+MUX/AFER5Xm+kuPq/wC7L5H8u+Y9T0W49aykor7T&#xA;QOOUcg8GX+PXNTONvKarSwyipD9YeoaD5m07W1QWr/U9RGxs2brToYzsGHt1/XmFOFPP59LPDz9U&#xA;e/8AWmSw6PeX6Salaxrex/3U7KPiJH2ZB0NAf2voplBBHJr4pxj6T6UB5k8kWk1tLcafbGG9XdIo&#xA;SBFJvv8AAx+E06cTkYyPVu0+sNgSOzziQsjMjgq6khlIoQR1BBy8B24CHkfJgNgCFlbLohtiEHM2&#xA;XxDdEP0FzcvVuxV5n5//ACS0nXZ5tY0B00bzBIG9Z1X/AEa55faE6L9lm7yJv/MG6Ypt4L5t0O5G&#xA;sDSvNVgdL1OJSYp67NEq7tBItEkUKHbruaKwBxSmnk6+82eQJ5bjy/efW7aeQNfabcAPHJKE5OtB&#xA;x4tGKgyqw6UINKYoe/fl3+avl7zpA0UB+pazCvO50uVgW47fvIXG00VT9pen7QWuKGaYq7FXYq7F&#xA;XYq7FX5V4q7FXq35afn3rXlqO30fzBG2u+WYioigdv8ASrQDobWVv2R/vp/g8OPXFX0X5P8AMVm2&#xA;jvrnkrVP0vpD1N1auRySVyWZLuFzyjL0Ar7llJ35Kpb5zsPJX5iQLYeaNO+p3VrGw0zUrctHNHE0&#xA;pX1S78+SO+/puh+1X3xV83fmX+TnmXyOVvX/ANyPl+dyltq8KlVDVp6dxHVjDJ/kkkH9lmxVgOKu&#xA;xV+hX/ON3/kkvK3/ABgm/wComXFXpWKuxVgf56mn5T+Yf+MMX/URHleX6S4+q/uy+MInzXSDz8gj&#xA;IZmVgykqymoI2II8MokGmUWcaJ575olrrdZFA4x3yisi12/eAfbHuN/nmNPF3Opz6CjxY/kzeHUJ&#xA;ba0SWCQXdmRyjeoZCBv8JHstKeJ3ygwdWYCRo7SSjWdG0rXZHlZfqepNUGVBUM4H2WX9qndtu2Sj&#xA;YcjFnli2+qLz7W9J1DSbn0LxKct4pV3jkX+ZG7/w75kR3dxgzRyC4pRJJl0Q5QCElfLohtiH6FZt&#xA;nqXYq7FUr8x+V9B8yac+na1Zx3lq24D1Do3TlHItHRv8pSDirw/zV+UHm7y16txoTS+YNF+L/R9v&#xA;r8KSSB5BxApc8gKVWjeC98UvMb2+tpL9LyymfT9esHMnqIWhuLbgKRxKHCMvwk8gRStRil6Np/8A&#xA;zkxq1x5SksJLZF86QtHGLtUD2rxGrNclAy0bitCniwYfDUBRT078pvzNn862t/De2AstU0r0Rd+m&#xA;S0Enrh+LR8vjU/umqrVptua4oZ9irsVdirsVflXirsVdiqbeWvNXmHyxqiapoN9JYXqbepGRxdep&#xA;SRGqkiHurAjFXv3k788PJnmZo4vM0UWgeYBxKXp5nTZ5EXjHyPxNb0ND8QZNuo2GKvX9M0yeCwNv&#xA;Pbx6rod9ElvJBVZ7a7Eq/FIWBZJE3CjiaDau+KvMdU/5xO0ePzvb6lb3MjeQbhZJp7QORdxSA0W2&#xA;VuLsUblyVypIUFW+KjMq8o/Or8n7f8v7ixurDUvrul6q8yWsUo43EZgWNmDkAI60mX4lp4EDFX15&#xA;/wA43f8AkkvK3/GCb/qJlxV6VirsVYD+fJp+UnmI/wDFMX/URHkMnJo1P92XxVFJmDKLopBFRy5U&#xA;YtRirpLlRi1mKbaL5m1LSJCbWQNC/wDe20g5ROP8pf4jfK5YwXGz6WGQb8+/qznS/Mmh6wyhZRYX&#xA;p2NvMRQ1NSY5SVB+R3yvwyHT5tNkxdOKPeP0hPJdPS+tf0bqsBeCT4kU9Y+vExt2b/M1wgdzgjNw&#xA;S48Z3+/3sTj/ACyt7e5ul1G5aS2IH1KSE8XodyzKQdx0pl4k7GXbJkBwDfrbA/NOjSaJqslg8yz8&#xA;VV1kUcaqwqOSmtD7ZkwFu90OoGfGJgU+/wDNk9c7FXYq7FXYqx/zZ5A8o+a7Z4db0yC5lKFIrsoB&#xA;cRVFAY5hR1p160xV8g/mV+Uev+QbstJGbizZv9B1WEUikFalZAS3Bwv7P3E4snpX/OLHly8u9Q1P&#xA;zHdXVxbmBIIorOFikModX3mAPx041CsNq8u+KC+lMUOxV2KuxV+VeKuxV2KuxV2Ksj8ofmJ5z8oX&#xA;Qn8v6tcWScg0tqrk28viJIWrG9em64q+2vym/Onyx+YdisNqRZ6lEgbUNFlKl4goALwt+79SL/KG&#xA;6/tBajFXmH/OX/mSw0/RtI8tWlhbzteSXEsl7NErSQiH01AtjT4OXKjMv8tKYq9c/wCcbv8AySXl&#xA;b/jBN/1Ey4q9KxV2KvP/AM/TT8ofMZ/4pi/6iI8EuTTqPoL4hjlzGlF08oolJspMWoxV1myBiwMV&#xA;4myPCx4XGbBwrwp75c89axol1ERPJPYKf3tmzVUqRT4eVeJHUUwnGC4Os7Mx5onYCXe9j0PX9L1+&#xA;09e2mEkNN1Pwujd1cdqe/wCOREKeK1emyaeVSFH7C8k/NvW47nXhYxQxLHaRRUnC/vX5oG3brxow&#xA;ov098ycUNnrvZ/TGOHjJNyJ26c/xu+5sznvXYq7FXYq7FXYqp3NrbXUJhuYknhahaORQ6mhqKhqj&#xA;Y4qhtL0TR9KWddMs4bJbmUzzrAgjDyEBSxC0FaKMVRuKuxV2KuxV8wf9COaV/wBTdP8A9ISf9VsV&#xA;d/0I5pX/AFN0/wD0hJ/1WxV3/Qjmlf8AU3T/APSEn/VbFXf9COaV/wBTdP8A9ISf9VsVd/0I5pX/&#xA;AFN0/wD0hJ/1WxV3/Qjmlf8AU3T/APSEn/VbFVaz/wCcKbayuUurPzrd21zHUxzw2ojdSRQ8WWcE&#xA;bHFUVqv/ADh5Pq62q6p58vb36lF6FqZ7USFIwahQWmJoP1bdBir2z8u/JsXkvyZpnliK6a9j01Hj&#xA;W6ZBGX5yNJUoC1Pt064qyPFXYqkHnzynH5u8paj5dkuTZpqCIhuVQSFOEiyV4krX7FOuLGceIU8U&#xA;X/nDrTl/6amb/pEX/qrkTFxTox3qg/5xA08f9NPN/wBIi/8AVXIHEx/IjvXD/nETTx/0083/AEiL&#xA;/wBVcHghj+QHeu/6FGsP+pmm/wCkRf8Aqrg8AL/J473f9CjWH/UzTf8ASIv/AFVx8AL/ACeO9o/8&#xA;4iaef+mnm/6RF/6q4fBC/kB3rof+cS4YGLW/m25hY0qY7YKTQ1HSYdDh8IIl2bCX1b/BTvP+cRbe&#xA;8uHuLnzbcSzyU5yNaKSaCg/3b4DJCADLF2fCEeGOwD6FybnuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5yP+cifyYPTzPB/yJuf+qWW&#xA;jDPuY8YXD/nIX8mz08zQ/wDIm5/6pZL8tk7mPix72x/zkF+Tp/6aWH/kVcf9UsP5XJ3L40e9v/oY&#xA;D8nv+pkh/wCRVx/1Tw/k8vcjxod7v+hgPye/6mSH/kVcf9U8fyeXuXx4d7v+hgfydH/TSw/8irj/&#xA;AKpYPymTuXxo960/85Cfk2OvmWH/AJE3P/VLB+WydyfFj3tH/nIf8mR18zQf8ibn/qlkTgn3J4wz&#xA;bQde0jX9IttY0e5F3pt2C1vcKGUOFYoSA4VvtKRuMrIINFmCj8CuxV2KsD/5Xr+U/wD1MMP/ACKu&#xA;P+qeQ4w7P+R9V/MP2frd/wAr1/Kf/qYYf+RVx/1Tw8YR/I+q/mH7P1u/5Xt+U3/UxQ/8irj/AKp4&#xA;8QR/JOp/mfd+tr/lfH5S/wDUxQ/8irj/AKp5JH8l6j+Z9zX/ACvr8o/+pjh/5FXH/VPDRYns3P8A&#xA;zfua/wCV+flCP+mjh/5FXH/VPJcBYnQZv5v3LT+f35QD/ppIf+RVx/1Tw+FLuYHR5R/C0f8AnIH8&#xA;nh/00sP/ACKuP+qeSGnn3MTpsg6M00LXdJ17SbfVtJuBd6ddgtb3ChlDBWKnZgrfaU9srlExNFpl&#xA;Eg0UdkUOxVQv7+00+0ku7uT0reKnqSEE0qQo2UE9TleXLHHEykaiGePHKchGIslKF89+VG+zfg/8&#xA;85f+aM157a0n88fI/qco9nZ/5v3Kq+cfLbdLwH/nnJ/zTkT27o/9UHyP6kfkM381UXzToLdLqv8A&#xA;sJP+acj/AC/ov9UHyP6mP5LL/NXjzJop6XH/AAkn/NOD/RDov9UHyP6kfk8v81o+ZdFHW5/4ST/m&#xA;nH/RDov9UHyP6l/J5f5qxvNegL1u6f7CT/mnCO39H/qg+R/Uy/I5v5qm3nTyyvW9A/55y/8ANOSH&#xA;bmj/ANUHyP6k/wAn5v5v3KTeffKS/a1AD/nnL/zRkh21pf54+R/Uy/k3P/N+58FeRE02WSW2mjja&#xA;7cgxiRVbkvdV5dx1p3z0vsU4qlGQHGeVjo8Z2ucgAkCeHyZRd+RdJ1EE24/R130BA/dM3QVXtU/y&#xA;/ccydTosUjcRwH7HT4+18uL6vXH7fx7/AJsV1bynrWkOou7c+k5pFcR1aJyegVqdfY75rJYDE7u5&#xA;03aOHOPSdxzHUIS50+7tJjBdwSW86/ailRkcfNWAOSEG7HnjMcUSJDy3UjFjwM+JTePISiyElCRM&#xA;olFtBQ0iZjyi2xL70/5x3/8AJMeWP+ME3/UTLmnz/WXNhyejZUydirsVfAvl9rQmSKRVM7U9PmAa&#xA;juBXM3so4yTEgcZ5X9z7LoDDcH6kbeaNZT1KD6tN2p9g/R/TNhn7MxZOXol9jkZtJCfL0n7Ehv8A&#xA;Tbyzb98nwdBIu6n6f65ptRocuE+obd/R0+o088fMIOeKWJykqNG46qwKn7jkJY5QNSBB83DyRMTR&#xA;FKDZZFxZqTZfFxZqT5fFxZqL5kRcSb7r/wCcfP8AyTvlr/jDL/1Ey5q9T/eF0mf6y9DyhqdirHvP&#xA;/wDyiGofKP8A5Opms7Z/xWfu/SHO7M/xiP46MX8oDSbjR1iFvFJcRVN0jorOQSaMKipFPuzzd2+u&#xA;8SOS7IB5Im58s2kpMlk3oSdfQckof9U9crnivkwhrJDaW/mglsLqGYQyRMJD9laVr8qdcwp45A1W&#xA;7k+LEiwdkTGgGzChHUZiysMCVOZRhimJS64Ub5kRb4pXcjrmTBvilN0OuZMHIg+SoaqwZSQwNQRs&#xA;QRnvMHzCe7PvLHnpV4WeuhpbenEXq1MqD/Kpuw9xv883GLVkip7+bzWv7Iu5Ydpfzen7Pu9z1DTp&#xA;fRt0uPg1PS7in2OLq/Lai1qKilSDvXbJSk8hnjxS4f7vJH8fj5p7faZoPmDT3jkWO+s1DKPVBaWJ&#xA;u7K4+NaV7fflTqsWpz6bJYuEvLkfhyeEeZvKuo+X736vdqGjerW9yleEijuK9CO47ZaAC+k6DtLH&#xA;qYcUOfUdQkUiZVKLsolCyLmPMN0ShZRmLMN0S+8P+ceP/JNeWf8AjDN/1Ey5pNR9Zc/H9Iei5Szd&#xA;irsVfnWGpuOuY9PqAknFhr9AIb0F06CYfbX5+ObvR9qV6cu4/ndR+v7/AHuww6/pPcd/VOllIQOt&#xA;Li1kFNtwa9t/1Z0mOVAEevGXO49r+qJRUkFjfxFJAs0Q2Kt9pT3II+IZtThw6iNGpR8+Y/SGU4wy&#xA;ijuGCarplzp8wSYVR945B0Yf1HcZw2r0E9PKpcjyPe8pq9PLEaPLoUuY5TEOtmVJjl8XFmVF8yIu&#xA;JMvuz/nHz/yTnlr/AIwy/wDUTLmq1P8AeF02f6y9DyhqdirH/P8A/wAohqHyj/5Opms7Z/xWfu/S&#xA;HO7M/wAYj+OjyXT7iaCVJYXMcimqupoRnmsnrskRIUWb6V5kiulWK+Iin/ZuBsp/1qfZPvjHIDsX&#xA;TZtIY7x3Hcn0cxiKrMOSHdXHbbqP7MvBrm4JjfJdeWkV1ASOJc/3ctNx7Ej+OOfBHJHpfejHkMCx&#xA;m7SWGRopRxdeozTSxGJo83awkJCwl07ZOIb4pZcN1zIiG+KVXR65kwciL5Kiz3uD5fJFxZlQaJMk&#xA;8r+a9W0CcvZuHt5CDPZyjlDJTxXsfBhvmTEOp7Q7OxamNTHqHKQ5j8d3J6x5c8x6TrcIOlStZakA&#xA;OdgzAP1JLRtQCQCtfHbcd8nVc3iddocunP70ceP+d0+Pd93cjLu8+vI9rrNqt3bvQCNlA3cngqgB&#xA;eLU/aG+Gq5OPjxeGRLDLhl+L/seeebfy7ktbeTU9DZrvT0q1xB9qSEDqQRT1EWu5HTv45El6rszt&#xA;wTkMeb0z6Hof1H7+nc8+lzHm9RFCS5izb4vu7/nHn/yTXln/AIwzf9RMuaLUfWXYY/pD0XKWbsVd&#xA;ir85+WQ4X0nidyx4VMkRY6pdWUnKFqoftxNurfMfxzO0esyaeVxO3UdD+PmzxaqWM7fJkmn6lbXq&#xA;gWrejdDrAx3r4qf2s63R6zHnH7s8M/5v6u/8bO1wamOT6TUu79XeqzTGVTDeRiWNqVRh4/ZAHb55&#xA;lTyGY4cg4h+KZZJ8Q4Ziwx7V/LbRo1zYVmgH24+rJ40/mGabV9k8I48Xqj3dR+sOj1vZpAM8fqj3&#xA;dR+sMcY5rYh56ZUWOXxDiTL7u/5x8/8AJOeWv+MMv/UTLmp1X94XU5vqL0PMdqdirHfzBNPJ+on2&#xA;j/5PJms7Y/xWfu/SHP7M/wAYj+Ojx62k6Z5xMPYSCZ28nTMeQaJBP9L1ue2X0n/e2x6xt2/1T2xh&#xA;lMduYcHNphLcbFktteRTxerZyFqfbj25DwDL92+ZsJAi4l1s8ZiakFs5hulMd2nLrR+hFOpB7YJg&#xA;T2kEwuO8WN6zpc9mPVX97at9mUDpXoGHbMOeAx36Oy0+cT25SY7cSdcMQ50Qldy/XMmAciIfJ8Rz&#xA;3aBfLpIuI5lQLRIIqNsyoFpkEVDO8bq6MVdSCrKaEEdwRl8ZNE4AiizrQ/zOYBbfzBEbuMAqt9GB&#xA;9YWop8YNBJ94b3ORkO55zWez/wDFgPCf5p+n4fzftHkzjSdR028RZdG1GK6K0X0gSsqxgVJMTcXB&#xA;PsPpyMRZef1GDJj2zQMfuv38kh1ryRoaat+mltwqMG9awKq0Rlf/AHYAdqUJ+GlK0zIjpwTZdnpe&#xA;1sxxeCT7pda7v29zzjzzoVnYtDdWELpDMWEygExoRx40NNuVTtX5Zia/TCAEojY83quyNXPJcZkW&#xA;OXeX2P8A848/+Sa8s/8AGGb/AKiZc5PUfWXp8f0h6LlLN2KuxV+cfLJ8L6DxO5Y8K8S0tkhFgZLe&#xA;ZBBBoRuCMsiKazNObHzQ6gRX6GZOgnWnqD51+19Ob/S9rEDhyji8/wCL9rn4e1SNsg4h39f2sg02&#xA;e0uGDWNykhAACVAceJ4GhzoNLOEzeOQP3/J2+myQmbxyB+/5LZ/K+nveJqAiFSD6lqVHplzsDQj8&#xA;KdcMuzMZn4le+PS2GTsjEcgy1749LYz5u0W3s1iurWFo0kZhMoBMakUpT+Wtema3tDRxhUoir59z&#xA;zPbvZ8cQE4RIBu+4cvlb7L/5x7/8k35Z/wCMM3/UTLnIav8AvC8Zl+ovRMx2t2Ksb/MY08l6kf8A&#xA;Jj/5PJmt7X/xaf46hz+y/wDGIfjo8Vt5umeeSi9pIJlBNmPKLRKKNin98qMWoxRcF9LC4kico69G&#xA;U0ORFg2GqWMSFFPbTzPaS0TUF9Nth68YqCAa/Eo/h92ZUcwP1OFk0chvD5J1aNHOhMUkd1DID6oU&#xA;hga/ssO33ZaC4cwYne4lAHyxpdpLNI0Xqw3FAkcgB9MdwCTX6euQ4QG785OQAuiPtYB5w0xNM1Ex&#xA;wrILaRQ8TODTcVIViBWmWQDu9DmOSFmrfH0bZ7fAvm8gio3zJjJpkEQkmXxk1EKyy5aJsDFxlwma&#xA;OFpbmSKVJY2KyRkMjDqCDUHKzNkcYkKPIvQ9C/Ma2vYxBqZS2uQPjkJ4QybbmmwB8QdvDwzY6XVx&#xA;O0tvueX1fYcsZvH6o/aGN/mHrnr/AFa2tJv9FZWdlRtnBI4kkH4hsaZT2vqNoxifSftdt2LpOHil&#xA;Ier7n2B/zjv/AOSZ8sf8YJv+omXOMz/WXq4cno2VMnYq7FX5vcsyeF7jjdyx4V41pbJCLAzWlsmI&#xA;tcpLGbLRFplJYJGRg6kqymqsOoIy6Fg2Gg5CDY5s10Dzjb3AEOoOsE4G8jHjG/vvsp9umdXoe0xP&#xA;bJtL7C9Z2b29CfpykRl38gf1H7PuQHnvWFeG1trOb/RpQ7yCNqhxUBakHcddsj2nnsRjE+kuu9pt&#xA;eDGEMcvQbJrr3PsH/nHn/wAk15Z/4wzf9RMucNrP70vBT5vRMxmLsVYx+ZjcfI+qHwWL/k8ma/tX&#xA;/Fp/jqHY9k/4zD3/AKHhFvPnAyi9xKKYw3HvlEotMoouO598qMGoxVxc7dchwMeFprn3wiC8LrXV&#xA;p7K6S6gYCSM7VFQQRQgjwIycYonhE48JZ5ovnPR76GlzKlrIAA8UrhRU/wAhYgGv3jv45Mguk1Gg&#xA;yQOwv3MC/MPWp7nWpLf1WNrbpGscVTxDcAzGlSOVWIr9GXYYbO77MwCOO63NsIX/AKEy7fXv+5ln&#xA;ro8V8+PAqr/0Jv2+u/8Acxy0eP8AimB8NUH/AEJ52+u/9zHJj8z+KYHwl4/6E/8A+X3/ALmGT/wr&#xA;8Ux/cu/6xA/5ff8AuYY/4V+KX9ytP/Qnvf67/wBzHIn8z+KSPCWN/wBCc9/rv/cxyB/MfimY8NSb&#xA;/oTTv9d/7mOVnxmY4H0X+WX+Ev8AAuk/4Q5/4c9N/wBHep6nPh6r8q+r8f2+XXMOd3vzbhy2ZPkE&#xA;uxV2Kvlv/rEP/l8/7mGZHrd5/hnl9jX/AFiH/wAvn/cwx9a/4Z5fY7/rEL/l8/7mGH94g/m/L7Gj&#xA;/wBCg/8AL7/3MMkPEYH81+KWn/oT/wD5ff8AuYZIeKwP5n8UtP8A0J53+u/9zHJjxvxTWfH/ABSw&#xA;/wDQnPf67/3McmPzH4pqPirD/wBCbd/rv/cxywfmfL7GqXH1fRP5Z/4T/wADaT/hHn/hz03/AEf6&#xA;nqc+Pqvyr6vx/b5dc12fi4zxfU0lk+UodiqT+b/0L/hy8/TfL9F0T6zw5cqeovGnHf7VMxtXweEf&#xA;E+jq5Wi8TxY+H9fR5pH/AMqW/Y+tf8l854/yd5/7J6E/yl5f7FEJ/wAqg/Z+tf8AJbIH+TfP/ZMD&#xA;/KHl/sVZf+VT9vrP/JXIn+TPP/ZMD+f8v9iqf8gq/wCXn/krkf8AWvz/ANkj/D/L/YtH/lVX/Lz/&#xA;AMlcP+tfn/sl/wAP8v8AYrG/5VN3+s/8lsI/kzz/ANky/wBcPL/YqEn/ACp79r61/wAlsmP5N8/9&#xA;kyH8o+X+xQ0n/KlP2/rX/JfJj+T/AD/2TYP5S8v9i//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:9c579e71-e1be-c045-8b9f-5e03678d574e</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:9c579e71-e1be-c045-8b9f-5e03678d574e</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:93952593-bb1f-e045-8f4e-cac664d349b7</stRef:instanceID>
            <stRef:documentID>xmp.did:93952593-bb1f-e045-8f4e-cac664d349b7</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f0cc5378-d42f-5749-a5cc-8399f5fc98f4</stEvt:instanceID>
                  <stEvt:when>2017-06-17T01:52:37+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9c579e71-e1be-c045-8b9f-5e03678d574e</stEvt:instanceID>
                  <stEvt:when>2018-07-09T22:42:03+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1500.000000</stDim:w>
            <stDim:h>1000.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 11.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1500 1000 li
1500 0 li
cp
clp
1500 1000 mo
0 1000 li
0 0 li
1500 0 li
1500 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
1419.61 781.965 mo
1415.3 776.807 li
1415.45 772.007 li
1420.16 774.528 li
1419.61 781.965 li
cp
1402.63 787.583 mo
1398.06 782.005 li
1414.21 777.962 li
1418.85 783.501 li
1402.63 787.583 li
cp
1385.66 785.339 mo
1385.54 784.165 li
1385.53 784.143 li
1385.53 784.121 li
1384.98 780.792 li
1396.26 782.281 li
1400.46 787.41 li
1385.66 785.339 li
cp
1384.68 778.98 mo
1384.63 778.87 li
1384.61 778.806 li
1384.58 778.718 li
1384.57 778.703 li
1384.48 778.598 li
1384.39 778.495 li
1384.38 778.488 li
1384.37 778.481 li
1384.37 778.48 li
1384.37 778.48 li
1378.43 773.877 li
1378.43 773.875 li
1378.42 773.87 li
1378.41 773.863 li
1378.41 773.861 li
1375.45 771.638 li
1375.41 771.617 li
1375.37 771.587 li
1375.37 771.583 li
1374.14 770.881 li
1377.01 771.189 li
1392.82 780.243 li
1384.71 779.172 li
1384.68 778.98 li
cp
1381.79 787.71 mo
1381.31 784.922 li
1383.72 784.061 li
1384.24 787.116 li
1381.79 787.71 li
cp
1383.26 794.062 mo
1381.02 794.246 li
1381.85 789.312 li
1384.16 788.751 li
1383.26 794.062 li
cp
1380.44 802.609 mo
1378.46 802.348 li
1380.66 795.852 li
1382.8 795.675 li
1380.44 802.609 li
cp
1376.1 811.957 mo
1374.38 811.237 li
1377.87 803.855 li
1379.81 804.109 li
1376.1 811.957 li
cp
1370.72 821.2 mo
1369.29 820.03 li
1373.65 812.634 li
1375.35 813.348 li
1370.72 821.2 li
cp
1364.81 829.476 mo
1363.67 827.876 li
1368.42 821.345 li
1369.87 822.526 li
1364.81 829.476 li
cp
1358.92 836.112 mo
1358.06 834.125 li
1362.63 829.119 li
1363.8 830.76 li
1358.92 836.112 li
cp
1353.63 840.443 mo
1353.01 838.122 li
1356.81 835.205 li
1357.72 837.289 li
1353.63 840.443 li
cp
1349.38 842.218 mo
1348.97 839.674 li
1351.57 838.822 li
1352.22 841.272 li
1349.38 842.218 li
cp
1361.32 856.722 mo
1356.63 858.459 li
1346.65 852.345 li
1349.06 847.26 li
1361.32 856.722 li
cp
1362.41 857.994 mo
1364.87 866.234 li
1359.06 867.347 li
1357.45 859.828 li
1362.41 857.994 li
cp
1362.21 877.448 mo
1357.17 879.332 li
1359.13 868.933 li
1364.78 867.85 li
1362.21 877.448 li
cp
1358.59 892.458 mo
1354.39 894.656 li
1356.84 881.135 li
1361.75 879.295 li
1358.59 892.458 li
cp
1354.94 907.767 mo
1351.58 910.133 li
1354.03 896.615 li
1358.11 894.484 li
1354.94 907.767 li
cp
1351.76 920.112 mo
1349.25 922.657 li
1351.18 912.337 li
1354.34 910.11 li
1351.76 920.112 li
cp
1348.81 930.668 mo
1347.93 931.235 li
1348.75 925.398 li
1350.9 923.223 li
1348.81 930.668 li
cp
1345.86 940.547 mo
1344.57 940.232 li
1347.55 933.359 li
1348.12 932.985 li
1345.86 940.547 li
cp
1338.22 944.585 mo
1336.96 944.036 li
1343.52 941.596 li
1344.09 941.734 li
1338.22 944.585 li
cp
1333.63 932.215 mo
1341.96 931.43 li
1342.65 940.246 li
1335.47 942.913 li
1333.63 932.215 li
cp
1328.69 940.223 mo
1328.69 940.221 li
1328.66 940.207 li
1317.43 934.952 li
1315.44 923.819 li
1332 932.038 li
1333.83 942.629 li
1328.69 940.223 li
cp
1294.74 920.841 mo
1293.37 910.126 li
1313.68 922.902 li
1315.65 933.888 li
1294.74 920.841 li
cp
1292.71 900.103 mo
1297.04 896.73 li
1297.08 896.684 li
1297.14 896.643 li
1297.14 896.64 li
1298.29 895.381 li
1311.85 903.973 li
1313.46 920.907 li
1293.14 908.127 li
1292.71 900.103 li
cp
1275.53 908.872 mo
1275.67 908.116 li
1275.67 908.114 li
1275.67 908.099 li
1275.67 908.008 li
1275.68 907.859 li
1275.67 907.801 li
1275.63 907.689 li
1275.6 907.599 li
1272.1 900.639 li
1277.98 903.357 li
1277.99 903.36 li
1278.01 903.37 li
1281.6 904.857 li
1281.7 904.897 1281.8 904.917 1281.9 904.917 cv
1281.99 904.917 1282.08 904.901 1282.18 904.868 cv
1284 904.186 li
1291.64 909.04 li
1293.02 919.768 li
1275.53 908.872 li
cp
1273.88 909.125 mo
1273.88 909.135 li
1271.36 922.305 li
1267.2 915.81 li
1269.95 901.774 li
1274.07 908.116 li
1273.88 909.125 li
cp
1257.72 927.086 mo
1256.22 920.051 li
1266.04 916.901 li
1270.51 923.892 li
1257.72 927.086 li
cp
1237.84 916.654 mo
1240.48 911.543 li
1254.61 920.018 li
1256 926.539 li
1237.84 916.654 li
cp
1215.06 898.665 mo
1217.39 893.537 li
1239.17 910.656 li
1236.53 915.767 li
1215.06 898.665 li
cp
1192.85 880.979 mo
1194.88 875.851 li
1216.11 892.538 li
1213.79 897.656 li
1192.85 880.979 li
cp
1171.15 863.696 mo
1172.89 858.571 li
1193.59 874.839 li
1191.57 879.956 li
1171.15 863.696 li
cp
1149.94 846.802 mo
1151.4 841.684 li
1171.58 857.541 li
1169.85 862.656 li
1149.94 846.802 li
cp
1129.2 830.282 mo
1130.39 825.176 li
1150.06 840.635 li
1148.61 845.741 li
1129.2 830.282 li
cp
1127.84 829.198 mo
1108.91 814.123 li
1109.85 809.037 li
1129.03 824.105 li
1127.84 829.198 li
cp
1099.03 796.748 mo
1097.03 787.781 li
1110.87 797.177 li
1108.86 806.094 li
1099.03 796.748 li
cp
1107.56 812.788 mo
1094.95 799.536 li
1098.16 798.086 li
1108.47 807.892 li
1107.56 812.788 li
cp
1091.19 786.493 mo
1095.19 786.762 li
1097.41 796.7 li
1094.15 798.173 li
1091.19 786.493 li
cp
1094.61 774.943 mo
1098.64 775.128 li
1095.27 785.194 li
1091.24 784.922 li
1094.61 774.943 li
cp
1077.34 769.3 mo
1075.76 767.522 li
1093.48 773.602 li
1093.47 773.61 li
1093.42 773.687 li
1093.34 773.836 li
1093.31 773.88 li
1093.08 774.561 li
1077.34 769.3 li
cp
1012.39 746.256 mo
1009.98 743.724 li
1072.74 766.481 li
1074.28 768.216 li
1012.39 746.256 li
cp
948.665 720.954 mo
945.567 717.866 li
1006.66 742.513 li
1008.92 744.885 li
948.665 720.954 li
cp
891.949 694.108 mo
888.682 690.971 li
941.813 716.341 li
944.445 718.965 li
891.949 694.108 li
cp
838.765 664.985 mo
835.838 662.25 li
884.154 688.8 li
886.686 691.231 li
838.765 664.985 li
cp
786.35 633.136 mo
784.246 631.208 li
830.242 659.17 li
832.202 661.001 li
786.35 633.136 li
cp
739.507 603.297 mo
738.122 602.048 li
777.326 627 li
778.719 628.275 li
739.507 603.297 li
cp
702.061 579.444 mo
700.701 578.231 li
730.162 596.982 li
731.531 598.217 li
702.061 579.444 li
cp
674.273 561.744 mo
672.933 560.559 li
692.464 572.989 li
693.808 574.188 li
674.273 561.744 li
cp
656.551 550.456 mo
655.224 549.288 li
664.49 555.186 li
665.812 556.355 li
656.551 550.456 li
cp
642.85 535.421 mo
657.506 544.728 li
662.267 551.909 li
647.689 542.63 li
642.85 535.421 li
cp
625.475 529.772 mo
625.377 529.686 li
646.65 543.83 li
646.826 543.985 li
625.475 529.772 li
cp
616.474 521.88 mo
611.666 514.86 li
639.547 533.32 li
644.275 540.364 li
616.474 521.88 li
cp
552.048 478.357 mo
547.217 471.561 li
608.18 512.551 li
612.931 519.489 li
552.048 478.357 li
cp
485.85 433.499 mo
481.009 426.919 li
543.524 469.078 li
548.329 475.836 li
485.85 433.499 li
cp
441.721 403.595 mo
436.89 397.168 li
477.138 424.308 li
481.96 430.863 li
441.721 403.595 li
cp
408.146 380.843 mo
403.335 374.54 li
432.906 394.482 li
437.717 400.882 li
408.146 380.843 li
cp
375.999 359.061 mo
371.217 352.88 li
399.263 371.795 li
404.054 378.071 li
375.999 359.061 li
cp
345.193 338.185 mo
340.45 332.134 li
367.067 350.081 li
371.826 356.233 li
345.193 338.185 li
cp
315.645 318.163 mo
310.947 312.239 li
336.218 329.28 li
340.938 335.302 li
315.645 318.163 li
cp
287.28 298.94 mo
282.633 293.145 li
306.637 309.332 li
311.31 315.225 li
287.28 298.94 li
cp
260.027 280.475 mo
255.434 274.802 li
278.25 290.189 li
282.872 295.954 li
260.027 280.475 li
cp
233.824 262.718 mo
229.291 257.174 li
250.982 271.8 li
255.549 277.44 li
233.824 262.718 li
cp
208.612 245.633 mo
204.144 240.216 li
224.771 254.126 li
229.275 259.636 li
208.612 245.633 li
cp
184.33 229.179 mo
179.93 223.886 li
199.554 237.121 li
203.993 242.503 li
184.33 229.179 li
cp
160.933 213.325 mo
156.602 208.156 li
175.278 220.75 li
179.651 226.008 li
160.933 213.325 li
cp
140.685 199.011 mo
136.737 194.328 li
151.885 204.972 li
155.911 209.776 li
140.685 199.011 li
cp
125.602 187.037 mo
122.926 183.873 li
131.684 190.77 li
134.484 194.091 li
125.602 187.037 li
cp
113.945 170.912 mo
125.529 179.875 li
129.611 187.139 li
117.919 177.932 li
113.945 170.912 li
cp
106.763 167.387 mo
103.583 161.793 li
110.716 168.397 li
114.047 174.281 li
106.763 167.387 li
cp
98.0154 156.885 mo
96.801 154.755 li
99.7434 158.219 li
101.078 160.567 li
98.0154 156.885 li
cp
92.6432 147.433 mo
90.351 140.89 li
95.8261 147.055 li
98.2631 154.049 li
92.6432 147.433 li
cp
86.9925 138.787 mo
85.6086 134.849 li
87.5842 137.745 li
89.0613 141.961 li
86.9925 138.787 li
cp
83.6302 129.161 mo
82.5401 122.245 li
85.8168 126.644 li
86.9772 134.067 li
83.6302 129.161 li
cp
82.2268 110.844 mo
86.0192 115.301 li
85.8278 124.029 li
82.0596 118.969 li
82.2268 110.844 li
cp
80.0448 104.592 mo
81.5529 97.0696 li
82.7235 98.6065 li
81.1313 106.526 li
80.0448 104.592 li
cp
80.5535 115.79 mo
79.8138 114.182 li
79.9452 107.622 li
80.6941 108.955 li
80.5535 115.79 li
cp
84.9917 87.4441 mo
86.4869 88.7462 li
83.3399 96.8237 li
82.0161 95.0859 li
84.9917 87.4441 li
cp
90.0405 78.7882 mo
91.8466 79.7232 li
87.2323 87.3124 li
85.6799 85.9606 li
90.0405 78.7882 li
cp
96.4619 71.2616 mo
98.5416 71.8161 li
92.7682 78.4315 li
91.0003 77.5163 li
96.4619 71.2616 li
cp
104.036 65.0605 mo
106.255 65.2914 li
99.7791 70.5204 li
97.8899 70.0167 li
104.036 65.0605 li
cp
112.491 60.3182 mo
114.478 60.3351 li
108.066 63.9 li
106.357 63.7223 li
112.491 60.3182 li
cp
121.555 57.1774 mo
122.073 57.1573 li
117.334 58.7884 li
116.878 58.7846 li
121.555 57.1774 li
cp
133.484 58.2397 mo
125.715 60.9269 li
120.17 59.4731 li
127.414 56.9801 li
133.484 58.2397 li
cp
137.596 55.3469 mo
142.731 56.2521 li
136.455 57.252 li
131.735 56.2725 li
137.596 55.3469 li
cp
156.193 59.6418 mo
148.038 61.0184 li
139.768 58.3139 li
147.422 57.0943 li
156.193 59.6418 li
cp
158.406 57.3149 mo
165.185 59.0576 li
159.821 59.0595 li
153.442 57.2068 li
158.406 57.3149 li
cp
171.271 60.6263 mo
181.171 63.6516 li
173.619 64.1308 li
164.11 60.6289 li
171.271 60.6263 li
cp
185.399 64.9565 mo
199.482 70.6232 li
190.493 71.7683 li
176.69 65.509 li
185.399 64.9565 li
cp
197.019 66.668 mo
208.286 70.8446 li
202.762 70.251 li
191.999 65.9204 li
197.019 66.668 li
cp
232.265 81.9988 mo
224.569 81.3037 li
206.751 72.2604 li
214.248 73.066 li
232.265 81.9988 li
cp
257.496 95.4908 mo
249.305 94.7926 li
228.046 83.1953 li
236.142 83.9265 li
257.496 95.4908 li
cp
283.283 109.454 mo
274.964 108.793 li
252.729 96.6605 li
260.949 97.3613 li
283.283 109.454 li
cp
310.068 123.958 mo
301.621 123.336 li
278.347 110.638 li
286.697 111.303 li
310.068 123.958 li
cp
337.901 139.029 mo
329.328 138.452 li
304.959 125.157 li
313.435 125.781 li
337.901 139.029 li
cp
366.847 154.704 mo
358.148 154.179 li
332.617 140.248 li
341.22 140.826 li
366.847 154.704 li
cp
396.976 171.019 mo
388.158 170.55 li
361.393 155.949 li
370.119 156.476 li
396.976 171.019 li
cp
428.361 188.015 mo
419.425 187.609 li
391.354 172.293 li
400.198 172.764 li
428.361 188.015 li
cp
461.085 205.734 mo
452.032 205.4 li
422.568 189.324 li
431.53 189.731 li
461.085 205.734 li
cp
495.228 224.223 mo
486.065 223.967 li
455.12 207.085 li
464.199 207.42 li
495.228 224.223 li
cp
530.893 243.536 mo
521.624 243.369 li
489.102 225.624 li
498.289 225.881 li
530.893 243.536 li
cp
547.539 252.106 mo
547.095 252.493 li
542.727 254.469 li
542.723 254.472 li
542.717 254.473 li
542.663 254.499 li
524.695 244.996 li
533.905 245.161 li
547.539 252.106 li
cp
548.258 253.565 mo
548.711 253.169 li
554.026 264.499 li
546.618 264.206 li
548.258 253.565 li
cp
547.835 228.397 mo
547.848 216.946 li
551.274 225.426 li
552.26 237.624 li
547.835 228.397 li
cp
548.379 208.855 mo
550.549 216.451 li
550.85 220.184 li
547.872 212.812 li
548.379 208.855 li
cp
548.991 204.981 mo
549.111 205.702 li
548.933 205.079 li
548.991 204.981 li
cp
553.113 204.08 mo
551.109 208.144 li
550.369 203.679 li
553.113 204.08 li
cp
559.921 206.057 mo
554.755 208.89 li
552.257 209.37 li
554.701 204.41 li
559.921 206.057 li
cp
568.91 203.507 mo
561.945 205.049 li
558.693 204.023 li
568.91 203.507 li
cp
625.655 229.438 mo
616.671 232.673 li
564.228 206.153 li
571.317 204.584 li
625.655 229.438 li
cp
573.073 203.43 mo
628.918 228.472 li
627.823 228.704 li
572.89 203.577 li
573.073 203.43 li
cp
631.329 229.568 mo
689.932 259.505 li
688.584 259.821 li
630.061 229.836 li
631.329 229.568 li
cp
692.081 260.617 mo
717.353 274.819 li
715.882 275.178 li
690.625 260.957 li
692.081 260.617 li
cp
721.33 280.776 mo
718.534 280.423 li
716.858 276.557 li
719.042 276.023 li
721.33 280.776 li
cp
721.906 283.303 mo
714.641 288.568 li
714.64 288.507 li
721.906 283.253 li
721.906 283.303 li
cp
721.982 287.505 mo
714.731 292.778 li
714.682 290.479 li
721.941 285.219 li
721.982 287.505 li
cp
722.149 296.873 mo
714.932 302.171 li
714.772 294.691 li
722.017 289.422 li
722.149 296.873 li
cp
722.462 314.208 mo
715.302 319.55 li
714.973 304.089 li
722.184 298.796 li
722.462 314.208 li
cp
722.751 330.368 mo
715.65 335.749 li
715.344 321.48 li
722.497 316.143 li
722.751 330.368 li
cp
722.864 336.6 mo
715.782 341.995 li
715.691 337.688 li
722.786 332.312 li
722.864 336.6 li
cp
723.827 340.142 mo
729.813 342.39 li
720.666 349.763 li
716.312 345.881 li
723.827 340.142 li
cp
741.772 328.483 mo
734.312 328.938 li
724.192 323.1 li
724.11 318.518 li
741.772 328.483 li
cp
753.611 337.418 mo
745.669 337.978 li
736.205 330.397 li
744.22 329.909 li
753.611 337.418 li
cp
769.297 350.825 mo
761.931 351.633 li
747.409 339.43 li
755.405 338.866 li
769.297 350.825 li
cp
781.355 363.507 mo
778.767 366.26 li
763.552 353.034 li
770.872 352.232 li
781.355 363.507 li
cp
779.576 358.541 mo
786.659 365.549 li
782.95 362.915 li
777.396 356.942 li
779.576 358.541 li
cp
791.943 378.325 mo
779.938 367.308 li
782.534 364.547 li
793.192 372.115 li
791.943 378.325 li
cp
794.551 373.324 mo
804.18 382.553 li
802.511 388.765 li
793.291 379.587 li
794.551 373.324 li
cp
811.784 391.206 mo
810.329 397.418 li
803.787 390.072 li
805.436 383.935 li
811.784 391.206 li
cp
816.69 397.641 mo
815.66 403.857 li
811.601 398.875 li
813.025 392.799 li
816.69 397.641 li
cp
817.996 399.368 mo
819.607 401.497 li
818.824 407.738 li
816.984 405.481 li
817.996 399.368 li
cp
821.054 402.588 mo
835.209 411.329 li
833.347 417.961 li
820.215 409.271 li
821.054 402.588 li
cp
883.607 441.231 mo
874.102 442.474 li
834.73 418.844 li
836.599 412.188 li
883.607 441.231 li
cp
936.251 474.593 mo
927.128 475.918 li
876.194 443.785 li
885.719 442.54 li
936.251 474.593 li
cp
895.96 446.998 mo
940.475 475.033 li
938.823 474.364 li
895.052 446.599 li
895.96 446.998 li
cp
948.003 479.781 mo
993.122 512.827 li
989.005 511.397 li
943.945 478.136 li
948.003 479.781 li
cp
1021.58 535.505 mo
1021.58 535.505 li
1021.59 535.51 li
1043.7 553.374 li
1039.36 552.154 li
992.62 514.316 li
997.423 515.983 li
1021.58 535.505 li
cp
1096.68 597.826 mo
1093.18 597.006 li
1042.32 554.617 li
1046.79 555.873 li
1096.68 597.826 li
cp
1148.53 643.467 mo
1146.06 642.98 li
1095.72 599.215 li
1099.33 600.059 li
1148.53 643.467 li
cp
1194.09 686.494 mo
1192.56 686.25 li
1148.26 645.014 li
1150.85 645.526 li
1194.09 686.494 li
cp
1196.09 688.4 mo
1203 695.617 li
1202.49 696.372 li
1194.42 688.135 li
1196.09 688.4 li
cp
1204.91 689.48 mo
1206.66 689.321 li
1202.31 691.35 li
1201.99 691.008 li
1204.91 689.48 li
cp
1203.45 692.552 mo
1205.81 691.448 li
1204.4 693.546 li
1203.45 692.552 li
cp
1207.44 695.504 mo
1200.81 705.542 li
1200.28 702.457 li
1207.02 692.467 li
1207.44 695.504 li
cp
1214.98 678.702 mo
1215.3 681.283 li
1208.71 693.232 li
1208.34 690.476 li
1214.98 678.702 li
cp
1223 663.965 mo
1223.27 666.232 li
1216.58 678.876 li
1216.27 676.399 li
1223 663.965 li
cp
1231.26 649.746 mo
1231.48 651.934 li
1224.58 663.948 li
1224.29 661.595 li
1231.26 649.746 li
cp
1241.65 660.144 mo
1234.48 673.424 li
1225.11 666.179 li
1232.53 653.268 li
1241.65 660.144 li
cp
1239.72 635.953 mo
1239.88 638.011 li
1232.83 649.69 li
1232.6 647.473 li
1239.72 635.953 li
cp
1249.65 645.932 mo
1242.42 658.757 li
1233.33 651.906 li
1240.9 639.353 li
1249.65 645.932 li
cp
1248.3 622.203 mo
1248.39 624.046 li
1241.27 635.714 li
1241.12 633.686 li
1248.3 622.203 li
cp
1249.41 625.391 mo
1257.79 631.588 li
1250.43 644.553 li
1241.72 638.003 li
1249.41 625.391 li
cp
1257.64 613.299 mo
1256.8 616.861 li
1249.89 622.636 li
1249.76 620.015 li
1257.64 613.299 li
cp
1264.9 620.118 mo
1258.6 630.233 li
1250.46 624.212 li
1257.69 618.162 li
1264.9 620.118 li
cp
1259.55 612.054 mo
1270.04 613.97 li
1265.86 618.75 li
1258.44 616.738 li
1259.55 612.054 li
cp
1271.72 614.443 mo
1284.3 621.53 li
1280.03 626.664 li
1267.35 619.431 li
1271.72 614.443 li
cp
1298.43 629.558 mo
1294.27 634.844 li
1281.42 627.457 li
1285.69 622.316 li
1298.43 629.558 li
cp
1312.51 637.674 mo
1308.46 643.1 li
1295.64 635.638 li
1299.81 630.346 li
1312.51 637.674 li
cp
1326.35 645.814 mo
1322.42 651.366 li
1309.82 643.901 li
1313.88 638.47 li
1326.35 645.814 li
cp
1339.71 653.734 mo
1335.95 659.433 li
1323.77 652.172 li
1327.71 646.616 li
1339.71 653.734 li
cp
1352.36 661.176 mo
1348.86 667.082 li
1337.3 660.236 li
1341.07 654.533 li
1352.36 661.176 li
cp
1362.54 668.349 mo
1359.27 674.27 li
1350.18 667.932 li
1353.68 662.034 li
1362.54 668.349 li
cp
1368.42 675.458 mo
1365.27 680.884 li
1360.49 675.315 li
1363.69 669.524 li
1368.42 675.458 li
cp
1370.43 683.966 mo
1367.89 686.416 li
1366.26 682.299 li
1369.03 677.533 li
1370.43 683.966 li
cp
1371.13 677.219 mo
1371.42 681.119 li
1370.5 676.881 li
1371.13 677.219 li
cp
1371.43 692.005 mo
1371.04 692.632 li
1371.5 688.966 li
1371.43 692.005 li
cp
1369.1 695.563 mo
1366.78 696.508 li
1368.32 688.186 li
1370.24 686.336 li
1369.1 695.563 li
cp
1365.74 709.848 mo
1363.56 711.041 li
1366.42 698.351 li
1368.7 697.421 li
1365.74 709.848 li
cp
1368.12 706.669 mo
1368.11 706.683 li
1368.26 706.048 li
1368.12 706.669 li
cp
1364.23 722.788 mo
1364.18 722.854 li
1367.12 710.797 li
1364.23 722.788 li
cp
1359.81 740.708 mo
1359.79 740.734 li
1363.25 726.689 li
1363.28 726.643 li
1359.81 740.708 li
cp
1375.04 749.063 mo
1368.43 752.359 li
1359.61 748.057 li
1361.01 742.402 li
1375.04 749.063 li
cp
1400.8 761.301 mo
1394.71 765.19 li
1370.21 753.227 li
1376.84 749.919 li
1400.8 761.301 li
cp
1394.65 766.925 mo
1412.38 776.801 li
1396.79 780.705 li
1379.34 770.716 li
1394.65 766.925 li
cp
1356.84 759.285 mo
1357.48 756.719 li
1368.34 754.065 li
1392.47 765.846 li
1377.35 769.593 li
1356.84 759.285 li
cp
1370.73 768.934 mo
1366.7 766.632 li
1366.69 766.629 li
1366.68 766.623 li
1358.05 761.699 li
1357.33 761.287 li
1373.03 769.181 li
1370.73 768.934 li
cp
1376.48 777.36 mo
1371.88 773.883 li
1374.8 773.122 li
1379.3 776.607 li
1376.48 777.36 li
cp
1377.95 781.266 mo
1377.28 778.773 li
1380.4 777.938 li
1380.83 780.482 li
1377.95 781.266 li
cp
1373.92 791.425 mo
1374.68 786.781 li
1380.28 789.153 li
1379.48 793.97 li
1373.92 791.425 li
cp
1371.45 799.114 mo
1373.52 792.967 li
1379.11 795.531 li
1376.95 801.893 li
1371.45 799.114 li
cp
1367.58 807.521 mo
1370.86 800.574 li
1376.37 803.358 li
1372.97 810.547 li
1367.58 807.521 li
cp
1362.76 815.85 mo
1366.85 808.91 li
1372.24 811.936 li
1368.01 819.118 li
1362.76 815.85 li
cp
1357.41 823.306 mo
1361.9 817.164 li
1367.14 820.432 li
1362.52 826.793 li
1357.41 823.306 li
cp
1352.08 829.254 mo
1356.42 824.529 li
1361.51 828.01 li
1357.03 832.918 li
1352.08 829.254 li
cp
1347.34 833.069 mo
1350.92 830.347 li
1355.83 833.982 li
1352.12 836.823 li
1347.34 833.069 li
cp
1346.08 836.495 mo
1345.94 835.823 li
1346.18 834.162 li
1350.47 837.528 li
1348.25 838.256 li
1346.08 836.495 li
cp
1346.47 839.094 mo
1347.37 839.626 li
1347.71 841.744 li
1346.67 841.142 li
1346.47 839.094 li
cp
1336 837.142 mo
1336.78 833.679 li
1336.99 834.148 li
1336.89 834.202 li
1336.61 834.533 1336.65 835.029 1336.98 835.308 cv
1348.06 844.678 li
1336 837.142 li
cp
1345.34 851.444 mo
1330.93 840.747 li
1330.75 840.614 1330.53 840.572 1330.33 840.606 cv
1328.94 837.199 li
1329.16 837.115 li
1329.8 836.525 li
1330.92 839.338 li
1331.04 839.646 1331.33 839.834 1331.65 839.834 cv
1331.74 839.834 1331.84 839.816 1331.94 839.778 cv
1332.34 839.618 1332.54 839.162 1332.38 838.759 cv
1332.32 838.608 li
1332.32 838.608 li
1332.41 838.603 li
1334.93 838.324 li
1347.76 846.338 li
1345.34 851.444 li
cp
1345.36 864.042 mo
1346.3 853.974 li
1355.84 859.821 li
1357.42 867.182 li
1345.36 864.042 li
cp
1345.04 879.406 mo
1345.28 865.644 li
1357.55 868.838 li
1355.49 879.748 li
1345.04 879.406 li
cp
1344.49 896.552 mo
1345 880.977 li
1355.21 881.311 li
1352.65 895.399 li
1344.49 896.552 li
cp
1343.91 913.633 mo
1344.44 898.145 li
1352.36 897.026 li
1349.77 911.309 li
1343.91 913.633 li
cp
1346.89 927.326 mo
1346.16 932.615 li
1344.01 937.556 li
1343.5 930.863 li
1346.89 927.326 li
cp
1343.52 928.568 mo
1343.85 915.344 li
1349.43 913.133 li
1347.28 924.657 li
1343.52 928.568 li
cp
1328.93 874.863 mo
1327.49 858.056 li
1343.72 865.143 li
1343.47 879.123 li
1328.93 874.863 li
cp
1330.44 893.771 mo
1329.07 876.54 li
1343.43 880.749 li
1342.92 896.492 li
1330.44 893.771 li
cp
1330.44 913.727 mo
1331.81 930.19 li
1315.13 921.913 li
1313.51 904.883 li
1330.44 913.727 li
cp
1328.96 894.906 mo
1330.3 911.876 li
1313.34 903.017 li
1311.7 885.79 li
1328.96 894.906 li
cp
1311.52 883.919 mo
1311.07 879.127 li
1316.05 870.678 li
1316.06 870.634 li
1316.08 870.612 li
1316.37 870.001 li
1327.44 875.954 li
1328.81 893.051 li
1311.52 883.919 li
cp
1303.7 889.47 mo
1303.71 889.44 li
1303.76 889.403 li
1308.01 883.584 li
1310.04 884.872 li
1311.66 901.993 li
1299.37 894.204 li
1303.7 889.47 li
cp
1300.83 887.141 mo
1302.11 888.885 li
1296.79 894.692 li
1295.86 892.567 li
1300.83 887.141 li
cp
1294.84 891.35 mo
1289.77 887.397 li
1294.5 882.27 li
1299.72 886.026 li
1294.84 891.35 li
cp
1291 899.438 mo
1290.35 896.954 li
1294.62 893.651 li
1295.6 895.867 li
1291 899.438 li
cp
1287.56 902.856 mo
1287.58 902.849 li
1287.59 902.847 li
1290.84 901.516 li
1290.93 901.459 li
1291.03 901.409 li
1291.03 901.409 li
1291.2 901.278 li
1291.51 907.094 li
1285.85 903.497 li
1287.56 902.856 li
cp
1288.92 897.688 mo
1289.6 900.301 li
1286.25 901.552 li
1285.85 898.819 li
1288.92 897.688 li
cp
1282.13 894.813 mo
1282.04 894.542 li
1282.25 892.777 li
1283.16 892.448 li
1287.91 896.386 li
1285.14 897.406 li
1282.13 894.813 li
cp
1283.09 900.716 mo
1282.89 898.268 li
1284.26 898.854 li
1284.64 901.365 li
1283.09 900.716 li
cp
1282.31 902.095 mo
1283.55 902.615 li
1281.9 903.282 li
1280.52 902.711 li
1282.31 902.095 li
cp
1280.45 897.842 mo
1281.36 900.762 li
1278.81 901.64 li
1277.8 898.476 li
1280.45 897.842 li
cp
1278.37 890.922 mo
1280.9 890.701 li
1280.46 894.539 li
1280.46 894.542 li
1280.26 896.271 li
1277.7 896.884 li
1278.37 890.922 li
cp
1271.36 886.132 mo
1274.02 877.594 li
1279.81 880.751 li
1277.19 889.078 li
1271.36 886.132 li
cp
1276.15 898.472 mo
1277.01 901.181 li
1271.79 898.765 li
1270.88 895.956 li
1276.15 898.472 li
cp
1271.08 887.745 mo
1276.82 890.65 li
1276.14 896.726 li
1270.4 893.99 li
1271.08 887.745 li
cp
1262.59 880.556 mo
1265.2 872.042 li
1272.62 876.785 li
1269.97 885.313 li
1262.59 880.556 li
cp
1268.02 892.523 mo
1263.1 882.759 li
1269.58 886.93 li
1268.92 893.106 li
1268.02 892.523 li
cp
1249.06 900.393 mo
1251.99 886.401 li
1268.69 900.03 li
1265.86 914.509 li
1249.06 900.393 li
cp
1248.3 901.803 mo
1264.78 915.655 li
1255.41 918.663 li
1241.35 910.234 li
1248.3 901.803 li
cp
1224.28 883.471 mo
1247.07 900.822 li
1240.05 909.347 li
1218.16 892.144 li
1224.28 883.471 li
cp
1200.8 865.6 mo
1223.02 882.518 li
1216.92 891.172 li
1195.56 874.391 li
1200.8 865.6 li
cp
1177.88 848.152 mo
1199.54 864.642 li
1194.32 873.412 li
1173.49 857.042 li
1177.88 848.152 li
cp
1155.5 831.111 mo
1176.61 847.183 li
1172.23 856.051 li
1151.91 840.088 li
1155.5 831.111 li
cp
1133.63 814.462 mo
1154.2 830.123 li
1150.62 839.076 li
1130.82 823.513 li
1133.63 814.462 li
cp
1112.25 798.193 mo
1132.29 813.448 li
1129.5 822.473 li
1110.19 807.305 li
1112.25 798.193 li
cp
1100.13 775.607 mo
1114.68 785.131 li
1111.33 795.588 li
1096.76 785.702 li
1100.13 775.607 li
cp
1102.2 766.103 mo
1105.28 765.976 li
1099.34 773.589 li
1095.73 773.423 li
1102.2 766.103 li
cp
1096.68 769.978 mo
1094.6 772.328 li
1073.79 765.184 li
1072.16 761.174 li
1096.68 769.978 li
cp
1071.49 759.262 mo
1070.7 753.413 li
1101.08 764.998 li
1097.8 768.711 li
1071.49 759.262 li
cp
1005.31 736.039 mo
1070.17 760.455 li
1071.8 764.47 li
1007.69 741.223 li
1005.31 736.039 li
cp
939.703 708.887 mo
1003.22 735.238 li
1005.58 740.383 li
942.84 715.073 li
939.703 708.887 li
cp
881.472 680.756 mo
937.461 707.939 li
940.528 713.987 li
885.191 687.563 li
881.472 680.756 li
cp
827.17 650.843 mo
879.025 679.553 li
882.645 686.179 li
831.29 657.958 li
827.17 650.843 li
cp
774.034 618.661 mo
824.488 649.348 li
828.496 656.27 li
778.377 625.803 li
774.034 618.661 li
cp
726.722 588.687 mo
771.112 616.88 li
775.383 623.901 li
731.207 595.785 li
726.722 588.687 li
cp
688.857 564.64 mo
723.619 586.717 li
728.1 593.808 li
693.505 571.79 li
688.857 564.64 li
cp
685.664 562.613 mo
690.307 569.754 li
665.527 553.984 li
660.76 546.796 li
685.664 562.613 li
cp
654.943 533.313 mo
681.115 549.874 li
684.736 560.163 li
658.713 543.635 li
654.943 533.313 li
cp
636.896 521.89 mo
652.77 531.937 li
656.537 542.253 li
640.756 532.231 li
636.896 521.89 li
cp
605.427 501.247 mo
634.698 520.494 li
638.532 530.764 li
609.385 511.467 li
605.427 501.247 li
cp
540.579 458.009 mo
603.167 499.758 li
607.109 509.938 li
544.716 467.986 li
540.579 458.009 li
cp
474.033 413.505 mo
538.229 456.44 li
542.357 466.396 li
478.318 423.209 li
474.033 413.505 li
cp
429.713 383.861 mo
471.595 411.874 li
475.872 421.559 li
434.076 393.376 li
429.713 383.861 li
cp
396.016 361.327 mo
427.221 382.194 li
431.575 391.689 li
400.43 370.686 li
396.016 361.327 li
cp
363.773 339.763 mo
393.478 359.63 li
397.881 368.968 li
368.224 348.967 li
363.773 339.763 li
cp
332.895 319.107 mo
361.196 338.039 li
365.636 347.222 li
337.37 328.163 li
332.895 319.107 li
cp
303.292 299.31 mo
330.279 317.358 li
334.744 326.392 li
307.786 308.213 li
303.292 299.31 li
cp
274.889 280.314 mo
300.634 297.533 li
305.117 306.413 li
279.393 289.066 li
274.889 280.314 li
cp
247.616 262.071 mo
272.196 278.512 li
276.687 287.241 li
252.121 270.673 li
247.616 262.071 li
cp
221.403 244.54 mo
244.888 260.246 li
249.381 268.826 li
225.906 252.996 li
221.403 244.54 li
cp
196.193 227.68 mo
218.638 242.691 li
223.129 251.123 li
200.686 235.989 li
196.193 227.68 li
cp
171.928 211.45 mo
193.396 225.809 li
197.876 234.094 li
176.406 219.615 li
171.928 211.45 li
cp
148.556 195.819 mo
169.098 209.557 li
173.563 217.698 li
153.015 203.843 li
148.556 195.819 li
cp
145.692 193.901 mo
150.07 201.778 li
132.831 189.664 li
128.496 181.949 li
145.692 193.901 li
cp
123.559 169.366 mo
141.547 181.673 li
144.793 191.362 li
126.796 178.853 li
123.559 169.366 li
cp
108.908 158.459 mo
121.387 167.865 li
124.548 177.13 li
112.005 167.426 li
108.908 158.459 li
cp
106.649 156.731 mo
109.573 165.198 li
101.067 157.323 li
98.254 149.25 li
106.649 156.731 li
cp
104.726 144.356 mo
106.222 154.248 li
97.2494 146.251 li
95.7943 136.813 li
104.726 144.356 li
cp
95.7342 124.375 mo
104.997 131.673 li
104.716 142.292 li
95.4927 134.502 li
95.7342 124.375 li
cp
94.4995 121.239 mo
87.6673 114.749 li
89.5807 105.275 li
96.5583 111.125 li
94.4995 121.239 li
cp
93.9596 135.223 mo
95.3338 144.135 li
89.0322 137.038 li
87.727 128.689 li
93.9596 135.223 li
cp
87.5578 116.812 mo
94.1924 123.115 li
93.958 132.946 li
87.3558 126.024 li
87.5578 116.812 li
cp
88.218 104.085 mo
86.3613 113.278 li
82.329 108.539 li
84.0478 99.9897 li
88.218 104.085 li
cp
92.3109 93.3671 mo
88.7735 102.429 li
84.4834 98.2158 li
87.7664 89.7891 li
92.3109 93.3671 li
cp
98.1704 83.5091 mo
93.043 91.9452 li
88.4515 88.3302 li
93.2172 80.4921 li
98.1704 83.5091 li
cp
105.552 74.8193 mo
99.0921 82.231 li
94.1592 79.2264 li
100.168 72.3414 li
105.552 74.8193 li
cp
114.178 67.5902 mo
106.719 73.6267 li
101.442 71.1979 li
108.386 65.5914 li
114.178 67.5902 li
cp
115.697 66.4526 mo
110.149 64.5383 li
117.567 60.4147 li
123.659 62.012 li
115.697 66.4526 li
cp
134.657 65.8446 mo
125.836 70.558 li
117.584 67.1993 li
125.815 62.6085 li
134.657 65.8446 li
cp
136.583 64.8773 mo
128.089 61.7683 li
136.442 58.8789 li
145.498 61.8401 li
136.583 64.8773 li
cp
159.02 67.1826 mo
149.38 70.2872 li
138.775 65.7902 li
147.953 62.6632 li
159.02 67.1826 li
cp
161.393 66.4546 mo
150.827 62.1402 li
159.631 60.6542 li
170.581 64.6869 li
161.393 66.4546 li
cp
177.99 74.4586 mo
163.785 67.5935 li
173.405 65.7429 li
187.888 72.3106 li
177.99 74.4586 li
cp
209.776 83.671 mo
199.474 86.0394 li
180.136 75.6013 li
190.261 73.4043 li
209.776 83.671 li
cp
212.153 83.1459 mo
192.943 73.0401 li
202.433 71.831 li
221.812 81.6665 li
212.153 83.1459 li
cp
236.775 96.7362 mo
214.413 84.3887 li
224.205 82.8889 li
246.68 95.1494 li
236.775 96.7362 li
cp
262.329 110.846 mo
239.007 97.9688 li
248.933 96.3786 li
272.365 109.164 li
262.329 110.846 li
cp
288.879 125.504 mo
264.541 112.067 li
274.597 110.382 li
299.048 123.721 li
288.879 125.504 li
cp
316.48 140.746 mo
291.07 126.714 li
301.259 124.927 li
326.782 138.853 li
316.48 140.746 li
cp
345.202 156.604 mo
318.65 141.943 li
328.97 140.047 li
355.632 154.595 li
345.202 156.604 li
cp
375.107 173.116 mo
347.349 157.79 li
357.798 155.777 li
385.67 170.982 li
375.107 173.116 li
cp
406.279 190.325 mo
377.232 174.29 li
387.814 172.152 li
416.968 188.057 li
406.279 190.325 li
cp
438.789 208.277 mo
408.379 191.484 li
419.087 189.213 li
449.605 205.866 li
438.789 208.277 li
cp
472.734 227.019 mo
440.866 209.424 li
451.701 207.009 li
483.674 224.452 li
472.734 227.019 li
cp
508.208 246.607 mo
474.785 228.152 li
485.743 225.581 li
519.268 243.873 li
508.208 246.607 li
cp
532.19 259.394 mo
510.277 247.714 li
521.315 244.986 li
540.879 255.332 li
532.19 259.394 li
cp
545.063 263.986 mo
532.648 260.914 li
543.382 255.897 li
543.382 255.897 li
546.528 254.474 li
545.063 263.986 li
cp
601.59 299.215 mo
595.549 305.049 li
543.853 276.623 li
546.233 266.185 li
601.59 299.215 li
cp
555.047 266.111 mo
604.052 296.356 li
602.692 298.042 li
548.761 265.862 li
555.047 266.111 li
cp
552.953 226.692 mo
601.895 255.628 li
602.835 270.632 li
554.135 241.318 li
552.953 226.692 li
cp
553.858 257.413 mo
553.978 258.91 li
549.572 249.536 li
549.453 248.095 li
553.858 257.413 li
cp
553.5 252.983 mo
549.083 243.641 li
548.183 232.752 li
552.612 241.988 li
553.5 252.983 li
cp
601.322 246.495 mo
601.777 253.733 li
552.798 224.776 li
552.231 217.755 li
601.322 246.495 li
cp
601.065 242.399 mo
601.203 244.604 li
552.077 215.844 li
551.909 213.749 li
601.065 242.399 li
cp
600.945 240.51 mo
579.339 227.917 li
600.944 240.484 li
600.945 240.51 li
cp
603.807 237.967 mo
601.714 239.114 li
553.061 210.815 li
554.89 210.463 li
603.807 237.967 li
cp
605.481 237.108 mo
556.64 209.646 li
561.925 206.748 li
614.708 233.441 li
605.481 237.108 li
cp
675.45 264.872 mo
666.055 268.834 li
607.304 238.074 li
616.577 234.39 li
675.45 264.872 li
cp
677.346 264.085 mo
618.578 233.657 li
627.677 230.38 li
686.558 260.549 li
677.346 264.085 li
cp
704.655 279.567 mo
679.132 265.082 li
688.418 261.517 li
713.945 275.89 li
704.655 279.567 li
cp
711.535 284.79 mo
706.169 280.657 li
715.348 277.025 li
717.018 280.876 li
711.535 284.79 li
cp
713.93 287.082 mo
712.726 285.869 li
718.197 281.964 li
720.591 282.266 li
713.93 287.082 li
cp
702.52 345.719 mo
702.397 341.056 li
714.132 338.292 li
714.23 342.939 li
702.52 345.719 li
cp
703.296 354.025 mo
702.695 349.591 li
714.863 346.693 li
718.988 350.371 li
703.296 354.025 li
cp
735.943 363.737 mo
722.867 369.589 li
704.425 355.375 li
720.453 351.643 li
735.943 363.737 li
cp
749.24 357.566 mo
737.56 363.006 li
721.904 350.783 li
731.377 343.148 li
749.24 357.566 li
cp
750.82 356.822 mo
733.114 342.531 li
745.216 339.639 li
760.247 352.27 li
750.82 356.822 li
cp
769.369 372.206 mo
752.155 357.922 li
761.557 353.382 li
777.496 367.239 li
769.369 372.206 li
cp
781.853 384.437 mo
770.567 373.315 li
778.726 368.328 li
791.079 379.665 li
781.853 384.437 li
cp
790.493 394.395 mo
782.951 385.637 li
792.29 380.807 li
801.518 389.992 li
790.493 394.395 li
cp
797.711 403.069 mo
791.558 395.661 li
802.698 391.212 li
809.397 398.734 li
797.711 403.069 li
cp
803.138 409.748 mo
798.762 404.355 li
810.495 400.002 li
814.852 405.351 li
803.138 409.748 li
cp
806.372 413.734 mo
804.182 411.034 li
815.899 406.635 li
818.078 409.308 li
806.372 413.734 li
cp
820.711 423.437 mo
807.827 414.863 li
819.277 410.533 li
832.112 419.026 li
820.711 423.437 li
cp
860.964 447.758 mo
822.391 424.471 li
833.737 420.081 li
872.186 443.156 li
860.964 447.758 li
cp
914.409 481.161 mo
862.611 448.781 li
873.856 444.169 li
925.259 476.597 li
914.409 481.161 li
cp
976.303 513.131 mo
966.276 516.956 li
915.964 482.211 li
926.853 477.632 li
976.303 513.131 li
cp
978.159 512.529 mo
928.993 477.234 li
938.256 475.89 li
986.568 511.551 li
978.159 512.529 li
cp
1029.72 552.834 mo
979.938 513.904 li
988.399 512.92 li
1036.97 552.243 li
1029.72 552.834 li
cp
1085.02 597.68 mo
1031.49 554.265 li
1038.73 553.675 li
1090.86 597.124 li
1085.02 597.68 li
cp
1139.45 643.795 mo
1086.7 599.098 li
1092.55 598.543 li
1143.89 643.171 li
1139.45 643.795 li
cp
1187.37 687.091 mo
1140.98 645.167 li
1145.44 644.539 li
1190.52 686.501 li
1187.37 687.091 li
cp
1188.75 688.43 mo
1191.93 687.836 li
1201.59 697.701 li
1200.23 699.725 li
1188.75 688.43 li
cp
1210.78 717.221 mo
1203.96 727.697 li
1203.96 727.698 li
1203.96 727.702 li
1203.89 727.883 li
1203.87 727.91 li
1170.05 700.075 li
1175.26 695.611 li
1192.98 711.261 li
1193.01 711.271 li
1193.05 711.313 li
1193.19 711.41 1193.34 711.457 1193.5 711.457 cv
1193.5 711.457 li
1193.5 711.457 li
1193.62 711.457 1193.73 711.428 1193.84 711.377 cv
1193.93 711.308 li
1194.09 711.191 li
1194.1 711.162 li
1194.14 711.126 li
1199 704.279 li
1199.54 707.449 li
1193.32 716.411 li
1193.07 716.767 1193.16 717.257 1193.51 717.505 cv
1193.65 717.6 1193.81 717.645 1193.96 717.645 cv
1194.21 717.645 1194.45 717.527 1194.61 717.307 cv
1200.53 708.781 li
1210.78 717.221 li
cp
1218.17 705.307 mo
1211.63 715.883 li
1201.41 707.476 li
1208.42 696.869 li
1218.17 705.307 li
cp
1225.88 690.564 mo
1218.96 703.906 li
1209.25 695.513 li
1216.34 682.65 li
1225.88 690.564 li
cp
1226.61 689.128 mo
1217.11 681.243 li
1224.34 667.574 li
1233.74 674.839 li
1226.61 689.128 li
cp
1249.59 684.866 mo
1242.59 700.07 li
1227.88 690.099 li
1235.05 675.736 li
1249.59 684.866 li
cp
1257.1 669.63 mo
1250.28 683.441 li
1235.77 674.338 li
1242.96 661.025 li
1257.1 669.63 li
cp
1264.6 655.014 mo
1257.81 668.224 li
1243.72 659.648 li
1250.96 646.807 li
1264.6 655.014 li
cp
1272.24 640.154 mo
1265.32 653.614 li
1251.74 645.44 li
1259.11 632.45 li
1272.24 640.154 li
cp
1272.99 638.773 mo
1259.91 631.101 li
1266.39 620.693 li
1279.15 627.966 li
1272.99 638.773 li
cp
1287.6 647.371 mo
1274.35 639.568 li
1280.51 628.747 li
1293.42 636.169 li
1287.6 647.371 li
cp
1302.18 656.016 mo
1288.95 648.17 li
1294.78 636.956 li
1307.65 644.448 li
1302.18 656.016 li
cp
1316.56 664.629 mo
1303.54 656.824 li
1309.01 645.247 li
1321.65 652.736 li
1316.56 664.629 li
cp
1330.68 673.124 mo
1317.92 665.446 li
1323.01 653.546 li
1335.23 660.832 li
1330.68 673.124 li
cp
1344.5 681.417 mo
1332.05 673.947 li
1336.6 661.647 li
1348.21 668.525 li
1344.5 681.417 li
cp
1355.66 688.656 mo
1345.89 682.276 li
1349.59 669.43 li
1358.65 675.753 li
1355.66 688.656 li
cp
1361.7 693.889 mo
1357.04 689.656 li
1359.95 677.102 li
1364.53 682.438 li
1361.7 693.889 li
cp
1363.05 695.01 mo
1365.57 684.805 li
1366.78 687.876 li
1365.19 696.458 li
1363.05 695.01 li
cp
1361.82 711.611 mo
1359.9 711.133 li
1362.7 696.67 li
1364.86 698.13 li
1361.82 711.611 li
cp
1359.75 727.092 mo
1363.09 713.087 li
1365.23 711.913 li
1361.84 725.84 li
1359.75 727.092 li
cp
1357.42 743.777 mo
1355.37 745.019 li
1359.24 729.232 li
1361.31 727.989 li
1357.42 743.777 li
cp
1359.23 749.617 mo
1366.13 752.988 li
1357.9 754.998 li
1359.23 749.617 li
cp
1355.01 760.165 mo
1358.83 744.622 li
1358.85 744.601 li
1355.01 760.165 li
cp
1361.5 767.699 mo
1355.33 764.17 li
1355.5 763.716 li
1357.54 763.218 li
1364.2 767.02 li
1361.5 767.699 li
cp
1363.47 768.825 mo
1366.17 768.144 li
1370.09 770.381 li
1370.1 770.386 li
1372.91 771.991 li
1370.22 772.692 li
1363.47 768.825 li
cp
1370.26 781.688 mo
1365.21 778.059 li
1370.1 774.51 li
1375 778.209 li
1370.26 781.688 li
cp
1370.16 789.306 mo
1372.38 786.907 li
1373.16 786.334 li
1372.46 790.638 li
1370.16 789.306 li
cp
1364.91 795.344 mo
1366.21 793.57 li
1369.06 790.487 li
1372.1 792.248 li
1370.05 798.344 li
1364.91 795.344 li
cp
1359.53 802.811 mo
1359.92 802.156 li
1363.97 796.618 li
1369.47 799.825 li
1366.22 806.736 li
1359.53 802.811 li
cp
1354.68 811.05 mo
1358.74 804.164 li
1365.48 808.127 li
1361.42 815.035 li
1354.68 811.05 li
cp
1350.73 819.261 mo
1353.93 812.435 li
1360.55 816.348 li
1356.09 822.456 li
1350.73 819.261 li
cp
1347.96 826.676 mo
1349.66 821.546 li
1350.06 820.69 li
1355.07 823.677 li
1350.77 828.362 li
1347.96 826.676 li
cp
1347.45 828.205 mo
1349.52 829.442 li
1347.66 830.847 li
1347.65 830.688 1347.58 830.54 1347.47 830.412 cv
1347.46 830.372 li
1347.44 830.363 li
1347.43 830.346 li
1346.91 829.835 li
1347.45 828.205 li
cp
1344.18 828.79 mo
1344.16 828.834 li
1343.63 828.129 li
1345.77 821.643 li
1347.88 821.914 li
1345.59 828.822 li
1345.49 828.812 1345.41 828.849 1345.32 828.878 cv
1345.29 828.849 li
1345 828.527 1344.5 828.5 1344.18 828.79 cv
cp
1344.35 838.093 mo
1344.73 839.801 li
1343.07 838.401 li
1344.35 838.093 li
cp
1341.93 836.596 mo
1343.55 835.088 li
1343.55 835.087 li
1344.6 834.106 li
1344.24 836.501 li
1341.86 837.077 li
1341.93 836.596 li
cp
1339 829.567 mo
1339.14 829.267 li
1342.02 834.361 li
1341.58 834.778 li
1339 829.567 li
cp
1338.13 831.347 mo
1340.38 835.895 li
1340.25 836.015 li
1339.12 835.062 li
1337.78 832.06 li
1338.13 831.347 li
cp
1336.16 828.367 mo
1337.89 827.445 li
1336.27 831.501 li
1335.27 831.55 li
1336.16 828.367 li
cp
1334.93 826.757 mo
1333 825.978 li
1335.4 818.594 li
1336.31 820.612 li
1334.93 826.757 li
cp
1335.02 834.355 mo
1334.92 834.811 li
1334.8 834.775 1334.67 834.758 1334.54 834.786 cv
1334.38 834.856 li
1334.34 834.795 li
1335.02 834.355 li
cp
1333.55 831.883 mo
1331.9 832.903 li
1332.67 827.536 li
1334.55 828.297 li
1333.55 831.883 li
cp
1331.18 835.253 mo
1332.82 835.323 li
1333.79 836.87 li
1332.23 837.043 li
1332.05 837.062 1331.9 837.15 1331.78 837.266 cv
1331.12 835.586 li
1331.01 835.413 li
1331.18 835.253 li
cp
1327.59 833.865 mo
1327.72 833.57 1327.71 833.228 1327.47 832.993 cv
1327.27 832.809 1327.02 832.786 1326.77 832.838 cv
1326.75 832.82 li
1325.71 822.692 li
1331.19 826.781 li
1330.15 834.066 li
1328.35 835.728 li
1327.59 833.865 li
cp
1329.81 845.743 mo
1325.68 836.175 li
1326.47 835.272 li
1330.47 845.122 li
1329.81 845.743 li
cp
1323.86 838.431 mo
1324.56 837.547 li
1328.59 846.88 li
1328.08 847.355 li
1323.86 838.431 li
cp
1320.66 860.827 mo
1320.68 860.765 li
1320.7 860.738 li
1322.45 855.337 li
1325.85 857.284 li
1327.29 874.087 li
1317.04 868.576 li
1320.66 860.827 li
cp
1313.11 868.521 mo
1316.68 860.884 li
1318.78 861.142 li
1314.98 869.273 li
1313.11 868.521 li
cp
1306.95 878.968 mo
1308.52 880.219 li
1303.12 887.609 li
1301.88 885.904 li
1306.95 878.968 li
cp
1300.28 874.524 mo
1305.68 878.049 li
1300.73 884.812 li
1295.49 881.05 li
1300.28 874.524 li
cp
1287.71 876.052 mo
1289.7 871.772 li
1291.68 869.084 li
1298.96 873.675 li
1294.19 880.169 li
1287.71 876.052 li
cp
1288.48 886.475 mo
1284.48 883.916 li
1285.36 881.123 li
1287.05 877.49 li
1293.18 881.384 li
1288.48 886.475 li
cp
1288.61 888.484 mo
1293.65 892.413 li
1289.47 895.646 li
1284.57 891.581 li
1288.61 888.484 li
cp
1282.57 889.997 mo
1283.99 885.468 li
1287.25 887.55 li
1283.27 890.598 li
1282.55 890.134 li
1282.57 889.997 li
cp
1281.3 881.228 mo
1283.6 881.502 li
1281.2 889.098 li
1278.77 889.311 li
1281.3 881.228 li
cp
1279.12 866.25 mo
1284.84 869.657 li
1280.39 879.279 li
1274.57 876.108 li
1279.12 866.25 li
cp
1270.28 860.685 mo
1277.77 865.425 li
1273.22 875.299 li
1265.75 870.53 li
1270.28 860.685 li
cp
1257.02 864.948 mo
1261.51 855.136 li
1268.94 859.837 li
1264.42 869.676 li
1257.02 864.948 li
cp
1228.03 868.658 mo
1250.61 885.308 li
1247.68 899.313 li
1224.98 882.034 li
1228.03 868.658 li
cp
1204.6 851.386 mo
1226.65 867.641 li
1223.61 880.989 li
1201.46 864.13 li
1204.6 851.386 li
cp
1181.71 834.505 mo
1203.23 850.376 li
1200.1 863.092 li
1178.49 846.644 li
1181.71 834.505 li
cp
1159.32 818.005 mo
1180.35 833.504 li
1177.14 845.615 li
1156.05 829.56 li
1159.32 818.005 li
cp
1137.43 801.868 mo
1157.97 817.01 li
1154.71 828.537 li
1134.12 812.862 li
1137.43 801.868 li
cp
1116.02 786.082 mo
1136.09 800.879 li
1132.78 811.846 li
1112.67 796.539 li
1116.02 786.082 li
cp
1107.12 766.164 mo
1120.1 774.355 li
1115.31 783.665 li
1100.85 774.201 li
1107.12 766.164 li
cp
1109.68 760.28 mo
1109.73 760.214 li
1109.81 760.244 li
1109.9 760.283 1110.01 760.302 1110.1 760.302 cv
1110.41 760.302 1110.71 760.118 1110.83 759.814 cv
1111 759.413 1110.8 758.954 1110.4 758.789 cv
1071.04 742.668 li
1072.62 734.054 li
1132.34 760.54 li
1131.66 763.803 li
1131.57 764.227 1131.84 764.643 1132.26 764.732 cv
1132.43 764.749 li
1132.79 764.749 1133.12 764.494 1133.19 764.124 cv
1133.81 761.175 li
1186.28 783.297 li
1186.01 784.464 li
1185.91 784.887 1186.17 785.309 1186.59 785.406 cv
1186.77 785.427 li
1187.13 785.427 1187.45 785.181 1187.53 784.818 cv
1187.75 783.881 li
1210.19 792.358 li
1201.58 799.549 li
1186.45 789.186 li
1190.11 786.182 li
1190.45 785.907 1190.49 785.412 1190.22 785.078 cv
1189.94 784.741 1189.45 784.693 1189.11 784.97 cv
1185.1 788.262 li
1169.92 777.861 li
1169.91 777.715 1169.86 777.571 1169.77 777.448 cv
1169.56 777.192 1169.23 777.1 1168.93 777.186 cv
1168.45 776.854 li
1168.09 776.61 1167.61 776.699 1167.36 777.057 cv
1167.11 777.415 1167.21 777.904 1167.56 778.149 cv
1167.8 778.314 li
1161.31 787.049 li
1145.93 776.149 li
1150.45 771.126 li
1150.74 770.803 1150.72 770.307 1150.39 770.017 cv
1150.07 769.727 1149.58 769.754 1149.28 770.075 cv
1144.64 775.234 li
1129.56 764.539 li
1130.62 763.567 li
1130.93 763.274 1130.95 762.777 1130.66 762.458 cv
1130.37 762.14 1129.87 762.118 1129.55 762.414 cv
1128.22 763.641 li
1120.81 759.174 li
1120.44 758.951 1119.96 759.069 1119.73 759.441 cv
1119.51 759.812 1119.63 760.296 1120 760.52 cv
1127.16 764.84 li
1120.94 773.027 li
1108.25 765.019 li
1115.49 758.673 li
1115.82 758.386 1115.85 757.89 1115.57 757.564 cv
1115.28 757.238 1114.78 757.206 1114.46 757.49 cv
1106.63 764.348 li
1104.27 764.446 li
1109.68 760.28 li
cp
1070.89 744.304 mo
1108.07 759.534 li
1102.48 763.847 li
1070.56 751.676 li
1070.89 744.304 li
cp
1069.56 742.051 mo
1003.16 714.085 li
1004.81 703.466 li
1071.14 733.396 li
1069.56 742.051 li
cp
1069.03 752.769 mo
1069.82 758.642 li
1004.5 734.053 li
1003.19 726.691 li
1069.03 752.769 li
cp
1003.06 715.749 mo
1069.35 743.666 li
1069.01 751.072 li
1002.97 724.911 li
1003.06 715.749 li
cp
1001.67 713.428 mo
936.302 683.843 li
937.891 671.497 li
1003.32 702.782 li
1001.67 713.428 li
cp
936.832 698.11 mo
1001.48 725.996 li
1002.78 733.356 li
938.721 706.78 li
936.832 698.11 li
cp
936.263 685.55 mo
1001.5 715.075 li
1001.4 724.254 li
936.513 696.262 li
936.263 685.55 li
cp
877.867 668.869 mo
935.053 697.319 li
936.93 705.936 li
880.278 678.43 li
877.867 668.869 li
cp
822.89 638.174 mo
876.008 667.924 li
878.4 677.411 li
825.735 648.253 li
822.89 638.174 li
cp
769.175 605.557 mo
820.947 637.073 li
823.77 647.073 li
772.351 615.799 li
769.175 605.557 li
cp
721.425 575.383 mo
767.144 604.315 li
770.304 614.506 li
724.846 585.635 li
721.425 575.383 li
cp
719.324 574.053 mo
722.743 584.3 li
686.88 561.524 li
683.256 551.229 li
719.324 574.053 li
cp
680.721 536.264 mo
717.433 559.386 li
718.997 571.987 li
682.492 548.886 li
680.721 536.264 li
cp
652.214 518.314 mo
678.98 535.168 li
680.75 547.784 li
654.137 530.943 li
652.214 518.314 li
cp
634.041 506.87 mo
650.456 517.207 li
652.379 529.831 li
636.063 519.503 li
634.041 506.87 li
cp
602.364 486.267 mo
632.272 505.75 li
634.287 518.343 li
604.525 498.773 li
602.364 486.267 li
cp
537.148 443.259 mo
600.566 485.094 li
602.723 497.574 li
539.57 455.447 li
537.148 443.259 li
cp
470.27 399.04 mo
535.305 442.043 li
537.723 454.213 li
472.92 410.871 li
470.27 399.04 li
cp
425.75 369.602 mo
468.382 397.791 li
471.027 409.605 li
428.534 381.184 li
425.75 369.602 li
cp
391.911 347.225 mo
423.828 368.331 li
426.608 379.896 li
394.785 358.615 li
391.911 347.225 li
cp
359.541 325.824 mo
389.966 345.939 li
392.835 357.311 li
362.494 337.018 li
359.541 325.824 li
cp
328.548 305.33 mo
357.573 324.522 li
360.52 335.698 li
331.57 316.332 li
328.548 305.33 li
cp
298.842 285.687 mo
326.557 304.013 li
329.573 314.997 li
301.92 296.504 li
298.842 285.687 li
cp
270.347 266.844 mo
296.829 284.356 li
299.902 295.154 li
273.475 277.479 li
270.347 266.844 li
cp
242.988 248.754 mo
268.313 265.5 li
271.436 276.115 li
246.161 259.208 li
242.988 248.754 li
cp
216.702 231.374 mo
240.935 247.396 li
244.101 257.831 li
219.907 241.65 li
216.702 231.374 li
cp
191.426 214.66 mo
214.629 230.003 li
217.828 240.26 li
194.659 224.765 li
191.426 214.66 li
cp
167.102 198.577 mo
189.334 213.276 li
192.561 223.361 li
170.357 208.51 li
167.102 198.577 li
cp
164.991 197.182 mo
168.24 207.094 li
146.949 192.856 li
143.677 183.087 li
164.991 197.182 li
cp
163.15 183.989 mo
164.643 195.068 li
142.936 180.713 li
141.393 169.806 li
163.15 183.989 li
cp
141.173 167.788 mo
141.575 156.287 li
163.627 170.418 li
163.152 182.116 li
141.173 167.788 li
cp
139.644 168.661 mo
141.181 179.519 li
122.78 166.93 li
121.216 156.303 li
139.644 168.661 li
cp
120.979 154.253 mo
121.315 143.033 li
140.037 155.295 li
139.637 166.765 li
120.979 154.253 li
cp
119.451 155.104 mo
120.997 165.604 li
108.053 155.848 li
106.516 145.688 li
119.451 155.104 li
cp
106.539 132.778 mo
119.775 142.01 li
119.44 153.153 li
106.254 143.554 li
106.539 132.778 li
cp
97.9476 112.174 mo
107.499 119.097 li
105.279 129.895 li
95.8523 122.468 li
97.9476 112.174 li
cp
100.93 99.5706 mo
97.0846 109.515 li
90.0092 103.583 li
93.6187 94.3368 li
100.93 99.5706 li
cp
107.159 88.769 mo
101.641 98.1484 li
94.3038 92.8964 li
99.5204 84.3135 li
107.159 88.769 li
cp
115.037 79.2822 mo
108.063 87.4784 li
100.466 83.047 li
107.036 75.5084 li
115.037 79.2822 li
cp
116.195 78.0912 mo
108.301 74.3675 li
115.907 68.2117 li
124.339 71.6438 li
116.195 78.0912 li
cp
136.402 76.5964 mo
127.737 82.9841 li
117.828 78.8015 li
126.009 72.3251 li
136.402 76.5964 li
cp
137.972 75.5439 mo
127.721 71.3312 li
136.613 66.5798 li
147.409 71.1576 li
137.972 75.5439 li
cp
163.595 78.9885 mo
153.697 82.9557 li
139.841 76.4064 li
149.333 71.9946 li
163.595 78.9885 li
cp
165.594 78.2183 mo
151.436 71.2755 li
161.254 68.1137 li
175.747 75.1177 li
165.594 78.2183 li
cp
186.864 89.8569 mo
167.54 79.2676 li
177.81 76.1312 li
197.33 86.668 li
186.864 89.8569 li
cp
221.885 100.378 mo
211.24 103.703 li
188.753 90.9245 li
199.27 87.7201 li
221.885 100.378 li
cp
223.977 99.7489 mo
201.52 87.1799 li
211.899 84.7936 li
234.474 97.2592 li
223.977 99.7489 li
cp
249.413 113.985 mo
226.002 100.882 li
236.518 98.3881 li
260.049 111.381 li
249.413 113.985 li
cp
275.843 128.781 mo
251.423 115.11 li
262.079 112.501 li
286.621 126.051 li
275.843 128.781 li
cp
303.328 144.166 mo
277.837 129.897 li
288.634 127.162 li
314.247 141.306 li
303.328 144.166 li
cp
331.933 160.177 mo
305.305 145.272 li
316.242 142.408 li
342.994 157.178 li
331.933 160.177 li
cp
361.726 176.853 mo
333.891 161.273 li
344.97 158.269 li
372.925 173.705 li
361.726 176.853 li
cp
392.782 194.237 mo
363.666 177.939 li
374.883 174.786 li
404.123 190.928 li
392.782 194.237 li
cp
425.186 212.375 mo
394.703 195.312 li
406.062 191.998 li
436.662 208.896 li
425.186 212.375 li
cp
459.024 231.315 mo
427.088 213.44 li
438.581 209.956 li
470.637 227.655 li
459.024 231.315 li
cp
494.395 251.116 mo
460.905 232.368 li
472.535 228.703 li
506.141 247.259 li
494.395 251.116 li
cp
529.97 260.431 mo
529.95 260.447 li
529.93 260.453 li
524.482 263.4 li
524.476 263.405 li
524.465 263.409 li
520.916 265.436 li
496.294 252.146 li
508.026 248.294 li
530.41 260.226 li
529.97 260.431 li
cp
542.393 275.959 mo
522.331 268.053 li
530.473 261.995 li
544.77 265.534 li
542.393 275.959 li
cp
547.915 288.242 mo
531.638 283.613 li
522.727 269.897 li
542.395 277.649 li
547.915 288.242 li
cp
586.964 312.658 mo
550.055 288.949 li
544.852 278.965 li
594.321 306.167 li
586.964 312.658 li
cp
650.47 338.878 mo
641.851 346.077 li
588.358 313.523 li
595.773 306.981 li
650.47 338.878 li
cp
659.958 332.154 mo
651.795 337.833 li
596.97 305.861 li
603 300.038 li
659.958 332.154 li
cp
605.419 297.164 mo
663.248 329.399 li
661.328 331.124 li
604.069 298.838 li
605.419 297.164 li
cp
603.944 288.309 mo
604.206 292.474 li
555.861 262.703 li
555.537 258.686 li
603.944 288.309 li
cp
602.955 272.538 mo
603.823 286.394 li
555.381 256.749 li
554.291 243.245 li
602.955 272.538 li
cp
661.572 274.299 mo
661.669 276.673 li
602.835 245.539 li
602.693 243.277 li
661.572 274.299 li
cp
661.492 272.342 mo
661.498 272.486 li
602.579 241.442 li
602.574 241.362 li
661.492 272.342 li
cp
662.243 270.961 mo
603.362 240.002 li
605.432 238.866 li
664.387 269.732 li
662.243 270.961 li
cp
691.754 285.335 mo
689.551 286.624 li
663.836 271.858 li
666.02 270.606 li
691.754 285.335 li
cp
693.37 284.45 mo
667.788 269.808 li
677.247 265.819 li
702.837 280.341 li
693.37 284.45 li
cp
701.437 287.264 mo
695.499 285.239 li
704.483 281.341 li
709.717 285.372 li
701.437 287.264 li
cp
701.516 290.031 mo
701.985 288.75 li
711.267 286.63 li
712.283 287.653 li
701.516 290.031 li
cp
701.098 292.111 mo
701.088 291.735 li
713.081 289.086 li
713.089 289.456 li
701.098 292.111 li
cp
701.211 296.337 mo
701.141 293.711 li
713.123 291.058 li
713.179 293.67 li
701.211 296.337 li
cp
701.461 305.76 mo
701.254 297.938 li
713.213 295.273 li
713.38 303.073 li
701.461 305.76 li
cp
701.923 323.199 mo
701.504 307.361 li
713.414 304.676 li
713.751 320.471 li
701.923 323.199 li
cp
701.966 324.801 mo
713.785 322.074 li
714.098 336.685 li
702.355 339.451 li
701.966 324.801 li
cp
707.636 376.082 mo
690.861 363.771 li
702.601 355.952 li
721.217 370.3 li
707.636 376.082 li
cp
740.222 385.722 mo
726.132 390.814 li
709.052 377.188 li
722.631 371.406 li
740.222 385.722 li
cp
755.112 379.383 mo
741.921 385.078 li
724.245 370.693 li
737.334 364.836 li
755.112 379.383 li
cp
756.709 378.661 mo
738.919 364.105 li
750.595 358.668 li
767.878 373.008 li
756.709 378.661 li
cp
768.809 390.834 mo
757.923 379.806 li
769.151 374.124 li
780.367 385.177 li
768.809 390.834 li
cp
776.801 400.639 mo
769.877 392.061 li
781.508 386.368 li
788.987 395.054 li
776.801 400.639 li
cp
783.804 409.313 mo
777.82 401.9 li
790.043 396.297 li
796.199 403.708 li
783.804 409.313 li
cp
789.242 416.049 mo
784.823 410.576 li
797.234 404.964 li
801.636 410.389 li
789.242 416.049 li
cp
792.485 420.066 mo
790.261 417.311 li
802.658 411.65 li
804.872 414.378 li
792.485 420.066 li
cp
806.874 429.872 mo
793.861 421.162 li
806.05 415.565 li
819.018 424.196 li
806.874 429.872 li
cp
847.278 454.43 mo
808.468 430.862 li
820.569 425.205 li
859.258 448.563 li
847.278 454.43 li
cp
901.125 487.95 mo
848.857 455.407 li
860.851 449.533 li
912.75 481.976 li
901.125 487.95 li
cp
953.784 523.442 mo
902.628 488.943 li
914.279 482.956 li
964.655 517.745 li
953.784 523.442 li
cp
1017.48 557.082 mo
1007.79 562.275 li
955.223 524.461 li
966.096 518.762 li
1017.48 557.082 li
cp
1019.08 556.315 mo
967.786 518.062 li
977.814 514.237 li
1027.84 553.362 li
1019.08 556.315 li
cp
1075.97 600.737 mo
1020.58 557.47 li
1029.32 554.524 li
1083.18 598.215 li
1075.97 600.737 li
cp
1132.07 646.614 mo
1077.4 601.899 li
1084.61 599.382 li
1137.7 644.376 li
1132.07 646.614 li
cp
1181.57 689.554 mo
1133.42 647.768 li
1139.04 645.533 li
1185.71 687.708 li
1181.57 689.554 li
cp
1182.83 690.711 mo
1186.96 688.869 li
1199.33 701.05 li
1198.8 701.838 li
1198.8 701.838 li
1197.16 704.149 li
1182.83 690.711 li
cp
1181.35 691.473 mo
1196.25 705.442 li
1193.37 709.505 li
1176.55 694.658 li
1181.35 691.473 li
cp
1125.44 652.447 mo
1131.85 648.486 li
1180.14 690.391 li
1175.31 693.593 li
1125.44 652.447 li
cp
1168.8 699.073 mo
1117.22 658.972 li
1124.09 653.37 li
1174.04 694.581 li
1168.8 699.073 li
cp
1212.99 737.446 mo
1209.21 741.53 li
1163.5 706.788 li
1168.89 701.157 li
1212.99 737.446 li
cp
1227.77 728.856 mo
1222.1 738.391 li
1205.71 727.891 li
1212.05 718.16 li
1227.77 728.856 li
cp
1234.5 716.97 mo
1228.56 727.493 li
1212.89 716.834 li
1219.42 706.275 li
1234.5 716.97 li
cp
1235.22 715.559 mo
1220.21 704.907 li
1227.16 691.51 li
1241.92 701.513 li
1235.22 715.559 li
cp
1258.36 712.508 mo
1251.99 727.234 li
1236.53 716.476 li
1243.24 702.398 li
1258.36 712.508 li
cp
1265.72 694.955 mo
1258.99 711.035 li
1243.91 700.96 li
1250.94 685.707 li
1265.72 694.955 li
cp
1272.78 679.171 mo
1266.36 693.499 li
1251.62 684.28 li
1258.45 670.45 li
1272.78 679.171 li
cp
1279.77 664.146 mo
1273.44 677.734 li
1259.16 669.042 li
1265.95 655.826 li
1279.77 664.146 li
cp
1280.43 662.713 mo
1266.67 654.426 li
1273.6 640.952 li
1286.9 648.784 li
1280.43 662.713 li
cp
1295.55 671.835 mo
1281.79 663.528 li
1288.26 649.587 li
1301.54 657.46 li
1295.55 671.835 li
cp
1310.48 680.886 mo
1296.91 672.657 li
1302.9 658.274 li
1315.96 666.105 li
1310.48 680.886 li
cp
1325.34 689.909 mo
1311.85 681.716 li
1317.33 666.927 li
1330.15 674.64 li
1325.34 689.909 li
cp
1340.24 698.953 mo
1326.72 690.747 li
1331.53 675.472 li
1344.08 682.993 li
1340.24 698.953 li
cp
1352.28 706.365 mo
1341.65 699.813 li
1345.48 683.883 li
1355.3 690.299 li
1352.28 706.365 li
cp
1358.44 710.408 mo
1353.71 707.267 li
1356.68 691.454 li
1361.3 695.64 li
1358.44 710.408 li
cp
1356.16 727.697 mo
1359.57 712.67 li
1361.47 713.14 li
1357.95 727.877 li
1356.16 727.697 li
cp
1353.56 745.824 mo
1351.81 745.647 li
1355.79 729.239 li
1357.57 729.418 li
1353.56 745.824 li
cp
1352.47 763.886 mo
1350.46 765.123 li
1354.85 747.177 li
1356.89 745.937 li
1352.47 763.886 li
cp
1355.08 772.096 mo
1352.96 770.875 li
1354.8 765.676 li
1359.93 768.614 li
1355.08 772.096 li
cp
1363.82 777.128 mo
1356.58 772.957 li
1361.43 769.472 li
1368.66 773.612 li
1363.82 777.128 li
cp
1363.3 788.994 mo
1358.03 785.456 li
1363.97 779.104 li
1369.08 782.776 li
1363.3 788.994 li
cp
1364.43 790.087 mo
1370.02 784.072 li
1370.93 786.16 li
1365.67 791.833 li
1364.43 790.087 li
cp
1357.58 799.321 mo
1363.41 791.362 li
1364.63 793.067 li
1359.12 800.588 li
1357.58 799.321 li
cp
1351.38 809.71 mo
1356.72 800.646 li
1358.24 801.902 li
1353.19 810.471 li
1351.38 809.71 li
cp
1350.63 811.101 mo
1352.47 811.867 li
1348.46 820.404 li
1346.4 820.139 li
1350.63 811.101 li
cp
1342.52 818.501 mo
1342.53 816.287 li
1342.53 816.285 li
1342.53 816.282 li
1342.53 816.268 li
1342.53 816.251 li
1342.31 810.665 li
1342.29 810.569 li
1342.26 810.426 li
1342.26 810.403 li
1342.22 810.32 li
1343.65 807.267 li
1349.22 810.413 li
1344.86 819.709 li
1342.52 818.501 li
cp
1342.48 826.599 mo
1341.23 824.93 li
1342.42 822.43 li
1342.43 822.415 li
1342.45 822.308 li
1342.49 822.172 li
1342.5 822.111 li
1342.5 822.097 li
1342.51 820.264 li
1344.27 821.172 li
1342.48 826.599 li
cp
1343.44 833.048 mo
1343.21 833.26 li
1340.86 829.115 li
1343.44 833.048 li
cp
1340.94 819.769 mo
1340.93 821.863 li
1340.62 822.348 li
1340.94 819.769 li
cp
1340.77 811.425 mo
1340.95 815.967 li
1340.93 815.99 li
1340.11 811.374 li
1340.77 811.425 li
cp
1339.56 807.9 mo
1340.33 809.815 li
1339.84 809.777 li
1339.56 807.9 li
cp
1331.5 807.246 mo
1337.41 804.086 li
1338.33 810.333 li
1335.37 814.851 li
1331.5 807.246 li
cp
1330.53 808.808 mo
1334.44 816.481 li
1331.62 825.146 li
1325.71 820.725 li
1330.53 808.808 li
cp
1324.38 819.813 mo
1310.38 810.706 li
1313.96 798.304 li
1329.46 807.255 li
1324.38 819.813 li
cp
1319.72 851.131 mo
1320.39 846.163 li
1322.87 845.564 li
1322.13 850.924 li
1319.72 851.131 li
cp
1319.4 852.735 mo
1321.71 852.536 li
1319.4 859.636 li
1317.25 859.372 li
1319.4 852.735 li
cp
1310.1 855.893 mo
1312.12 849.616 li
1317.85 852.404 li
1315.75 858.901 li
1310.1 855.893 li
cp
1306.16 864.556 mo
1309.52 857.361 li
1315.18 860.378 li
1311.7 867.823 li
1306.16 864.556 li
cp
1305.43 865.945 mo
1310.97 869.216 li
1306.54 876.737 li
1301.14 873.212 li
1305.43 865.945 li
cp
1296.79 860.563 mo
1304.09 865.129 li
1299.82 872.362 li
1292.54 867.772 li
1296.79 860.563 li
cp
1286.99 868.956 mo
1292.6 859.453 li
1294.27 860.784 li
1288.98 869.753 li
1286.99 868.956 li
cp
1286.25 870.351 mo
1288.25 871.154 li
1284.16 879.986 li
1281.92 879.719 li
1286.25 870.351 li
cp
1285.73 854.887 mo
1291.32 858.525 li
1285.58 868.265 li
1279.85 864.854 li
1285.73 854.887 li
cp
1276.88 849.327 mo
1284.4 854.041 li
1278.51 864.032 li
1271 859.284 li
1276.88 849.327 li
cp
1268.08 843.821 mo
1275.54 848.493 li
1269.68 858.444 li
1262.24 853.734 li
1268.08 843.821 li
cp
1253.53 848.228 mo
1259.36 838.354 li
1266.75 842.987 li
1260.91 852.894 li
1253.53 848.228 li
cp
1252.81 849.63 mo
1260.17 854.288 li
1255.68 864.095 li
1248.35 859.41 li
1252.81 849.63 li
cp
1244.17 844.161 mo
1251.47 848.782 li
1247.01 858.556 li
1239.74 853.909 li
1244.17 844.161 li
cp
1238.15 840.124 mo
1242.84 843.294 li
1238.44 852.989 li
1233.88 849.561 li
1238.15 840.124 li
cp
1234.47 841.24 mo
1234.04 842.196 li
1233.2 840.203 li
1234.47 841.24 li
cp
1232.15 837.324 mo
1235.81 824.994 li
1241.06 829.157 li
1236.29 837.232 li
1236.28 837.27 li
1236.25 837.307 li
1235.14 839.76 li
1232.15 837.324 li
cp
1214.83 826.929 mo
1230.61 838.116 li
1233.16 844.144 li
1231.76 847.238 li
1231.74 847.293 li
1231.72 847.341 li
1230.41 851.797 li
1230.38 851.913 1230.38 852.028 1230.39 852.139 cv
1220.73 845.15 li
1214.83 826.929 li
cp
1200.74 832.632 mo
1219.4 846.126 li
1225.97 865.185 li
1204.82 849.594 li
1200.74 832.632 li
cp
1198.79 831.217 mo
1202.85 848.146 li
1181.98 832.759 li
1180.29 817.84 li
1198.79 831.217 li
cp
1180.08 815.746 mo
1179.35 801.768 li
1195.06 812.908 li
1198.31 828.936 li
1180.08 815.746 li
cp
1160.26 803.346 mo
1178.57 816.595 li
1180.26 831.487 li
1159.68 816.316 li
1160.26 803.346 li
cp
1177.72 800.609 mo
1178.44 814.564 li
1160.38 801.498 li
1162.08 789.518 li
1177.72 800.609 li
cp
1178.25 799.062 mo
1162.59 787.957 li
1169.1 779.203 li
1184.09 789.471 li
1178.25 799.062 li
cp
1195.47 811.275 mo
1179.53 799.973 li
1185.39 790.36 li
1200.63 800.797 li
1195.47 811.275 li
cp
1218.58 843.59 mo
1200.19 830.296 li
1196.93 814.237 li
1212.69 825.407 li
1218.58 843.59 li
cp
1217.42 812.298 mo
1212.99 823.696 li
1196.77 812.195 li
1201.94 801.694 li
1217.42 812.298 li
cp
1211.8 792.966 mo
1215.07 794.2 li
1215.07 794.448 1215.18 794.69 1215.41 794.837 cv
1227.78 802.974 li
1218.32 811.014 li
1202.93 800.47 li
1211.6 793.226 li
1211.69 793.152 1211.75 793.063 1211.8 792.966 cv
cp
1189.88 777.207 mo
1233.98 796.336 li
1233.06 798.974 li
1232.81 798.897 1232.54 798.931 1232.32 799.112 cv
1229.03 801.913 li
1220.31 796.181 li
1226.17 798.394 li
1226.26 798.428 1226.35 798.445 1226.44 798.445 cv
1226.76 798.445 1227.06 798.251 1227.18 797.936 cv
1227.33 797.531 1227.13 797.077 1226.72 796.925 cv
1188.17 782.362 li
1189.88 777.207 li
cp
1136.51 752.284 mo
1188.44 776.56 li
1186.71 781.776 li
1134.2 759.634 li
1136.51 752.284 li
cp
1075.78 722.995 mo
1135.08 751.605 li
1132.75 759.006 li
1072.97 732.494 li
1075.78 722.995 li
cp
1008.33 690.237 mo
1074.35 722.302 li
1071.53 731.846 li
1005.13 701.886 li
1008.33 690.237 li
cp
941.602 656.394 mo
1006.89 689.528 li
1003.68 701.212 li
938.17 669.889 li
941.602 656.394 li
cp
878.483 638.162 mo
881.97 623.404 li
940.173 655.643 li
936.736 669.157 li
878.483 638.162 li
cp
822.727 605.91 mo
826.12 590.442 li
880.547 622.597 li
877.058 637.362 li
822.727 605.91 li
cp
768.213 572.652 mo
771.392 557.001 li
824.699 589.593 li
821.306 605.058 li
768.213 572.652 li
cp
766.789 571.769 mo
719.772 542.337 li
722.716 526.754 li
769.967 556.124 li
766.789 571.769 li
cp
765.568 589.698 mo
766.862 602.277 li
720.715 573.074 li
719.15 560.467 li
765.568 589.698 li
cp
719.624 544.097 mo
766.521 573.454 li
765.611 587.868 li
718.972 558.498 li
719.624 544.097 li
cp
681.078 518.117 mo
683.84 502.588 li
721.284 525.865 li
718.341 541.442 li
681.078 518.117 li
cp
680.955 519.893 mo
718.095 543.14 li
717.443 557.536 li
680.507 534.273 li
680.955 519.893 li
cp
652.38 500.155 mo
655.007 484.666 li
682.404 501.695 li
679.643 517.219 li
652.38 500.155 li
cp
652.274 501.941 mo
679.413 518.927 li
678.965 533.302 li
651.973 516.306 li
652.274 501.941 li
cp
634.088 488.702 mo
636.63 473.243 li
653.566 483.771 li
650.94 499.253 li
634.088 488.702 li
cp
633.993 490.496 mo
650.723 500.971 li
650.422 515.33 li
633.784 504.851 li
633.993 490.496 li
cp
602.193 468.18 mo
604.566 452.903 li
635.186 472.34 li
632.647 487.782 li
602.193 468.18 li
cp
602.118 470.001 mo
632.436 489.515 li
632.227 503.845 li
602.07 484.2 li
602.118 470.001 li
cp
600.551 468.99 mo
600.502 483.169 li
536.789 441.14 li
536.527 427.341 li
600.551 468.99 li
cp
536.559 425.488 mo
538.589 410.693 li
603.12 451.982 li
600.748 467.244 li
536.559 425.488 li
cp
359.388 293.996 mo
362.829 280.378 li
394.281 300.152 li
390.685 314.051 li
359.388 293.996 li
cp
328.102 273.948 mo
331.39 260.612 li
361.43 279.499 li
357.993 293.102 li
328.102 273.948 li
cp
298.125 254.74 mo
301.273 241.676 li
329.989 259.731 li
326.704 273.052 li
298.125 254.74 li
cp
269.382 236.319 mo
272.395 223.519 li
299.869 240.794 li
296.725 253.842 li
269.382 236.319 li
cp
295.408 270.187 mo
296.566 282.297 li
269.729 264.551 li
268.485 252.642 li
295.408 270.187 li
cp
269.185 238.059 mo
296.412 255.508 li
295.468 268.353 li
268.346 250.678 li
269.185 238.059 li
cp
267.979 235.42 mo
241.795 218.641 li
244.683 206.096 li
270.989 222.635 li
267.979 235.42 li
cp
266.79 251.537 mo
268.032 263.429 li
242.344 246.444 li
241.027 234.745 li
266.79 251.537 li
cp
241.609 220.389 mo
267.676 237.091 li
266.838 249.694 li
240.872 232.769 li
241.609 220.389 li
cp
240.39 217.741 mo
215.294 201.66 li
218.067 189.363 li
243.276 205.211 li
240.39 217.741 li
cp
239.322 233.633 mo
240.636 245.315 li
216.032 229.047 li
214.649 217.554 li
239.322 233.633 li
cp
215.12 203.415 mo
240.094 219.418 li
239.357 231.782 li
214.477 215.567 li
215.12 203.415 li
cp
213.888 200.758 mo
189.821 185.335 li
192.483 173.275 li
216.657 188.476 li
213.888 200.758 li
cp
212.932 216.435 mo
214.313 227.91 li
190.732 212.316 li
189.29 201.025 li
212.932 216.435 li
cp
189.657 187.097 mo
213.599 202.44 li
212.956 214.576 li
189.101 199.027 li
189.657 187.097 li
cp
188.412 184.432 mo
165.313 169.632 li
167.871 157.801 li
191.07 172.387 li
188.412 184.432 li
cp
187.562 199.899 mo
189.002 211.173 li
166.383 196.218 li
164.888 185.122 li
187.562 199.899 li
cp
165.159 171.4 mo
188.13 186.118 li
187.575 198.033 li
164.684 183.114 li
165.159 171.4 li
cp
144.179 142.906 mo
166.457 156.912 li
163.902 168.728 li
141.719 154.512 li
144.179 142.906 li
cp
123.807 129.928 mo
142.763 142.012 li
140.307 153.595 li
121.451 141.245 li
123.807 129.928 li
cp
108.906 120.058 mo
122.393 129.014 li
120.046 140.283 li
106.666 130.951 li
108.906 120.058 li
cp
112.047 106.731 mo
107.997 117.518 li
98.3721 110.542 li
102.268 100.467 li
112.047 106.731 li
cp
118.432 94.666 mo
112.715 105.293 li
102.943 99.033 li
108.535 89.5285 li
118.432 94.666 li
cp
119.29 93.3408 mo
109.474 88.2452 li
116.526 79.9574 li
126.582 84.2024 li
119.29 93.3408 li
cp
141.886 91.3829 mo
134.361 101.398 li
120.704 94.0885 li
128.069 84.8569 li
141.886 91.3829 li
cp
143.02 90.1818 mo
129.367 83.7334 li
138.08 77.3108 li
152.102 83.9383 li
143.02 90.1818 li
cp
173.164 95.4428 mo
163.815 101.771 li
144.579 91.0159 li
153.717 84.7341 li
173.164 95.4428 li
cp
174.726 94.509 mo
155.504 83.9241 li
165.474 79.9279 li
184.914 90.5808 li
174.726 94.509 li
cp
198.977 108.498 mo
176.484 95.5157 li
186.712 91.5723 li
209.33 104.425 li
198.977 108.498 li
cp
234.657 118.815 mo
224.155 123.034 li
200.716 109.502 li
211.087 105.423 li
234.657 118.815 li
cp
236.551 118.084 mo
213.109 104.765 li
223.772 101.434 li
247.341 114.625 li
236.551 118.084 li
cp
262.855 133.031 mo
238.407 119.138 li
249.214 115.673 li
273.79 129.431 li
262.855 133.031 li
cp
290.214 148.574 mo
264.699 134.078 li
275.651 130.473 li
301.295 144.827 li
290.214 148.574 li
cp
318.692 164.757 mo
292.044 149.614 li
303.143 145.862 li
329.922 160.851 li
318.692 164.757 li
cp
348.358 181.613 mo
320.506 165.788 li
331.753 161.876 li
359.736 177.539 li
348.358 181.613 li
cp
379.289 199.187 mo
350.16 182.636 li
361.554 178.556 li
390.814 194.935 li
379.289 199.187 li
cp
411.57 217.529 mo
381.077 200.203 li
392.618 195.945 li
423.243 213.087 li
411.57 217.529 li
cp
445.289 236.687 mo
413.342 218.536 li
425.031 214.088 li
457.106 232.041 li
445.289 236.687 li
cp
480.544 256.719 mo
447.046 237.685 li
458.878 233.033 li
492.505 251.857 li
480.544 256.719 li
cp
513.475 269.686 mo
513.463 269.696 li
513.448 269.702 li
513.426 269.723 li
508.243 271.885 li
482.314 257.694 li
494.265 252.836 li
519.309 266.354 li
513.475 269.686 li
cp
524.192 285.373 mo
515.074 270.819 li
520.394 269.189 li
529.896 283.814 li
524.192 285.373 li
cp
579.288 318.494 mo
575.911 321.525 li
525.665 286.599 li
530.995 285.142 li
579.288 318.494 li
cp
580.539 317.45 mo
535.5 286.345 li
549.13 290.221 li
585.654 313.684 li
580.539 317.45 li
cp
637.731 353.408 mo
581.948 318.362 li
587.08 314.584 li
640.888 347.328 li
637.731 353.408 li
cp
666.398 363.64 mo
664.459 370.654 li
639.062 354.255 li
642.224 348.165 li
666.398 363.64 li
cp
676.122 354.856 mo
667.247 362.317 li
643.248 346.955 li
651.898 339.731 li
676.122 354.856 li
cp
686.392 348.219 mo
677.452 353.835 li
653.258 338.728 li
661.461 333.022 li
686.392 348.219 li
cp
664.683 330.221 mo
689.964 345.502 li
687.82 347.249 li
662.744 331.963 li
664.683 330.221 li
cp
663.479 321.24 mo
663.658 325.616 li
605.841 293.46 li
605.575 289.233 li
663.479 321.24 li
cp
663.105 273.35 mo
663.101 273.246 li
688.784 287.994 li
688.788 288.124 li
663.105 273.35 li
cp
663.276 277.543 mo
663.181 275.207 li
688.845 289.969 li
688.918 292.349 li
663.276 277.543 li
cp
663.655 286.888 mo
663.351 279.4 li
688.975 294.195 li
689.205 301.767 li
663.655 286.888 li
cp
664.359 304.185 mo
663.731 288.75 li
689.261 303.618 li
689.738 319.197 li
664.359 304.185 li
cp
665.013 320.31 mo
664.435 306.055 li
689.795 321.056 li
690.235 335.441 li
665.013 320.31 li
cp
690.425 341.706 mo
665.266 326.527 li
665.089 322.189 li
690.292 337.308 li
690.425 341.706 li
cp
699.515 291.679 mo
699.523 291.984 li
690.385 288.935 li
690.376 288.634 li
699.515 291.679 li
cp
699.811 290.121 mo
691.448 287.335 li
693.409 286.187 li
700.381 288.564 li
699.811 290.121 li
cp
691.833 336.287 mo
691.387 321.707 li
700.392 324.749 li
700.78 339.331 li
691.833 336.287 li
cp
692.023 342.557 mo
691.884 337.964 li
700.824 341.005 li
700.945 345.598 li
692.023 342.557 li
cp
690.516 293.163 mo
690.437 290.609 li
699.567 293.656 li
699.636 296.211 li
690.516 293.163 li
cp
699.93 307.306 mo
700.348 323.075 li
691.336 320.03 li
690.853 304.262 li
699.93 307.306 li
cp
690.802 302.589 mo
690.566 294.835 li
699.681 297.881 li
699.886 305.635 li
690.802 302.589 li
cp
689.358 348.021 mo
691.482 346.291 li
701.108 349.578 li
701.664 353.675 li
689.358 348.021 li
cp
689.517 362.778 mo
678.842 354.817 li
687.942 349.1 li
701.027 355.112 li
689.517 362.778 li
cp
697.637 383.719 mo
680.864 372.027 li
689.525 364.738 li
706.232 377 li
697.637 383.719 li
cp
714.967 393.692 mo
699.068 384.593 li
707.528 377.981 li
724.261 391.33 li
714.967 393.692 li
cp
737.153 404.21 mo
721.657 404.778 li
716.049 395.037 li
725.741 392.574 li
737.153 404.21 li
cp
752.728 398.215 mo
739.144 403.997 li
727.402 392.025 li
741.588 386.898 li
752.728 398.215 li
cp
754.27 397.542 mo
743.159 386.254 li
756.425 380.526 li
767.3 391.543 li
754.27 397.542 li
cp
762.593 407.751 mo
755.343 398.778 li
768.42 392.757 li
775.351 401.342 li
762.593 407.751 li
cp
769.718 416.603 mo
763.601 409.002 li
776.36 402.593 li
782.36 410.025 li
769.718 416.603 li
cp
775.172 423.393 mo
770.722 417.852 li
783.366 411.272 li
787.802 416.766 li
775.172 423.393 li
cp
778.423 427.441 mo
776.174 424.641 li
788.808 418.012 li
791.047 420.785 li
778.423 427.441 li
cp
792.86 437.327 mo
779.746 428.519 li
792.21 421.947 li
805.281 430.696 li
792.86 437.327 li
cp
833.405 462.056 mo
794.397 438.287 li
806.781 431.675 li
845.671 455.291 li
833.405 462.056 li
cp
887.635 495.833 mo
834.937 463.006 li
847.215 456.235 li
899.57 488.832 li
887.635 495.833 li
cp
941.047 531.63 mo
889.099 496.795 li
901.059 489.78 li
952.308 524.342 li
941.047 531.63 li
cp
996.198 570.481 mo
942.442 532.598 li
953.71 525.306 li
1006.38 563.196 li
996.198 570.481 li
cp
1064.92 607.098 mo
1056.28 613.751 li
997.549 571.447 li
1007.72 564.172 li
1064.92 607.098 li
cp
1066.28 606.153 mo
1009.19 563.31 li
1018.86 558.125 li
1074.41 601.518 li
1066.28 606.153 li
cp
1067.63 607.193 mo
1075.74 602.569 li
1130.58 647.425 li
1124.15 651.399 li
1067.63 607.193 li
cp
1115.93 657.992 mo
1057.6 614.718 li
1066.22 608.084 li
1122.84 652.368 li
1115.93 657.992 li
cp
1162.23 705.842 mo
1108.97 667.138 li
1116.02 660.033 li
1167.66 700.172 li
1162.23 705.842 li
cp
1204.4 747.502 mo
1157.12 714.558 li
1162.46 707.967 li
1208.19 742.727 li
1204.4 747.502 li
cp
1247 773.849 mo
1244.84 776.622 li
1205.68 748.412 li
1209.42 743.694 li
1247 773.849 li
cp
1245.2 740.563 mo
1240.13 749.903 li
1223.43 739.239 li
1229.08 729.737 li
1245.2 740.563 li
cp
1245.93 739.164 mo
1229.87 728.375 li
1235.79 717.877 li
1251.31 728.68 li
1245.93 739.164 li
cp
1268.36 740.165 mo
1263.49 750.72 li
1247.25 740.04 li
1252.62 729.572 li
1268.36 740.165 li
cp
1274.97 723.358 mo
1268.98 738.688 li
1253.31 728.14 li
1259.69 713.385 li
1274.97 723.358 li
cp
1281.92 705.028 mo
1275.54 721.857 li
1260.32 711.918 li
1267.07 695.797 li
1281.92 705.028 li
cp
1288.49 688.736 mo
1282.51 703.542 li
1267.7 694.338 li
1274.14 679.995 li
1288.49 688.736 li
cp
1289.1 687.266 mo
1274.79 678.555 li
1281.12 664.962 li
1294.94 673.302 li
1289.1 687.266 li
cp
1304.58 696.714 mo
1290.45 688.092 li
1296.3 674.123 li
1309.92 682.385 li
1304.58 696.714 li
cp
1320.07 706.178 mo
1305.95 697.549 li
1311.29 683.215 li
1324.85 691.448 li
1320.07 706.178 li
cp
1335.75 715.756 mo
1321.45 707.021 li
1326.23 692.286 li
1339.84 700.548 li
1335.75 715.756 li
cp
1348.39 723.441 mo
1337.15 716.608 li
1341.24 701.405 li
1351.95 708.007 li
1348.39 723.441 li
cp
1349.81 724.292 mo
1353.35 708.916 li
1358.1 712.07 li
1354.67 727.165 li
1349.81 724.292 li
cp
1350.32 745.118 mo
1345.33 742.137 li
1349.42 725.887 li
1354.29 728.769 li
1350.32 745.118 li
cp
1348.64 765.941 mo
1346.92 765.764 li
1351.43 747.188 li
1353.18 747.365 li
1348.64 765.941 li
cp
1348.21 778.089 mo
1347.48 777.217 li
1349.92 767.292 li
1351.81 766.133 li
1348.21 778.089 li
cp
1350.74 776.551 mo
1352.02 773.523 li
1352.03 773.493 li
1352.04 773.478 li
1352.43 772.382 li
1353.88 773.215 li
1350.74 776.551 li
cp
1356.68 784.602 mo
1349.33 780.335 li
1355.27 774.02 li
1362.62 778.25 li
1356.68 784.602 li
cp
1350.86 795.043 mo
1357.02 786.666 li
1362.3 790.217 li
1356.3 798.407 li
1350.86 795.043 li
cp
1349.99 796.353 mo
1355.44 799.719 li
1349.96 809.023 li
1344.38 805.874 li
1349.99 796.353 li
cp
1332.91 792.187 mo
1336.95 783.152 li
1341.21 785.485 li
1338.86 792.202 li
1332.91 792.187 li
cp
1332.42 793.756 mo
1338.52 793.772 li
1337.3 802.363 li
1331.36 805.539 li
1332.42 793.756 li
cp
1317.95 784.981 mo
1321.33 773.513 li
1335.59 782.361 li
1331.32 791.89 li
1317.95 784.981 li
cp
1317.5 786.513 mo
1330.87 793.424 li
1329.78 805.622 li
1314.42 796.753 li
1317.5 786.513 li
cp
1295.93 785.156 mo
1299.48 775.326 li
1316.09 785.729 li
1313.03 795.909 li
1295.93 785.156 li
cp
1291.35 798.666 mo
1295.4 786.679 li
1312.57 797.472 li
1309 809.825 li
1291.35 798.666 li
cp
1277.12 775.188 mo
1294.03 785.819 li
1289.98 797.801 li
1272.61 786.817 li
1277.12 775.188 li
cp
1285.39 751.091 mo
1281.02 761.896 li
1264.82 751.583 li
1269.69 741.034 li
1285.39 751.091 li
cp
1291.51 733.802 mo
1285.96 749.585 li
1270.32 739.572 li
1276.32 724.221 li
1291.51 733.802 li
cp
1297.99 714.943 mo
1292.04 732.277 li
1276.89 722.726 li
1283.28 705.87 li
1297.99 714.943 li
cp
1298.52 713.427 mo
1283.86 704.382 li
1289.85 689.565 li
1304.03 698.218 li
1298.52 713.427 li
cp
1314.58 723.291 mo
1299.89 714.269 li
1305.4 699.052 li
1319.58 707.715 li
1314.58 723.291 li
cp
1330.84 733.28 mo
1315.95 724.137 li
1320.96 708.558 li
1335.32 717.333 li
1330.84 733.28 li
cp
1343.92 741.283 mo
1332.23 734.133 li
1336.71 718.181 li
1348.01 725.046 li
1343.92 741.283 li
cp
1345.43 765.228 mo
1340.32 762.141 li
1344.93 743.727 li
1349.93 746.715 li
1345.43 765.228 li
cp
1345.9 777.038 mo
1344.45 778.653 li
1346.58 767.309 li
1348.26 767.481 li
1345.9 777.038 li
cp
1345.09 782.404 mo
1344.19 781.29 li
1346.6 778.613 li
1347.5 779.691 li
1345.09 782.404 li
cp
1348.3 781.55 mo
1355.68 785.834 li
1349.51 794.227 li
1342.13 789.905 li
1348.3 781.55 li
cp
1343.61 785.253 mo
1342.36 786.948 li
1342.81 785.671 li
1343.61 785.253 li
cp
1342.82 782.093 mo
1343.84 783.363 li
1342.18 784.227 li
1339.11 782.541 li
1342.82 782.093 li
cp
1340.02 763.797 mo
1345.07 766.844 li
1342.5 780.551 li
1337.51 781.153 li
1340.02 763.797 li
cp
1326.38 755.394 mo
1338.57 762.911 li
1335.98 780.754 li
1321.78 771.944 li
1326.38 755.394 li
cp
1304.43 761.121 mo
1309.51 744.954 li
1324.99 754.534 li
1320.39 771.079 li
1304.43 761.121 li
cp
1303.91 762.652 mo
1319.94 772.652 li
1316.56 784.165 li
1300.03 773.811 li
1303.91 762.652 li
cp
1308.14 744.101 mo
1303.05 760.262 li
1287.32 750.448 li
1292.88 734.653 li
1308.14 744.101 li
cp
1308.62 742.552 mo
1293.4 733.133 li
1299.36 715.785 li
1314.09 724.833 li
1308.62 742.552 li
cp
1331.8 735.708 mo
1343.52 742.88 li
1338.92 761.281 li
1326.81 753.817 li
1331.8 735.708 li
cp
1325.42 752.956 mo
1310 743.406 li
1315.47 725.683 li
1330.4 734.853 li
1325.42 752.956 li
cp
1298.12 774.474 mo
1294.57 784.301 li
1277.72 773.708 li
1281.75 764.221 li
1298.12 774.474 li
cp
1282.37 762.75 mo
1286.74 751.943 li
1302.55 761.8 li
1298.66 772.956 li
1282.37 762.75 li
cp
1258.28 761.44 mo
1241.46 750.749 li
1246.51 741.435 li
1262.81 752.155 li
1258.28 761.44 li
cp
1264.14 753.013 mo
1280.41 763.371 li
1276.37 772.86 li
1259.62 762.286 li
1264.14 753.013 li
cp
1306.56 819.445 mo
1306.1 820.016 li
1279.49 801.669 li
1280.37 800.531 li
1280.64 800.188 1280.58 799.695 1280.23 799.43 cv
1279.89 799.163 1279.4 799.225 1279.13 799.568 cv
1278.2 800.763 li
1246.12 777.543 li
1248.23 774.83 li
1272.69 794.305 li
1272.84 794.419 1273.01 794.476 1273.18 794.476 cv
1273.41 794.476 1273.64 794.374 1273.8 794.179 cv
1274.07 793.839 1274.01 793.346 1273.67 793.076 cv
1271.48 791.329 li
1272.16 788.389 li
1289.53 799.373 li
1288.09 806.472 li
1288.01 806.896 1288.28 807.311 1288.71 807.397 cv
1288.86 807.413 li
1289.23 807.413 1289.56 807.156 1289.63 806.783 cv
1290.95 800.272 li
1308.6 811.432 li
1307.3 819.173 li
1307.03 819.129 1306.74 819.215 1306.56 819.445 cv
cp
1307.91 824.853 mo
1306.68 824.102 li
1305.65 823.27 li
1306.41 822.212 li
1315.08 829.22 li
1307.91 824.853 li
cp
1313.83 834.685 mo
1309.02 830.857 li
1312.63 829.761 li
1317.31 833.603 li
1313.83 834.685 li
cp
1315.33 838.751 mo
1314.62 836.085 li
1318.3 834.94 li
1318.72 837.676 li
1315.33 838.751 li
cp
1313.11 843.414 mo
1318.83 846 li
1318.18 850.815 li
1312.5 848.054 li
1313.11 843.414 li
cp
1314.23 841.135 mo
1315.34 840.784 li
1317.97 841.924 li
1318.53 844.14 li
1313.35 841.798 li
1314.23 841.135 li
cp
1311.43 841.266 mo
1311.43 841.268 li
1309.05 843.042 li
1308.03 840.724 li
1313.21 836.88 li
1313.88 839.435 li
1311.43 841.266 li
cp
1308.51 845.652 mo
1309.25 844.851 li
1311.56 843.131 li
1311.02 847.206 li
1308.51 845.652 li
cp
1303.02 851.543 mo
1307.41 846.824 li
1310.71 848.859 li
1308.71 855.08 li
1303.02 851.543 li
cp
1297.9 858.381 mo
1302.03 852.774 li
1308.15 856.577 li
1304.81 863.733 li
1297.53 859.172 li
1297.9 858.381 li
cp
1299.7 849.666 mo
1301.03 851.483 li
1295.14 859.473 li
1293.46 858.133 li
1299.7 849.666 li
cp
1293.17 844.683 mo
1298.6 848.516 li
1292.19 857.214 li
1286.6 853.578 li
1293.17 844.683 li
cp
1284.33 839.149 mo
1291.86 843.817 li
1285.27 852.729 li
1277.75 848.019 li
1284.33 839.149 li
cp
1275.52 833.689 mo
1282.99 838.318 li
1276.41 847.182 li
1268.96 842.513 li
1275.52 833.689 li
cp
1266.79 828.272 mo
1274.18 832.858 li
1267.62 841.676 li
1260.23 837.046 li
1266.79 828.272 li
cp
1251.57 831.623 mo
1258.11 822.893 li
1265.45 827.441 li
1258.89 836.21 li
1251.57 831.623 li
cp
1250.69 832.929 mo
1258.03 837.519 li
1252.21 847.387 li
1244.89 842.758 li
1250.69 832.929 li
cp
1244.49 829.19 mo
1249.36 832.107 li
1243.58 841.897 li
1238.87 838.715 li
1244.49 829.19 li
cp
1246.33 815.222 mo
1249.54 817.673 li
1248.91 818.319 li
1248.9 818.346 li
1248.85 818.394 li
1242.19 827.245 li
1242.17 827.288 li
1242.14 827.319 li
1241.86 827.791 li
1236.62 823.63 li
1246.33 815.222 li
cp
1234.3 800.201 mo
1235.42 796.979 li
1260.07 808.279 li
1255.78 811.26 li
1255.73 811.313 li
1255.67 811.357 li
1255.66 811.358 li
1250.64 816.538 li
1247.54 814.173 li
1254.78 807.907 li
1255.11 807.622 1255.14 807.126 1254.86 806.798 cv
1254.58 806.471 1254.08 806.436 1253.75 806.718 cv
1246.23 813.227 li
1230.4 802.813 li
1233.06 800.545 li
1233.13 800.603 1233.21 800.655 1233.3 800.686 cv
1233.56 800.729 li
1233.88 800.729 1234.19 800.526 1234.3 800.201 cv
cp
1192.76 770.222 mo
1235.93 791.673 li
1234.55 794.87 li
1190.43 775.733 li
1192.76 770.222 li
cp
1140.25 742.998 mo
1191.35 769.509 li
1189 775.087 li
1137.04 750.798 li
1140.25 742.998 li
cp
1080.29 711.466 mo
1138.85 742.268 li
1135.62 750.123 li
1076.29 721.496 li
1080.29 711.466 li
cp
1013.51 676.476 mo
1078.89 710.731 li
1074.88 720.81 li
1008.81 688.725 li
1013.51 676.476 li
cp
947.292 640.727 mo
1012.12 675.734 li
1007.4 688.023 li
942.062 654.865 li
947.292 640.727 li
cp
887.92 606.432 mo
945.904 639.955 li
940.664 654.119 li
882.408 621.851 li
887.92 606.432 li
cp
832.115 572.744 mo
886.542 605.621 li
881.025 621.055 li
826.538 588.865 li
832.115 572.744 li
cp
777.232 539.132 mo
830.74 571.909 li
825.163 588.035 li
771.789 555.402 li
777.232 539.132 li
cp
728.338 508.98 mo
775.858 538.289 li
770.416 554.555 li
723.093 525.14 li
728.338 508.98 li
cp
689.289 484.897 mo
726.963 508.131 li
721.719 524.286 li
684.203 500.965 li
689.289 484.897 li
cp
660.328 467.035 mo
687.91 484.047 li
682.826 500.109 li
655.358 483.036 li
660.328 467.035 li
cp
641.87 455.651 mo
658.948 466.184 li
653.98 482.18 li
636.973 471.608 li
641.87 455.651 li
cp
609.63 435.508 mo
640.49 454.795 li
635.597 470.741 li
604.898 451.253 li
609.63 435.508 li
cp
543.261 393.821 mo
608.248 434.643 li
603.521 450.374 li
538.894 409.023 li
543.261 393.821 li
cp
475.261 351.068 mo
541.876 392.952 li
537.513 408.139 li
471.256 365.681 li
475.261 351.068 li
cp
430.032 322.631 mo
473.871 350.194 li
469.87 364.792 li
426.261 336.848 li
430.032 322.631 li
cp
395.677 301.03 mo
428.64 321.756 li
424.873 335.959 li
392.076 314.943 li
395.677 301.03 li
cp
368.781 264.762 mo
400.459 284.262 li
394.802 298.624 li
363.299 278.819 li
368.781 264.762 li
cp
337.164 245.299 mo
367.421 263.924 li
361.945 277.967 li
331.853 259.047 li
337.164 245.299 li
cp
306.876 226.654 mo
335.804 244.461 li
330.498 258.196 li
301.729 240.107 li
306.876 226.654 li
cp
277.841 208.78 mo
305.515 225.817 li
300.374 239.256 li
272.845 221.947 li
277.841 208.78 li
cp
249.976 191.626 mo
276.479 207.942 li
271.488 221.094 li
245.127 204.52 li
249.976 191.626 li
cp
223.215 175.153 mo
248.613 190.788 li
243.769 203.666 li
218.504 187.782 li
223.215 175.153 li
cp
197.492 159.318 mo
221.851 174.314 li
217.146 186.928 li
192.914 171.691 li
197.492 159.318 li
cp
172.749 144.086 mo
196.128 158.478 li
191.555 170.837 li
168.297 156.214 li
172.749 144.086 li
cp
148.93 129.425 mo
171.383 143.245 li
166.937 155.359 li
144.599 141.315 li
148.93 129.425 li
cp
128.435 116.814 mo
147.565 128.585 li
143.241 140.453 li
124.225 128.33 li
128.435 116.814 li
cp
127.069 115.974 mo
122.874 127.448 li
109.325 118.45 li
113.406 107.579 li
127.069 115.974 li
cp
127.705 114.522 mo
114.049 106.131 li
119.822 95.3981 li
133.542 102.741 li
127.705 114.522 li
cp
154.169 114.773 mo
148.193 127.127 li
129.049 115.347 li
134.914 103.511 li
154.169 114.773 li
cp
154.979 113.427 mo
135.741 102.175 li
143.308 92.1047 li
162.694 102.943 li
154.979 113.427 li
cp
186.814 117.102 mo
178.946 127.829 li
156.336 114.233 li
164.067 103.728 li
186.814 117.102 li
cp
187.929 115.936 mo
165.324 102.646 li
174.701 96.2997 li
197.439 109.424 li
187.929 115.936 li
cp
212.971 130.659 mo
189.426 116.816 li
198.948 110.295 li
222.628 123.966 li
212.971 130.659 li
cp
248.81 139.08 mo
239.003 145.964 li
214.463 131.536 li
224.132 124.834 li
248.81 139.08 li
cp
250.328 138.143 mo
225.886 124.033 li
236.404 119.807 li
260.98 133.772 li
250.328 138.143 li
cp
277.555 153.858 mo
252.047 139.135 li
262.714 134.757 li
288.356 149.325 li
277.555 153.858 li
cp
305.901 170.22 mo
279.264 154.844 li
290.08 150.305 li
316.85 165.517 li
305.901 170.22 li
cp
335.436 187.269 mo
307.599 171.2 li
318.564 166.491 li
346.536 182.384 li
335.436 187.269 li
cp
366.238 205.047 mo
337.123 188.243 li
348.238 183.352 li
377.488 199.97 li
366.238 205.047 li
cp
398.386 223.605 mo
367.914 206.014 li
379.178 200.931 li
409.789 218.324 li
398.386 223.605 li
cp
431.973 242.995 mo
400.051 224.566 li
411.468 219.278 li
443.53 237.494 li
431.973 242.995 li
cp
467.1 263.268 mo
433.624 243.948 li
445.195 238.44 li
478.806 257.537 li
467.1 263.268 li
cp
494.777 278.602 mo
468.769 264.2 li
480.467 258.474 li
506.504 272.725 li
494.777 278.602 li
cp
508.781 274.674 mo
508.771 274.699 li
508.699 274.794 li
508.665 274.834 li
505.884 279.973 li
505.883 279.974 li
504.566 282.409 li
496.703 279.394 li
508.236 273.615 li
509.357 274.055 li
508.781 274.674 li
cp
518.024 291.3 mo
515.843 295.105 li
507.472 280.339 li
509.388 276.798 li
518.024 291.3 li
cp
510.508 272.819 mo
510.29 272.733 li
510.778 272.53 li
510.508 272.819 li
cp
519.086 290.013 mo
510.332 275.313 li
513.742 271.652 li
522.842 286.177 li
519.086 290.013 li
cp
572.65 327.085 mo
520.15 291.172 li
523.933 287.308 li
574.951 322.772 li
572.65 327.085 li
cp
636.55 361.846 mo
636.312 366.645 li
573.97 327.949 li
576.267 323.642 li
636.55 361.846 li
cp
636.7 360.081 mo
577.27 322.417 li
580.638 319.394 li
637.207 354.933 li
636.7 360.081 li
cp
668.195 396.154 mo
666.351 401.117 li
635.135 382.553 li
637.197 377.671 li
668.195 396.154 li
cp
667.875 393.053 mo
668.088 394.261 li
637.621 376.094 li
637.654 374.738 li
667.875 393.053 li
cp
666.903 387.57 mo
667.51 390.995 li
637.697 372.927 li
637.782 369.411 li
666.903 387.57 li
cp
678.742 372.456 mo
677.913 379.823 li
665.837 371.562 li
667.767 364.585 li
678.742 372.456 li
cp
679.535 371.091 mo
668.589 363.241 li
677.483 355.764 li
688.227 363.776 li
679.535 371.091 li
cp
679.381 380.822 mo
680.207 373.484 li
696.932 385.142 li
698.076 393.363 li
679.381 380.822 li
cp
703.044 403.041 mo
682.36 389.545 li
680.088 383.189 li
698.515 395.549 li
703.044 403.041 li
cp
699.817 394.467 mo
698.663 386.172 li
714.276 395.108 li
719.268 403.778 li
699.817 394.467 li
cp
727.771 415.402 mo
706.046 404.972 li
701.129 396.837 li
720.705 406.208 li
727.771 415.402 li
cp
746.672 415.653 mo
730.769 416.724 li
722.763 406.309 li
738.595 405.728 li
746.672 415.653 li
cp
748.439 415.335 mo
740.227 405.244 li
753.86 399.442 li
761.173 408.494 li
748.439 415.335 li
cp
755.908 424.607 mo
749.445 416.578 li
762.177 409.738 li
768.325 417.378 li
755.908 424.607 li
cp
761.377 431.449 mo
756.901 425.846 li
769.32 418.616 li
773.782 424.172 li
761.377 431.449 li
cp
764.635 435.527 mo
762.368 432.689 li
774.776 425.409 li
777.035 428.222 li
764.635 435.527 li
cp
779.109 445.45 mo
765.921 436.593 li
778.189 429.366 li
791.342 438.201 li
779.109 445.45 li
cp
819.778 470.227 mo
780.609 446.388 li
792.808 439.159 li
831.868 462.96 li
819.778 470.227 li
cp
874.372 504.378 mo
821.278 471.158 li
833.378 463.885 li
886.156 496.762 li
874.372 504.378 li
cp
928.48 541.166 mo
875.8 505.325 li
887.614 497.691 li
939.69 532.612 li
928.48 541.166 li
cp
984.684 580.687 mo
929.836 542.108 li
941.058 533.545 li
994.942 571.517 li
984.684 580.687 li
cp
1046.28 623.329 mo
986.009 581.61 li
996.255 572.451 li
1055.07 614.818 li
1046.28 623.329 li
cp
1107.67 666.212 mo
1047.59 624.243 li
1056.36 615.758 li
1114.76 659.077 li
1107.67 666.212 li
cp
1155.82 713.664 mo
1100.96 676.654 li
1107.9 668.302 li
1161.2 707.029 li
1155.82 713.664 li
cp
1199.84 754.064 mo
1151.1 723.139 li
1156.17 715.813 li
1203.47 748.767 li
1199.84 754.064 li
cp
1241.83 780.978 mo
1201.17 754.909 li
1204.75 749.676 li
1243.92 777.893 li
1241.83 780.978 li
cp
1276.3 803.468 mo
1243.15 781.832 li
1245.19 778.813 li
1277.28 802.032 li
1276.3 803.468 li
cp
1280.95 808.472 mo
1278.35 806.987 li
1278.28 806.961 li
1278.25 806.939 li
1276.44 806.17 li
1276.76 805.657 li
1280.95 808.472 li
cp
1304.39 822.336 mo
1277.6 804.336 li
1278.56 802.938 li
1305.15 821.27 li
1304.39 822.336 li
cp
1300.44 825.392 mo
1303.88 824.377 li
1310.9 828.646 li
1307.47 829.686 li
1300.44 825.392 li
cp
1307.06 839.485 mo
1301.87 835.554 li
1307.35 831.529 li
1312.38 835.537 li
1307.06 839.485 li
cp
1306.82 841.873 mo
1307.8 844.105 li
1302.07 850.253 li
1300.72 848.399 li
1306.82 841.873 li
cp
1300.65 836.597 mo
1305.89 840.567 li
1299.6 847.301 li
1294.19 843.478 li
1300.65 836.597 li
cp
1291.83 831.1 mo
1299.32 835.709 li
1292.86 842.591 li
1285.36 837.94 li
1291.83 831.1 li
cp
1283.03 825.69 mo
1290.46 830.259 li
1284 837.095 li
1276.56 832.483 li
1283.03 825.69 li
cp
1274.29 820.321 mo
1281.66 824.849 li
1275.2 831.637 li
1267.83 827.067 li
1274.29 820.321 li
cp
1265.62 814.99 mo
1272.93 819.479 li
1266.46 826.222 li
1259.16 821.691 li
1265.62 814.99 li
cp
1265.67 807.053 mo
1270.79 809.321 li
1265.42 813.083 li
1260.43 810.695 li
1265.67 807.053 li
cp
1237.33 792.385 mo
1263.82 806.106 li
1262.05 806.918 li
1262 806.957 li
1261.93 806.985 li
1261.57 807.239 li
1235.98 795.51 li
1237.33 792.385 li
cp
1196.27 763.155 mo
1238.29 786.944 li
1236.6 790.251 li
1193.42 768.795 li
1196.27 763.155 li
cp
1144.87 733.622 mo
1194.91 762.377 li
1192.02 768.083 li
1140.9 741.565 li
1144.87 733.622 li
cp
1085.95 699.851 mo
1143.51 732.838 li
1139.5 740.837 li
1080.92 710.025 li
1085.95 699.851 li
cp
1020.17 662.651 mo
1084.59 699.073 li
1079.53 709.296 li
1014.14 675.03 li
1020.17 662.651 li
cp
954.751 624.918 mo
1018.8 661.871 li
1012.75 674.291 li
947.9 639.27 li
954.751 624.918 li
cp
895.879 589.035 mo
953.394 624.115 li
946.527 638.501 li
888.511 604.96 li
895.879 589.035 li
cp
840.274 554.347 mo
894.532 588.205 li
887.153 604.156 li
832.69 571.257 li
840.274 554.347 li
cp
785.321 520.52 mo
838.927 553.511 li
831.338 570.433 li
777.796 537.635 li
785.321 520.52 li
cp
736.246 490.523 mo
783.97 519.691 li
776.445 536.805 li
728.892 507.475 li
736.246 490.523 li
cp
697.054 466.568 mo
734.891 489.695 li
727.54 506.641 li
689.833 483.387 li
697.054 466.568 li
cp
667.989 448.803 mo
695.7 465.74 li
688.481 482.553 li
660.867 465.521 li
667.989 448.803 li
cp
649.462 437.481 mo
666.634 447.975 li
659.514 464.687 li
642.404 454.135 li
649.462 437.481 li
cp
617.047 417.572 mo
648.108 436.651 li
641.054 453.296 li
610.155 433.985 li
617.047 417.572 li
cp
550.279 376.486 mo
615.693 416.74 li
608.807 433.14 li
543.772 392.288 li
550.279 376.486 li
cp
481.87 334.376 mo
548.924 375.653 li
542.423 391.44 li
475.757 349.524 li
481.87 334.376 li
cp
436.375 306.371 mo
480.514 333.541 li
474.406 348.675 li
430.519 321.081 li
436.375 306.371 li
cp
401.819 285.099 mo
435.016 305.535 li
429.166 320.231 li
396.156 299.475 li
401.819 285.099 li
cp
376.715 248.591 mo
408.606 267.768 li
401.112 282.819 li
369.413 263.306 li
376.715 248.591 li
cp
344.9 229.46 mo
375.364 247.779 li
368.07 262.479 li
337.793 243.841 li
344.9 229.46 li
cp
314.429 211.134 mo
343.549 228.648 li
336.45 243.014 li
307.502 225.194 li
314.429 211.134 li
cp
285.213 193.566 mo
313.078 210.322 li
306.158 224.367 li
278.463 207.318 li
285.213 193.566 li
cp
257.18 176.708 mo
283.863 192.754 li
277.12 206.491 li
250.595 190.163 li
257.18 176.708 li
cp
230.256 160.518 mo
255.828 175.896 li
249.251 189.335 li
223.831 173.688 li
230.256 160.518 li
cp
204.377 144.956 mo
228.904 159.706 li
222.487 172.86 li
198.105 157.851 li
204.377 144.956 li
cp
203.836 142.798 mo
180.297 128.642 li
188.176 117.903 li
211.86 131.827 li
203.836 142.798 li
cp
229.715 158.36 mo
205.187 143.611 li
213.221 132.627 li
237.896 147.135 li
229.715 158.36 li
cp
264.984 163.062 mo
256.639 174.55 li
231.066 159.172 li
239.256 147.935 li
264.984 163.062 li
cp
266.087 161.888 mo
240.492 146.838 li
250.311 139.946 li
276.048 154.801 li
266.087 161.888 li
cp
294.286 178.467 mo
267.57 162.761 li
277.544 155.665 li
304.405 171.17 li
294.286 178.467 li
cp
323.672 195.745 mo
295.765 179.337 li
305.897 172.031 li
333.952 188.226 li
323.672 195.745 li
cp
354.322 213.765 mo
325.147 196.612 li
335.439 189.085 li
364.765 206.01 li
354.322 213.765 li
cp
386.318 232.578 mo
355.793 214.63 li
366.249 206.867 li
396.928 224.577 li
386.318 232.578 li
cp
419.754 252.236 mo
387.784 233.44 li
398.404 225.429 li
430.527 243.974 li
419.754 252.236 li
cp
454.723 272.794 mo
421.214 253.094 li
431.999 244.823 li
465.668 264.255 li
454.723 272.794 li
cp
496.274 296.103 mo
456.199 273.634 li
467.144 265.096 li
494.034 279.987 li
496.274 296.103 li
cp
512.564 298.894 mo
497.967 296.866 li
495.72 280.699 li
504.38 284.02 li
512.564 298.894 li
cp
514.021 298.284 mo
505.824 283.386 li
506.59 281.969 li
514.936 296.69 li
514.021 298.284 li
cp
568.893 337.088 mo
566.509 341.855 li
500.637 298.824 li
513.723 300.642 li
568.893 337.088 li
cp
570.089 333.935 mo
569.501 335.607 li
515.055 299.638 li
516.102 297.812 li
570.089 333.935 li
cp
570.628 332.406 mo
516.885 296.446 li
519.192 292.42 li
571.989 328.537 li
570.628 332.406 li
cp
571.985 333.279 mo
573.346 329.412 li
636.234 368.447 li
636.148 371.991 li
571.985 333.279 li
cp
570.861 336.47 mo
571.452 334.793 li
636.104 373.8 li
636.071 375.174 li
570.861 336.47 li
cp
633.772 381.744 mo
567.847 342.692 li
570.232 337.922 li
635.835 376.86 li
633.772 381.744 li
cp
658.502 416.254 mo
627.262 397.436 li
634.451 383.974 li
665.717 402.568 li
658.502 416.254 li
cp
684.25 413.699 mo
677.08 427.488 li
659.849 417.067 li
667.067 403.375 li
684.25 413.699 li
cp
669.566 396.977 mo
686.474 407.185 li
684.844 412.223 li
667.723 401.936 li
669.566 396.977 li
cp
683.666 398.15 mo
684.827 401.605 li
669.297 392.08 li
668.699 388.701 li
683.666 398.15 li
cp
708.166 411.764 mo
684.974 397.119 li
683.198 391.968 li
704.909 406.133 li
708.166 411.764 li
cp
734.916 424.842 mo
711.001 413.526 li
707.45 407.387 li
729.888 418.16 li
734.916 424.842 li
cp
737.828 426.099 mo
731.902 418.222 li
747.884 417.145 li
754.166 424.948 li
737.828 426.099 li
cp
742.803 432.819 mo
738.939 427.596 li
755.364 426.438 li
759.631 431.779 li
742.803 432.819 li
cp
745.764 436.826 mo
743.916 434.325 li
760.83 433.28 li
762.885 435.852 li
745.764 436.826 li
cp
755.875 449.817 mo
746.926 438.334 li
764.229 437.349 li
777.04 445.953 li
755.875 449.817 li
cp
806.764 481.562 mo
757.692 451.083 li
778.931 447.206 li
818.456 471.261 li
806.764 481.562 li
cp
861.632 515.937 mo
808.155 482.43 li
819.856 472.121 li
873.088 505.427 li
861.632 515.937 li
cp
916.383 553.268 mo
862.982 516.83 li
874.452 506.308 li
927.285 542.253 li
916.383 553.268 li
cp
973.587 592.931 mo
917.697 554.173 li
928.598 543.158 li
983.567 581.822 li
973.587 592.931 li
cp
1036.61 634.559 mo
974.902 593.818 li
984.864 582.727 li
1045.2 624.492 li
1036.61 634.559 li
cp
1099.65 675.779 mo
1037.93 635.428 li
1046.49 625.394 li
1106.61 667.39 li
1099.65 675.779 li
cp
1149.77 722.303 mo
1093.46 687.22 li
1100 677.903 li
1154.88 714.926 li
1149.77 722.303 li
cp
1092.6 688.539 mo
1148.92 723.625 li
1144.26 731.461 li
1086.7 698.47 li
1092.6 688.539 li
cp
1028.08 649.232 mo
1091.27 687.715 li
1085.34 697.692 li
1020.91 661.268 li
1028.08 649.232 li
cp
963.745 609.399 mo
1026.74 648.41 li
1019.55 660.489 li
955.485 623.528 li
963.745 609.399 li
cp
905.613 571.348 mo
962.418 608.555 li
954.134 622.726 li
896.588 587.627 li
905.613 571.348 li
cp
850.37 535.073 mo
904.295 570.484 li
895.25 586.8 li
840.961 552.923 li
850.37 535.073 li
cp
795.408 500.886 mo
849.043 534.223 li
839.623 552.095 li
785.997 519.092 li
795.408 500.886 li
cp
746.181 471.107 mo
794.065 500.062 li
784.655 518.269 li
736.917 489.092 li
746.181 471.107 li
cp
706.863 447.332 mo
744.833 470.291 li
735.573 488.271 li
697.722 465.135 li
706.863 447.332 li
cp
713.319 431.166 mo
706.231 445.115 li
678.427 428.302 li
685.598 414.509 li
713.319 431.166 li
cp
687.856 408.019 mo
715.134 424.486 li
713.846 429.65 li
686.226 413.054 li
687.856 408.019 li
cp
713.363 420.952 mo
713.897 421.904 li
688.066 406.311 li
687.695 405.208 li
713.363 420.952 li
cp
714.509 419.784 mo
712.329 415.891 li
736.943 427.538 li
739.961 431.618 li
714.509 419.784 li
cp
716.597 423.506 mo
715.824 422.127 li
741.912 434.257 li
742.935 435.641 li
716.597 423.506 li
cp
715.268 430.439 mo
716.569 425.223 li
744.883 438.269 li
752.869 448.516 li
715.268 430.439 li
cp
745.545 468.887 mo
707.58 445.93 li
714.704 431.91 li
754.488 451.037 li
745.545 468.887 li
cp
794.869 498.713 mo
746.894 469.703 li
755.865 451.797 li
805.735 482.771 li
794.869 498.713 li
cp
849.854 532.878 mo
796.211 499.536 li
807.069 483.604 li
860.612 517.152 li
849.854 532.878 li
cp
905.129 569.152 mo
851.179 533.725 li
861.928 518.011 li
915.383 554.487 li
905.129 569.152 li
cp
963.272 607.237 mo
906.443 570.014 li
916.676 555.377 li
972.607 594.163 li
963.272 607.237 li
cp
1036.95 636.667 mo
1098.7 677.034 li
1092.12 686.395 li
1028.94 647.917 li
1036.95 636.667 li
cp
1027.6 647.094 mo
964.6 608.081 li
973.908 595.043 li
1035.64 635.804 li
1027.6 647.094 li
cp
685.987 405.057 mo
669.871 395.327 li
669.663 394.148 li
685.608 403.928 li
685.987 405.057 li
cp
685.77 399.479 mo
709.854 414.687 li
711.79 418.143 li
686.915 402.886 li
685.77 399.479 li
cp
677.706 429.701 mo
705.516 446.517 li
696.378 464.314 li
668.654 447.369 li
677.706 429.701 li
cp
659.124 418.464 mo
676.358 428.886 li
667.309 446.548 li
650.125 436.046 li
659.124 418.464 li
cp
626.535 398.831 mo
657.776 417.65 li
648.781 435.223 li
617.707 416.135 li
626.535 398.831 li
cp
559.352 358.419 mo
625.186 398.019 li
616.365 415.309 li
550.932 375.044 li
559.352 358.419 li
cp
490.509 317.02 mo
558.002 357.607 li
549.59 374.217 li
482.515 332.928 li
490.509 317.02 li
cp
444.727 289.492 mo
489.16 316.208 li
481.173 332.102 li
437.015 304.919 li
444.727 289.492 li
cp
409.955 268.58 mo
443.377 288.68 li
435.672 304.093 li
402.454 283.645 li
409.955 268.58 li
cp
444.186 287.333 mo
410.764 267.233 li
420.034 254.222 li
453.65 273.986 li
444.186 287.333 li
cp
489.792 314.756 mo
445.535 288.144 li
455.016 274.773 li
496.293 297.915 li
489.792 314.756 li
cp
567.119 344.086 mo
633.099 383.171 li
625.915 396.625 li
560.082 357.025 li
567.119 344.086 li
cp
558.734 356.214 mo
491.158 315.577 li
497.653 298.751 li
565.781 343.256 li
558.734 356.214 li
cp
386.594 234.562 mo
418.675 253.423 li
409.414 266.421 li
377.523 247.244 li
386.594 234.562 li
cp
354.593 215.747 mo
385.233 233.762 li
376.172 246.432 li
345.709 228.114 li
354.593 215.747 li
cp
323.938 197.723 mo
353.233 214.947 li
344.358 227.302 li
315.238 209.788 li
323.938 197.723 li
cp
284.672 191.407 mo
257.989 175.362 li
266.344 163.861 li
293.187 179.643 li
284.672 191.407 li
cp
294.547 180.442 mo
322.578 196.923 li
313.887 208.976 li
286.022 192.22 li
294.547 180.442 li
cp
1195.67 761 mo
1145.63 732.242 li
1150.25 724.461 li
1199 755.389 li
1195.67 761 li
cp
1239.05 785.569 mo
1197.03 761.779 li
1200.32 756.235 li
1240.98 782.305 li
1239.05 785.569 li
cp
1274.98 805.548 mo
1271.32 803.99 li
1271.23 803.97 li
1271.07 803.938 li
1270.92 803.948 li
1270.81 803.954 li
1270.63 804.002 li
1240.41 786.352 li
1242.3 783.159 li
1275.44 804.789 li
1274.98 805.548 li
cp
1265.7 805.313 mo
1238 790.962 li
1239.65 787.729 li
1268.49 804.571 li
1265.7 805.313 li
cp
1272.45 808.335 mo
1267.94 806.342 li
1270.95 805.541 li
1275.55 807.497 li
1272.45 808.335 li
cp
1281.15 813.603 mo
1274.35 809.447 li
1277.82 808.508 li
1284.61 812.64 li
1281.15 813.603 li
cp
1289.86 818.925 mo
1282.98 814.723 li
1286.45 813.759 li
1293.31 817.936 li
1289.86 818.925 li
cp
1291.68 820.037 mo
1295.13 819.047 li
1302.07 823.273 li
1298.63 824.287 li
1291.68 820.037 li
cp
1298.56 826.083 mo
1305.96 830.6 li
1300.52 834.599 li
1293.11 830.043 li
1298.56 826.083 li
cp
1289.78 820.717 mo
1297.11 825.195 li
1291.66 829.152 li
1284.31 824.638 li
1289.78 820.717 li
cp
1274.13 818.38 mo
1266.93 813.947 li
1272.41 810.104 li
1279.61 814.499 li
1274.13 818.38 li
cp
1281.07 815.391 mo
1288.33 819.827 li
1282.86 823.746 li
1275.59 819.274 li
1281.07 815.391 li
cp
667.078 379.523 mo
666.03 373.598 li
677.894 381.714 li
680.182 388.118 li
667.078 379.523 li
cp
681.054 390.568 mo
682.851 395.779 li
668.328 386.61 li
667.452 381.647 li
681.054 390.568 li
cp
172.015 141.789 mo
149.538 127.955 li
155.525 115.578 li
178.135 129.175 li
172.015 141.789 li
cp
179.486 129.987 mo
203.026 144.144 li
196.761 157.023 li
173.359 142.617 li
179.486 129.987 li
cp
1256.74 822.109 mo
1250.22 830.796 li
1245.37 827.884 li
1251.72 819.438 li
1256.74 822.109 li
cp
1252.78 818.225 mo
1259.04 811.773 li
1264.17 814.228 li
1257.76 820.874 li
1252.78 818.225 li
cp
638.185 361.024 mo
638.691 355.885 li
664.217 372.369 li
665.278 378.367 li
638.185 361.024 li
cp
665.651 380.47 mo
666.536 385.49 li
637.838 367.594 li
638.074 362.819 li
665.651 380.47 li
cp
1234.47 823.982 mo
1230.8 836.328 li
1214.31 824.632 li
1218.75 813.21 li
1234.47 823.982 li
cp
1219.67 811.934 mo
1229.15 803.873 li
1245 814.296 li
1235.33 822.665 li
1219.67 811.934 li
cp
1322.12 840.966 mo
1322.85 843.951 li
1320.26 844.578 li
1319.57 841.86 li
1322.12 840.966 li
cp
1319.96 835.401 mo
1321.54 836.295 li
1321.75 838.522 li
1320.32 837.722 li
1319.96 835.401 li
cp
1320.77 839.773 mo
1318.71 840.499 li
1317.63 839.902 li
1319.55 839.093 li
1320.77 839.773 li
cp
1342.29 806.478 mo
1341.42 808.322 li
1340.19 805.235 li
1342.29 806.478 li
cp
1339.23 802.841 mo
1338.92 802.086 li
1340.19 793.176 li
1340.3 792.842 li
1341.26 791.215 li
1348.65 795.543 li
1343.02 805.088 li
1339.23 802.841 li
cp
1214.19 738.466 mo
1222.54 745.867 li
1222.69 745.999 1222.88 746.065 1223.06 746.065 cv
1223.28 746.065 1223.5 745.976 1223.65 745.8 cv
1223.94 745.476 1223.91 744.979 1223.58 744.691 cv
1221.47 742.817 li
1222.66 740.608 li
1239.4 751.303 li
1235.98 758.311 li
1235.79 758.7 1235.96 759.171 1236.35 759.361 cv
1236.46 759.415 1236.57 759.441 1236.69 759.441 cv
1236.98 759.441 1237.26 759.279 1237.4 759 cv
1240.74 752.153 li
1257.61 762.876 li
1252.53 774.472 li
1252.35 774.869 1252.53 775.333 1252.93 775.506 cv
1253.03 775.551 1253.14 775.573 1253.24 775.573 cv
1253.55 775.573 1253.83 775.397 1253.96 775.102 cv
1258.95 763.725 li
1275.77 774.335 li
1271.26 785.961 li
1255.94 776.279 li
1255.57 776.045 1255.09 776.157 1254.85 776.523 cv
1254.62 776.889 1254.73 777.375 1255.1 777.606 cv
1270.75 787.5 li
1270.12 790.246 li
1249.24 773.627 li
1250.53 772.195 li
1250.82 771.873 1250.79 771.376 1250.47 771.085 cv
1250.15 770.793 1249.65 770.819 1249.36 771.141 cv
1248.01 772.644 li
1210.45 742.501 li
1214.19 738.466 li
cp
1215.12 736.487 mo
1214.87 736.205 1214.47 736.194 1214.16 736.373 cv
1207.56 730.943 li
1221.33 739.76 li
1220.26 741.747 li
1215.21 737.274 li
1215.31 737.008 1215.32 736.714 1215.12 736.487 cv
cp
662.826 305.122 mo
663.405 319.404 li
605.459 287.373 li
604.586 273.446 li
662.826 305.122 li
cp
603.409 254.677 mo
602.951 247.377 li
661.743 278.49 li
662.048 286.011 li
603.409 254.677 li
cp
662.122 287.831 mo
662.751 303.292 li
604.47 271.594 li
603.526 256.52 li
662.122 287.831 li
cp
326.313 301.968 mo
298.252 283.412 li
297.092 271.285 li
325.244 289.635 li
326.313 301.968 li
cp
325.318 287.81 mo
296.971 269.333 li
297.917 256.472 li
326.384 274.713 li
325.318 287.81 li
cp
357.349 322.49 mo
327.986 303.073 li
326.915 290.724 li
356.383 309.93 li
357.349 322.49 li
cp
356.471 308.114 mo
326.814 288.785 li
327.881 275.672 li
357.663 294.756 li
356.471 308.114 li
cp
389.764 343.921 mo
359.01 323.588 li
358.043 311.012 li
388.91 331.131 li
389.764 343.921 li
cp
389.012 329.323 mo
357.961 309.085 li
359.155 295.712 li
390.345 315.699 li
389.012 329.323 li
cp
423.647 366.328 mo
391.411 345.01 li
390.555 332.203 li
422.919 353.298 li
423.647 366.328 li
cp
423.036 351.5 mo
390.495 330.29 li
391.829 316.65 li
424.523 337.6 li
423.036 351.5 li
cp
468.23 395.807 mo
425.282 367.408 li
424.552 354.362 li
467.678 382.469 li
468.23 395.807 li
cp
467.814 380.684 mo
424.514 352.463 li
426.002 338.548 li
469.507 366.426 li
467.814 380.684 li
cp
535.198 440.088 mo
469.846 396.875 li
469.293 383.522 li
534.935 426.305 li
535.198 440.088 li
cp
535.103 424.54 mo
469.283 381.642 li
470.978 367.368 li
537.131 409.76 li
535.103 424.54 li
cp
820.716 635.093 mo
768.551 603.338 li
767.254 590.732 li
819.748 622.727 li
820.716 635.093 li
cp
819.824 620.933 mo
767.124 588.812 li
768.035 574.385 li
821.014 606.721 li
819.824 620.933 li
cp
875.829 666.023 mo
822.369 636.083 li
821.399 623.68 li
875.216 654.275 li
875.829 666.023 li
cp
875.322 652.527 mo
821.324 621.83 li
822.516 607.604 li
876.745 638.996 li
875.322 652.527 li
cp
934.924 695.5 mo
877.448 666.905 li
876.833 655.126 li
934.673 684.804 li
934.924 695.5 li
cp
934.812 683.109 mo
876.815 653.351 li
878.239 639.812 li
936.401 670.758 li
934.812 683.109 li
cp
1141.1 787.555 mo
1145.12 777.496 li
1160.63 788.496 li
1158.94 800.457 li
1141.1 787.555 li
cp
1140.63 789.151 mo
1158.73 802.245 li
1158.16 815.194 li
1137.89 800.254 li
1140.63 789.151 li
cp
1122.24 773.91 mo
1128.48 765.698 li
1143.8 776.561 li
1139.79 786.606 li
1122.24 773.91 li
cp
1139.25 788.158 mo
1136.52 799.244 li
1116.61 784.565 li
1121.4 775.247 li
1139.25 788.158 li
cp
1307.62 821.172 mo
1307.75 821.221 li
1307.88 821.233 li
1308.26 821.233 1308.59 820.962 1308.66 820.577 cv
1310.04 812.359 li
1324.01 821.445 li
1325.06 831.731 li
1324.84 831.742 1324.63 831.834 1324.49 832.017 cv
1324.21 832.357 1324.27 832.851 1324.61 833.121 cv
1325.58 833.894 li
1324.67 834.945 li
1307.62 821.172 li
cp
1323.29 836.621 mo
1323.06 835.662 li
1323.66 836.153 li
1323.29 836.621 li
cp
1324.34 852.952 mo
1324.39 852.931 li
1324.4 852.931 li
1324.4 852.93 li
1324.84 852.515 li
1324.84 852.515 li
1325.69 851.722 li
1325.79 851.627 li
1325.81 855.449 li
1322.95 853.812 li
1323.23 852.952 li
1323.55 853.079 li
1323.55 853.079 li
1323.57 853.087 li
1323.67 853.125 1323.76 853.142 1323.86 853.142 cv
1324.04 853.142 1324.2 853.065 1324.34 852.952 cv
cp
1325.38 849.868 mo
1325.34 849.904 li
1324.14 847.855 li
1324.18 847.59 li
1325.38 849.868 li
cp
1324.58 844.554 mo
1324.59 844.47 li
1324.51 843.491 li
1326.87 848.479 li
1326.57 848.76 li
1324.55 844.919 li
1324.58 844.637 li
1324.58 844.554 li
cp
1339.38 819.576 mo
1338.68 825.24 li
1336.63 826.334 li
1337.84 820.947 li
1339.38 819.576 li
cp
1337.41 819.228 mo
1336.18 816.484 li
1338.73 812.595 li
1339.57 817.308 li
1337.41 819.228 li
cp
1256.42 874.581 mo
1267.28 896.851 li
1252.13 884.487 li
1242.66 862.556 li
1242.49 862.156 1242.03 861.974 1241.63 862.146 cv
1241.23 862.318 1241.05 862.78 1241.22 863.178 cv
1249.61 882.619 li
1228.19 866.827 li
1221.61 847.726 li
1230.75 854.338 li
1230.6 854.863 li
1230.48 855.28 1230.72 855.716 1231.13 855.838 cv
1231.35 855.87 li
1231.69 855.87 1232.01 855.648 1232.11 855.305 cv
1233.34 851.119 li
1237.84 854.505 li
1236.35 859.536 li
1236.23 859.952 1236.46 860.389 1236.88 860.512 cv
1237.1 860.544 li
1237.44 860.544 1237.76 860.324 1237.86 859.982 cv
1239.2 855.429 li
1246.43 860.047 li
1244.82 865.419 li
1244.7 865.835 1244.93 866.273 1245.35 866.397 cv
1245.57 866.43 li
1245.91 866.43 1246.22 866.21 1246.32 865.871 cv
1247.81 860.927 li
1255.1 865.584 li
1253.25 871.683 li
1253.12 872.098 1253.35 872.537 1253.77 872.663 cv
1254 872.696 li
1254.34 872.696 1254.65 872.478 1254.75 872.139 cv
1256.47 866.463 li
1263.83 871.164 li
1261.21 879.682 li
1261.02 879.578 1260.81 879.557 1260.62 879.611 cv
1257.83 873.892 li
1257.64 873.502 1257.17 873.34 1256.78 873.531 cv
1256.39 873.721 1256.23 874.19 1256.42 874.581 cv
cp
1309.85 882.892 mo
1308.94 882.313 li
1309.69 881.275 li
1309.85 882.892 li
cp
1309.38 878.896 mo
1307.82 877.655 li
1312.38 869.92 li
1314.23 870.666 li
1309.38 878.896 li
cp
1332.3 844.497 mo
1332.17 844.36 1332 844.305 1331.83 844.281 cv
1331.29 842.975 li
1344.81 853.013 li
1343.83 863.479 li
1327.38 856.293 li
1327.36 850.17 li
1328.36 849.237 li
1328.36 849.237 li
1328.36 849.236 li
1330.06 847.651 li
1330.06 847.651 li
1331.94 845.904 li
1331.94 845.903 li
1332.26 845.608 li
1332.58 845.312 1332.59 844.815 1332.3 844.497 cv
cp
1376.8 783.789 mo
1379.73 784.969 li
1380.14 787.389 li
1374.8 785.126 li
1376.5 783.872 li
1376.8 783.789 li
cp
1372.85 784.608 mo
1372.84 784.617 li
1372.18 785.101 li
1371.24 782.92 li
1375.86 779.528 li
1376.5 781.917 li
1372.85 784.608 li
cp
724.34 331.371 mo
724.329 330.738 li
724.225 324.932 li
732.049 329.445 li
724.34 331.371 li
cp
725.324 332.744 mo
733.938 330.592 li
743.674 338.392 li
731.696 341.255 li
725.324 332.744 li
cp
724.442 336.97 mo
724.442 336.969 li
724.442 336.969 li
724.39 334.117 li
729.138 340.458 li
724.472 338.706 li
724.463 338.205 li
724.463 338.205 li
724.442 336.97 li
cp
1342.28 915.491 mo
1341.92 929.856 li
1333.42 930.655 li
1332.05 914.136 li
1342.28 915.491 li
cp
1331.92 912.535 mo
1330.57 895.406 li
1342.87 898.088 li
1342.32 913.913 li
1331.92 912.535 li
cp
1382.13 778.763 mo
1383.16 779.533 li
1383.36 781.294 li
1382.44 780.612 li
1382.13 778.763 li
cp
1382.7 782.76 mo
1380.56 783.525 li
1379.6 782.82 li
1381.62 781.954 li
1382.7 782.76 li
cp
1413.91 771.092 mo
1413.76 775.767 li
1396.29 766.042 li
1402.38 762.159 li
1413.91 771.092 li
cp
1421.75 774.041 mo
1421.75 773.931 li
1421.73 773.889 li
1421.72 773.838 li
1421.67 773.743 li
1421.64 773.652 li
1421.61 773.62 li
1421.58 773.574 li
1421.49 773.5 li
1421.42 773.431 li
1421.41 773.424 li
1421.41 773.424 li
1421.41 773.422 li
1402.87 760.555 li
1402.8 760.525 li
1402.76 760.49 li
1377.17 748.336 li
1361.39 740.845 li
1365.72 723.319 li
1365.72 723.316 li
1365.72 723.315 li
1369.61 707.182 li
1369.61 707.177 li
1369.61 707.174 li
1369.61 707.173 li
1372.98 692.409 li
1372.98 692.38 li
1372.98 692.302 li
1372.99 692.252 li
1373.18 683.723 li
1373.18 683.7 li
1373.18 683.66 li
1373.18 683.648 li
1372.67 676.673 li
1372.64 676.591 li
1372.63 676.498 li
1372.6 676.435 li
1372.53 676.312 li
1372.48 676.228 li
1372.48 676.218 li
1366.64 669.434 li
1366.57 669.38 li
1366.51 669.315 li
1364.03 667.484 li
1364.03 667.481 li
1364.02 667.477 li
1353.9 660.26 li
1353.87 660.247 li
1353.84 660.223 li
1353.84 660.222 li
1341.23 652.804 li
1341.22 652.802 li
1327.89 644.895 li
1327.88 644.894 li
1327.88 644.893 li
1314.07 636.759 li
1314.06 636.757 li
1314.06 636.756 li
1300 628.646 li
1300 628.646 li
1300 628.643 li
1285.89 620.625 li
1285.89 620.624 li
1271.93 612.761 li
1271.82 612.724 li
1271.69 612.672 li
1259.1 610.374 li
1259.06 610.375 li
1258.91 610.376 li
1258.8 610.382 li
1258.76 610.394 li
1258.63 610.448 li
1258.53 610.493 li
1258.48 610.531 li
1258.45 610.55 li
1248.45 619.071 li
1248.42 619.109 li
1248.34 619.204 li
1248.29 619.252 li
1239.65 633.073 li
1239.65 633.075 li
1239.65 633.076 li
1231.12 646.875 li
1231.12 646.884 li
1231.11 646.891 li
1222.8 661.029 li
1222.79 661.043 li
1222.79 661.053 li
1214.77 675.875 li
1214.77 675.876 li
1208.47 687.046 li
1204.51 687.945 li
1204.41 687.988 li
1204.4 687.993 li
1204.32 688.016 li
1204.32 688.017 li
1204.31 688.021 li
1200.86 689.825 li
1200.42 689.362 li
1200.4 689.353 li
1200.39 689.334 li
1156.18 647.228 li
1156.17 647.223 li
1156.16 647.209 li
1105.79 602.605 li
1105.78 602.602 li
1105.77 602.59 li
1054.32 559.485 li
1054.31 559.483 li
1054.3 559.472 li
1022.56 534.273 li
1022.56 534.273 li
998.305 514.676 li
998.289 514.668 li
998.275 514.653 li
948.853 478.455 li
948.826 478.443 li
948.807 478.424 li
896.748 445.638 li
896.736 445.633 li
896.726 445.624 li
896.543 445.517 li
846.135 415.936 li
846.13 415.931 li
828.822 405.036 li
819.372 398.585 li
818.159 396.982 li
818.157 396.979 li
818.146 396.964 li
813.267 390.519 li
813.24 390.494 li
813.234 390.476 li
805.651 381.792 li
805.62 381.777 li
805.607 381.746 li
780.637 357.381 li
780.617 357.373 li
780.585 357.334 li
756.169 337.451 li
756.165 337.449 li
756.163 337.446 li
744.965 328.493 li
744.906 328.463 li
744.859 328.422 li
724.078 316.696 li
724.04 314.583 li
723.727 297.251 li
723.561 287.885 li
723.485 283.685 li
723.449 281.722 li
723.446 281.714 li
723.432 281.632 li
723.421 281.543 li
723.388 281.459 li
723.371 281.396 li
720.182 274.769 li
720.134 274.706 li
720.099 274.637 li
720.039 274.58 li
719.923 274.478 li
719.872 274.436 li
719.858 274.424 li
692.584 259.097 li
692.568 259.092 li
692.556 259.083 li
631.796 228.042 li
631.777 228.037 li
631.76 228.025 li
573.278 201.8 li
573.272 201.798 li
573.109 201.757 li
573.011 201.739 li
572.964 201.733 li
572.957 201.731 li
572.949 201.731 li
549.409 201.961 li
549.35 201.974 li
549.288 201.972 li
549.26 201.982 li
549.18 202.005 li
549.147 202.017 li
549.052 202.062 li
548.979 202.1 li
548.922 202.146 li
548.889 202.174 li
548.822 202.248 li
548.765 202.319 li
548.745 202.342 li
548.744 202.343 li
547.412 204.563 li
547.411 204.564 li
547.401 204.581 li
547.341 204.762 li
547.341 204.762 li
547.307 204.861 li
547.305 204.867 li
546.288 212.815 li
546.291 212.859 li
546.283 212.909 li
546.282 212.914 li
546.264 228.573 li
546.268 228.592 li
546.269 228.626 li
546.267 228.639 li
547.528 243.88 li
547.528 243.881 li
547.53 243.912 li
548.019 249.808 li
548.085 250.61 li
546.325 249.656 li
510.752 230.404 li
510.732 230.393 li
510.731 230.393 li
510.726 230.39 li
476.68 211.963 li
444.021 194.286 li
412.683 177.326 li
382.593 161.04 li
382.576 161.03 li
382.575 161.03 li
382.567 161.026 li
353.672 145.387 li
353.655 145.378 li
353.654 145.377 li
353.646 145.373 li
325.86 130.334 li
325.842 130.325 li
325.841 130.324 li
325.833 130.32 li
299.087 115.844 li
273.302 101.889 li
248.449 88.4378 li
248.439 88.435 li
248.432 88.4286 li
236.743 82.4661 li
236.74 82.4647 li
236.729 82.4591 li
236.725 82.4578 li
236.721 82.455 li
214.819 71.5959 li
214.779 71.5854 li
214.743 71.5631 li
197.486 65.1661 li
197.449 65.1601 li
197.418 65.1446 li
182.907 61.2277 li
182.897 61.2269 li
182.888 61.2226 li
169.39 57.9448 li
169.377 57.9443 li
169.361 57.9376 li
158.67 55.7613 li
158.655 55.7614 li
158.641 55.7562 li
147.976 54.0033 li
147.92 54.0052 li
147.866 53.993 li
137.618 53.765 li
137.592 53.7706 li
137.559 53.766 li
130.802 54.124 li
130.763 54.1341 li
130.722 54.1321 li
121.286 55.6212 li
121.22 55.6457 li
121.153 55.6549 li
112.035 58.7885 li
112.011 58.8026 li
111.945 58.8324 li
111.909 58.8437 li
103.414 63.5584 li
103.41 63.5612 li
103.41 63.5615 li
101.03 64.9002 li
100.982 64.942 li
100.922 64.9728 li
94.1015 70.475 li
94.0673 70.5163 li
94.0127 70.5626 li
94.0029 70.5701 li
88.2266 77.1819 li
88.1929 77.241 li
88.1473 77.2903 li
83.5876 84.7908 li
83.5646 84.8544 li
83.5508 84.8764 li
83.5268 84.9136 li
80.3542 93.0606 li
80.3537 93.062 li
80.3523 93.0656 li
80.3405 93.1329 li
80.3139 93.1965 li
78.604 101.73 li
78.6041 101.785 li
78.5896 101.841 li
78.4332 104.679 li
78.4352 104.694 li
78.4321 104.707 li
78.2394 114.331 li
78.2429 114.351 li
78.2511 114.42 li
78.2491 114.469 li
79.7386 123.894 li
79.7592 123.931 li
79.7734 124.032 li
82.9085 132.951 li
82.9179 132.963 li
82.9223 132.987 li
85.5553 139.433 li
85.5796 139.463 li
85.6003 139.525 li
90.6341 148.352 li
90.6467 148.365 li
90.6566 148.39 li
96.7089 157.762 li
96.7386 157.789 li
96.7647 157.838 li
105.534 168.38 li
105.537 168.381 li
105.539 168.386 li
112.98 177.166 li
113.026 177.2 li
113.037 177.226 li
124.509 188.17 li
124.528 188.178 li
124.555 188.211 li
133.765 195.712 li
133.769 195.713 li
133.772 195.717 li
149.092 207.892 li
149.107 207.897 li
149.127 207.919 li
169.474 222.329 li
169.481 222.331 li
169.487 222.337 li
192.91 238.234 li
217.21 254.726 li
242.442 271.849 li
268.657 289.64 li
295.912 308.138 li
324.271 327.385 li
353.806 347.429 li
384.591 368.322 li
416.702 390.115 li
450.233 412.87 li
494.284 442.767 li
560.311 487.577 li
560.319 487.579 li
560.329 487.59 li
624.544 531.039 li
624.55 531.04 li
624.56 531.05 li
655.644 551.741 li
655.649 551.743 li
655.657 551.75 li
673.378 563.038 li
701.166 580.738 li
738.612 604.591 li
785.454 634.429 li
785.462 634.431 li
785.468 634.437 li
837.895 666.299 li
837.908 666.302 li
837.926 666.317 li
891.12 695.452 li
891.14 695.457 li
891.161 695.472 li
947.888 722.334 li
947.897 722.336 li
947.903 722.34 li
955.381 725.706 li
955.397 725.709 li
955.413 725.72 li
1017.85 750.476 li
1017.87 750.479 li
1017.88 750.486 li
1081.5 772.966 li
1081.51 772.967 li
1081.51 772.971 li
1092.4 776.586 li
1089.42 785.385 li
1089.41 785.45 li
1089.39 785.554 li
1089.38 785.583 li
1089.39 785.637 li
1089.4 785.761 li
1089.41 785.83 li
1092.86 799.469 li
1092.88 799.507 li
1092.9 799.6 li
1093.02 799.731 li
1093.05 799.817 li
1106.87 814.341 li
1106.88 814.345 li
1107.72 815.321 li
1107.78 815.361 li
1107.83 815.424 li
1128.34 831.63 li
1128.42 831.696 li
1148.55 847.702 li
1148.55 847.702 li
1148.55 847.704 li
1169.74 864.581 li
1191.42 881.846 li
1213.6 899.513 li
1236.3 917.592 li
1236.34 917.606 li
1236.42 917.668 li
1256.74 928.735 li
1256.86 928.8 1256.99 928.831 1257.12 928.831 cv
1257.28 928.813 li
1257.29 928.809 li
1257.31 928.807 li
1271.95 925.151 li
1272.13 925.068 li
1272.19 925.051 li
1272.21 925.03 li
1272.25 925 li
1272.27 924.973 li
1272.33 924.911 li
1272.42 924.812 li
1272.48 924.668 li
1272.53 924.543 li
1272.53 924.536 li
1272.54 924.511 li
1272.54 924.51 li
1275.21 910.526 li
1293.59 921.976 li
1293.59 921.977 li
1316.32 936.158 li
1316.35 936.169 li
1316.4 936.203 li
1316.43 936.22 li
1319.83 937.901 li
1319.84 937.903 li
1319.85 937.91 li
1319.85 937.911 li
1319.85 937.912 li
1319.98 937.969 li
1334.39 944.626 li
1334.53 944.691 li
1334.53 944.691 li
1334.53 944.692 li
1334.54 944.693 li
1334.55 944.699 li
1337.92 946.17 li
1338.03 946.215 1338.13 946.235 1338.24 946.235 cv
1338.24 946.235 li
1338.24 946.235 li
1338.35 946.235 1338.47 946.209 1338.58 946.156 cv
1346.75 942.192 li
1346.79 942.16 li
1346.84 942.127 li
1346.88 942.109 li
1346.91 942.067 li
1347.08 941.855 li
1347.12 941.813 li
1350.19 935.109 li
1350.21 935.037 li
1350.23 935.006 li
1352.13 928.615 li
1352.13 928.61 li
1352.13 928.607 li
1354.79 919.267 li
1354.8 919.219 li
1354.81 919.198 li
1357.3 906.059 li
1357.3 906.057 li
1360.04 893.172 li
1360.04 893.172 li
1363.62 878.238 li
1366.63 867.046 li
1366.63 867.025 li
1366.64 866.974 li
1366.65 866.933 li
1366.64 866.834 li
1366.64 866.712 li
1366.64 866.694 li
1366.63 866.663 li
1366.62 866.628 li
1365.35 862.141 li
1365.34 862.133 li
1365.34 862.124 li
1363.68 856.735 li
1363.67 856.714 li
1363.66 856.695 li
1363.63 856.644 li
1363.57 856.529 li
1363.53 856.465 li
1363.51 856.446 li
1363.51 856.445 li
1363.51 856.437 li
1363.5 856.431 li
1363.5 856.429 li
1361.68 854.441 li
1361.66 854.43 li
1361.62 854.381 li
1352.33 846.227 li
1352.32 846.225 li
1352.32 846.217 li
1349.75 844.046 li
1350.19 843.898 li
1350.22 843.883 li
1350.25 843.876 li
1353.48 842.507 li
1353.56 842.45 li
1353.65 842.408 li
1353.65 842.407 li
1353.65 842.405 li
1353.65 842.404 li
1359.17 838.159 li
1359.21 838.113 li
1359.26 838.07 li
1359.27 838.065 li
1365.39 831.348 li
1365.4 831.317 li
1365.44 831.281 li
1371.57 822.85 li
1371.59 822.811 li
1371.61 822.787 li
1377.16 813.371 li
1377.18 813.328 li
1377.19 813.308 li
1381.69 803.807 li
1381.7 803.75 li
1381.72 803.724 li
1384.67 795.046 li
1384.68 795.043 li
1384.69 794.957 li
1384.71 794.925 li
1385.83 788.298 li
1394.65 789.468 li
1394.76 789.475 li
1394.76 789.476 li
1394.78 789.476 li
1402.36 789.252 li
1402.39 789.245 li
1402.53 789.228 li
1420.44 784.719 li
1420.56 784.69 1420.66 784.634 1420.74 784.564 cv
1420.76 784.559 li
1420.77 784.538 li
1420.8 784.507 li
1420.83 784.468 li
1420.93 784.336 li
1420.98 784.196 li
1421.03 784.051 li
1421.03 784.019 li
1421.03 784.014 li
1421.76 774.134 li
1421.75 774.041 li
cp
.137255 .121569 .12549 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.1.0
%%For: (\710\742\740\755 \710\742\740\755\756\742) ()
%%Title: (submarine1-01.eps)
%%CreationDate: 7/9/2018 10:42 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB7&o5e+!5pf9Q@9mMLT,MfBC9ghgkHY6"jJ'OaUsP7PuXIqOZH(i22mk6;p=pO*+\Cmiu0BtIP#/gfslZXbpD8c,]N:lH&U
%0#UCf.&Oid(-_]rgZ%5,F^]HF+R4-Tf.`]MCtgS2SPI>1g[39U..tJkL/*[7r*k=sc$J4F1R+s[`>[7R%`IOh<Au^W]4#eK;OkQg
%rY\eOlp*.9!.Dk+q>$ZaTUa^&_H<IJKYD]9Qh5J.:g@&h0?f=(l*cSSAN(\U#ZWsJ8CKT*AWS",Z&K;&AHdMkl"8W4e[qX'OG<u]
%]9*Y>+rWLX+\2jiP+X$8(PW^rNE'56;dq<ST83.>'D`,b%1/i&CfX&SE!/I96@oJ-F0l#GXoef0_1TZGCtl(HdB7U]bni^hRuLJ)
%kaH$c=d`^Y@RuX.^O=uZFI4O-!A):3)(m1,6C^sSR8]K_.][<?AOSI/3urQ$@K']'Ir9r59qu7-l-sM9DU/(tVO/)9(dGnloS8?2
%h/$FVXY,Q=_D%8!gPK2kl[\F]OJs1$&q!Bhs&+fgdB8jBOC5]W6drIU;VYSRH];OqLP^\KV4F-ab\#_G_F"L8!R"Sr'gkZ"iBo.$
%?PQR_-C:'!oW)o]SVBulW"#YI),4c[,knBW<NP>;+:,b<<fj7Zn$T9\-e'pD6N4f<`tdM3<TjC(]KgnSCGm17=RJ1li`dHtr$7'o
%:,bfp]7D<'K>&[@@5ME;eEmVAebarJK-kmr8dkndTA!,XC8-H4s6Z'KVEAMW4ns$#D>.3=c*I<FD_##5/sr=_Ze2\?0X[b(=lC+0
%6p`DKl%\bGUBk_PG8DWE=KTXl%0E);1IQ\G](dfR[uC;*Uctkq:bc8Y"Ia6-@Fjh3Y@/5V1eXNXUYQ:*Gd_KHNHPU-i3n&Mr;jYM
%^bW*9%i2*HOI[.@$!4u'"'p;)i;4s"=%9Y+9%e$H3c=9ElbMEb0M%D<+,tkX[lOu-5sN<dr(0hXDQdh^B=!qO;!H[`_(]q9UX=+r
%jbdoU&<t,9fl!B=$*ET$V]*_4G2;1*6(gGfP1&c]3YTu!M`e'Cpi1<n:Dri:<G<DSW`:%irfH$nN^hM-,`5%7ojL#Ws5\@s^;_Gk
%is8MnA:Xq*Tc626ao,pqMcJ,$KsoC;bYK!2Rbk@#"M5\sorP=\c'R7"+ic:$Wu<Pm7[P&8VUr!G$s(Ad7:NOZIhP2kVVfP_[>g=Q
%7VX0TEnP7I%58k=$4:e"c7g[?R?FE(J%PaZ\'<f[P6G*R-!?NK=d:j).Ap]^:<ON/;-8O)_CG[%;3;Pq;%sb&VBhFkU+9q(UL[=n
%AQ93IY6q;.K'/n$i7B)><RoSEPS=g;9gd%$)3'3aC)dp/M?$(u,!geJ2/$5nEC#(G<.=jA90pt!UiFLiR3[Cm9+-L_O,JOHLl6qE
%N/N8q*mjAjiW!Y1+b(qEFB[,"A4ZOp[r'>DM31mgSA\'P,YF4F98]Mh!hck6'O==()(?dd1+RE$mrI(>Z,^G"kMLak::$>:4QUZL
%Y6h[$ILgB;o36B`%U=cLn8j&?pT0GUA-T\,+L=>q_)E#]#F[RrDFk9O]t_&sF1C?$lXPr84EKT3O\Ah76#)7(Z9J(0&rQI]o^ONh
%a#DT2S]<nO+)jns\EEEXGBr@kO)_`)Sq!JqMr:SG]_$9pj/O?aR\-nr`u#@C#2$a?0Po6UP"@AhP@cR$",1;HQ:Hrn#bh`D:gm0l
%2T=rtRU[Jii&H9$JWU9J1WcK'o^BP7)4oqMT'&OK!^TanWT\_5?j'Ng"VIV$!A[Q)/n@@Nj@)A!J>J^%&p5o2o>ebmahXo%bZ+jZ
%M2+)&@<PV;P;LJe&,_cFmjTOlI--!`&DI0qdkH"Vp`fgI8W\c;XB$BCV@5"NU,A6G;Hufo+b2QQEReFtVG_^iXYW#=o=CTQ\dZHZ
%JiG(LPcj=d4d0L+>T*g=(=SGa0pl#HjuEl,Sq<B^?n;YD8:kgf0KK\SKon/64Z\N]#ns%bYfIqq,01Z51'cbWaC#qM9*(;#nNa2X
%1eU*E!;(?J"\-^lC#DMhP`#a_UO\FuU'TQ671T+4#T4cp4A:;5dKC;0.Ka<P#[_fW,!=d@_e8a$E'=I'f3f@.?AA7eGl_N3K,J..
%%%$*uR'S'^SI./$6PLi`I.Atl/B=t42@]8JK)(-U_TXMQ!>7qT!#!,!A2$[]j?s5u8V5^t;a?4Ji!a_P5]mdbbr@WAf`-J36>5mL
%fuB$V',O'!k>3GLb9Em"oKcmg*l[=OW%/oUpUCLQi8c%'\<)N0#1+?IcC]S]CWR&)QRjm?@2,&=QjOmaJ/1,/1143UTQq/T"mGLd
%iJSFJDb8c+m2X_0YWF3@pZI2qLJCWo=AjRds-N.()5f`XpqNJDrIt3C0^f@'qH?Q''^$!dC"QMm+jP;sBg@Rp2@to3U$;t:aDg@Q
%#/Ha_$qgU9OVS6>)&EGq8!V_MlqsXQkf?k(F3+cn;K)a!%ot$u\cg2QL;aF)"Y<=-K-Fg*_c"aP,/WVq`QR3M6$i'n"A9\Z/h6N7
%P1\Qe;#t#gj#WX#X4crX-F*HD'DG)<rW74&h`FZmo_(@DeA:la:'E^RY1&^4aaXuS@QK\SO'W!^;oipNbL5>3K9u?0Dr<3>^j[?#
%2%;=9JG[08,Jp8):f?5E8>&u=:]OIhLn-4tA6c?GMET30G03_81"4M_!9Xd$B?3@@9aiLQ7$@uc)#9uc-\7bQ!l_6nG6=9J<&OLc
%W-#&lBg^>4a<?^3$+k()Q+/Y+&(lG#dKM6Ca:WIPOA,K+37!`IOP#/T-m0PKQ/f)9:#pl8EuYIn"R`OL!X^W6Sl;Opa-F/W*"5-M
%+VkE`;Q_O>r30i8MWukAU,l,8O[U<g,_)NU[Y.B-YTaK)r/ecU"^6"41[Ma5r]**8Ob$+4q83RVY=oNi(]nk9GT;qm&S%cGJ_U^q
%E"J@'UMF/O!N1UYJ:KKYLW'oe+N+GW:'_QnKK*k*j+qr_#WO%O8&QG4G=_R9P4q]XF\@HK,r!>HNeo8VRF1+ZMr0eDJ$=745AimJ
%LDF<3&RBhC0@Gq+^FRI=Jg4:^I!J."-uT%E]t4H3`::q3iBT"5$13\i6/a%Q"oKV]s!.q&.jNr.&J^!5^l+9SW/>tpX7^C8,&W\j
%+H\sgT^j@]$N:\h+;YMu5ZCarEruCHGu-&0B:.<Dn(RTh:7*fl#u_&!0]XeWQ&Jf@oS=_TS6Mq1+paceJK5.2X*U2F)8soFcA(IB
%*%C/p+L`TocLl.H&*/2TZ9k"23Zl<1aC(?e_qkrE2ABsUE./#7.>MD^jA(4EJMf!:SHkt'5R;@qKqhccPXS/R;o+*),NBaK0bh]&
%OSkT>bWu*PVo09O)R(eB*;=M^E[;FmA%+(I,CUDq#gkhL44IpVXKeAB^rkhjTd!)LTbJ#0%"_p.hWe0JLAuq]o6je9j+:msFYkit
%/P,(KK_8Q*^1`.rO[5!Q>!s"15]\A5XH5aEY[tc]M?g2HELf>u=^/Pop_4'e;1:K]'6l;+b!hh]AoTARntITb&6TZqrs_I5N1'bj
%:;R?8n6-EC<[!*:$;$[^^tAj*gf9k7+B\i3*G)J^7sS%+*LgtI,(I[U'>s3J&<bONUHb=gC^qD$Q=pM>\<GQ],HW0M:kk?T*h.%`
%]Wq:X?k]-O_%8%E>*<dNgnN5k?pjAtfdgr"VYS(\-fdnI55[Ij++3U'N/gYT1a1G&5QfDd7/O5gq['E0ltAQtF!u`JS2AcG:2Z]f
%5S46+0N+t[<?-0r6c1N(f2)A\Du`?_s5[N"N]@8HUjE1"+,3^m6u.lB83f]!-*A6N\9"Te1^XOU7[un;UIntH/kOk\lpKcM&b..#
%7<&Qb*P;f(o$Y;W+tlOQjFPfg)aX6F@[Bm/ecV_hc%r308^]p<gZ4E?ZXdtU0osC:.S)6ib_*PHL.X\Qdt;AS\M^Z*1tNV2l)G;o
%'C<<GhuICp#<5:rDQ;Ui`B.?'mVgh(^a871+ZVM0$g6X1S4oH>M^)JPn,E0)ErB.O5mR15?;AEFM>&XlkLhjl0uL>=i,Xgucf(:%
%8G)1Cg1:$fk6k[F%^GcKe)GX*5R,Uf32T,uasj78U,m9H/nEQd7>jq#?<T+_n1[NS#IA[HK#8NE,UW6U2hTd&Kdn.Y8o`C<l^E*6
%`UA?MATb4tH1,c6C5+]Qd%]iF3R3qgEr7PVfVa*2WdmXsLSuArLd8c(A7=JjeB7m_n,7VNZD>Ro.9@g7GEF,o!NT?(AL*C>/eX3^
%4pgcc(]Ri!JimdQ:JoN]XuOp>nbFgZ<X+U'@_DP"39.[HhQ?gu%K'F[Sfd7Co7Pm^Sl7""d$HedaTT0C^J=?N,U])bL.:q-T\uV:
%$@bguU>sdm`rFS/cIDZ.RQ*"n^Gsa9KtL_GgE3X,I=\C7ML$GFN3rlhYFEgHke87o<HRpK1KXhM"+,nN8]B*\'j>o%hGXQ8NL(=I
%VF='C'W49KJK3KOPd0mUiPZEt;k+Iq:2)[J7;OK[VBSc2TpPqZ)Q0N)i_m^<6)FIkc:J->7ir(u5BIlpYW,c3C2PL%)3'S1:t337
%#fDE-E(T$:(L^"+s6QUVIe)ALCb\0ZB;"0>RkJAHqdKVtc;KPFR7<*aDA=]+E^leBM]KT/LOY/7i+QQt&V\\6Rf#0c"V)'56R-K-
%Tt6(l<+K1&\:YJ.Xuj`,@KV%J.1VmcMP?=lh9mDb*AY.!,)K09WZ&i*3lEI=#X(_[,(XSsYmQh,EO:m`+=EEW4Tl@T$Ef\R@ho(r
%,t'?C11XeV.!!^Kj<DG*&\siUYa.iPU19fk_d8pnI66N?EW9p;eC?qT'4f#'YghCR!\Jk[nNLga8K!u^_a.:ao%o<]XFa39_Zu%]
%d,nbAPo0_?7Ti%3QH1D)).?P0rH@BhW_O1JN2#6I;b7+g8s4N0GU^.oXH8uPn6\^MN?OB,H+AFTbeH$qnk_+p&"<$\U7(o.m"Da%
%e=?dNc.gLkYl[hP&:B,!6)oXXC4doDU,)WR_c7L:<C7*j8HM(l,LV'ul67]OFph2d8D0,T2>XLGe022d`+cj_U>u9#-&qrnr;5Fp
%Zq(mMLAp)6MKRW.q*4-\F+YrKOn&T';9`+6i*@RV@.fr)Wman:I;0FnHLNXUC1[Wg$^'2!gcHN]1UNd)S1*Gb&I415ac^TWjLS.T
%OXpN'0f"bo1d2't$JK@Bi7Pu)8\AR=M*s23_jmTAPs<72j5?.KH>0\:gM;8)p)#d986dipbR;q+F8SdW>q\Kp(@b6`EYL@t3aXuZ
%OkaGhoMD9VWdQK+2;\gtGKiZra)S4%#?l6\]k,t$D^+>C9"CB[N[_o:SElW<fFi1in5Z-nVFg'9P20"Rn!0b(f3$ob2r]LJP(XA-
%BMo2LTDZL].#ZnV#p1lq;Q&!s*EBA^RIT['VEjpE,WOu^a;`hPeaT9A$pO='P@JN=TUeGg)1:Y-qs!MfFd\oAYIdpZQ@I[62lcN;
%S-CBi.7B\DFH_Y/0-K9Q70+c<Gar='BT0mfA4m+S>gbJ/OJ7RJcrW1s5r'2_:;Y(3&L5[C#>#d%3%;c(`!f;JHS[WIPK$04SaQO<
%4Z^/iVrEr#K$uW<)riphA8iM`jIe^Uma2SBVh&="%3rRbEGrnPgWT<aWdVPVfS046"%RR)7ilaKqB7fE=!&K)qt_HpR*Q;(\IGF`
%#$j(F7gUr'pH:f^Yh5(H&2$^PE1AJ8pcKDh0]8`)e,&]u)RsuBg1WoZZ)FCq+t6$!K)NIo+d]4tK8fLfLE9^tpPf>rfS2Qja"l_r
%gso`NWcujCNU-#qcj"m03B9:29.'Y>>=J/iU=&u1a\Rc?b$U-S'7PlXh/:ssoX\W^&m>B*Xkbl>EJdbs?>>s(N5:5!&&;CkImj<Y
%J"W\qi5ZS*FtjV5cU">N8jC`G7_M<sr^;fJNBfj;.E6r?:qX2m-DkN]Q"i5X2%JWUa9b2W?NKBcCU-P,&V,NVj!2C[c`?o6GQ42-
%11'DDETI2-ojNo>9'tP>X1,+K1]'1X<[e#K#\bmCLaPnEG'iUCYAQ7Vk3'B"[6E],g\?"o@@Roo-`(3mbY6c=lN-*5f&Qi1\;90/
%Vl\QeS/&ZU+(gVrkXQ[19hd_$[CX=S-J(ak#NMM)(kU,cLHR9Ld.7%'YdW6LeUpt<#;MmW))Z%"UG78$n]guE9#EUMO#]G@P@?C>
%XgUFDO0HVM?0F$.ccE=pB%uP'm/XM<W8f'MBD:+KF,rHI*b:-0c-Y+p$[u'fK-)-FYZuY).'Vn-q#JugZQ)T]6FhptAerN`((%<D
%DN[=H@2@"NgBRHDoi'W1I%Oe!5_qV#Z!79cS],WU=Dentc!n4d/2rLK^2Y\OI&C(!&2@)sbJgu0&BtA'@`%.cLiegB+(dZ;2+mS7
%Z`Pau^u4_NkF.`/%0nrMP&C8-iB+RP3R*$FER@dbpI8;c.JB5)N*`Dl)9q5Ul6b8(%NoYc+<%LAfb&<TLhS>ud5D/4*YY`jluKXH
%G!B(<;nU]-0Psb!b3R,q7/%-,n]N*TXH&<FqWuFeHB?o)`>b/f"ZYYll*\](dEE>b?j-.rcW%cr+p2,eJ(>RHDZ6Ir(t1ZS!/UfX
%HZc*Sri9Thc"7NmhH(R6J\gSDg!*:Dp_&!]Ppm/%@Nr\m&:mE6L@LgW;]cN;:`kLP^B9SfpXjnQXDKi,a2*p*CVOa(3P&1NWS]Cp
%:<saJ!jeGKM=h;VgHNpTluGdg"peTPC86.ss(!7JEJ[^-)Fc#<qIgEeg7PJ:6"o1(Rt`%4Uc([Mnca_/n^c'#>MX&3liu-ASgpf9
%$hqibP^D]T\,FR1j1f(&UtO>&A9t089ZN"CY*b$/;sEZP?YJ><5(;`EAuC$*Q64)k:AKjCB'cFC_uS:\H<N,OPY?="o0;in7`r1*
%agPp_*FLu"]:WSBirL4e7[LFQK$:HO33L@T=`kt1-M%qkB&D^K=V)LcYi[9tL1q#G:[E8*C=hiF!$a@P@E;-%9tVDA%a$<Cdlrtu
%]Y<?7A5fYD@c--,CnM$l-@L1>j9HVNQAB6Zi)>"1p)?14+)%'9qH@N`G`5StFFShYag7oB.;]agFFPHa/5Eq<#nhhaRGjS)$OT@o
%Dt1#sTT:IZq72/$.qJ2]OF.Gb=U6-NPHV(i&2?$QLM-]HT2J[afei"TZYgP2jc&%t)&I];!Hna`:>bpuA%";,eS3QnU=h5ih%QP@
%PpWD;5]Zt7%]:N!5qbtU-1pUMg\:5ZK(6l(*iXcOadR5?D:D@qPAaoeQo:!dKcUF^q++(N[XJT0=HgH[Jimg/Q1o\0aF$\\WXhA5
%Y?LU_[bAk)O6Mn2H9KmeV"tqAM,Dj]T5d7P2%#L\,^A>n-%L1.&`n1bMCJ=b\,lMI&_XO\!CY6^(42%t#93AbPkgE]7@"cU$qim(
%(*Zl@,,9#7==M#gPtG*/qBOAZ\>U'WREKHZ&Ob5Z['9p?J-aL3'*$YFUVWo/C&A7@=MVq"NHRR&9JFLU;Vc)V7Y$8,MFP:(@L%/_
%_M:2'aMMUoNBfOLm8o;*)dLT&;e@CS-6b]*IYX+86&:o:oYp/Bas?(]""f^.?gHVGV1Cq8/Xr;"TsRP4=d7oi3/\E&LhSY.;goK.
%J87.kB2J`4ONB_Fnh#f5nN370#suSs/B[<1b3U\%f;@h[T1*2g"(tI4WV;7Y;;^=`8e<2Dc(gm(ZRCA-CXQ;)G<Lj^r!m@:Je0YR
%X8Zc"dS/\hRQuK#"g'N)\X`*2o)]q6S'AnD>u!+;'Ce^c1!UAYX8<:4K4c4^$1n(Ydp:F9^Od`SAiK[IrPGjYp[[E!hD-n9CL>J)
%dS-hJ@)5O?c1K^`Y>'^W9=FpWF4\-m]4Rd/SS>L"<r6fN[@+ApXdlee<h!g2s0Phumg))VjN[O8<,M_=n8GdHVeQ<Q[Z%r7N9&YI
%$G_8H17Bei5+*"NO;QmU+!LJ)cl#"hm^Tp7s3.NtZIWAp4^0jo4TFII32]XR[EXFho%Je3]=c*tQHZYb*<"mA^(X?qe*-(Jma1I^
%Nf18_F>(mOH?"*WbqR9ei)1IOL_.jLV&9qHhs_tW:(,m3ni9;AoHogmXJ-8qi0Y'+_S8bMrh"_enD=BH&Ge8FKo@Ydq9"[MPNEd3
%YBTjA%g(SWSBhZ<U@Cf>`#jqss7.oDl.D_tpa=3S.]R4=71,sn-=&hPm7,:e5j3OF)n!JZ=:q>KlD@Ge"A&7:7cfg2PC\h8Q9Y^@
%_l,_p4rT)/]$:=i(j2(BNs:'=BaA09C1FUo?hB:)hBj.XX'9G.h&n%nWbg_IN65,QaDZ<AiD27me$p"[`OVP._a(OUrFYrAZi/e'
%h#I>p[jY"Hg7@X2cLua#qnKK9hqA"tYSinss*j8m@>rNZ6p&1(P6gADcLuW51p]'uq3'F&mqg<o[cdO!2^a->A!P6NNg[2B?m2"*
%-KeZoE=(G3ZX1-@r1(^:<N1-B+]^uIE!DtSYeo&*e=]Ga([rdK54#P"%09FRY?_@A2CM`,k``+N-f3;"jo#XI;IE,r/$HFQA]SI$
%ZN#4*)o20mdU\Q1-C_]]GEsSFV9+0YS<BhX9s^5f0@<IDmBS3biXa58S)$Ke/1'Ykd2]^#4j0IWj3!nmfhA^^hZDr0I(3Zbk=P`C
%N5)JaY<2#\K7+Zb_&RNb7^m=\iY]3E@m-<UPCV\\qE.\*p7RAYF%0`,I$j-Y6`4K2_<5\8Z6ol(=6_3ql+^C59*@l*^99:M!X%'i
%B=)$e1r$4L9>&I]0=/U?/FbJg]Z_!AZc($<na`ZU6>73uGbJ7WS:?qQ?7%W5SL%UVP'@k:F7I"pio&Q=OE*29RHb4/GC-.ZgKcW*
%V'O58AMd0,1u4Km"M#X_G1jfEcnO^N9a%.udP%'qI^F"`Xl?h'B]9iBb%",ZH8fVA,P1:Yj#Fj^D.Xb8_b$8<j7jX4@esP51,G#U
%Dc!=N2U62JqHc*7I:6Gp[kH!D?Q,8urb(XJb#OFarTEMn2;df#quF3$IH.6rVp-NTqT%7k]I:'"i(^$bBj@AIKSE?ITT=iB-@L/5
%]_8YSjc8"_X.aBr!ik<q>OuKp`rBKVn5!ZjHNjS92Da7`A_FBqmFt'CXM?B9/tmbuV*O4P.,MK#*Qn[2VJ6;s#3@%hMjtV7"s>:L
%0/Z4#.Mra`SD#^o[/[Nr`pC"mDjJG*ApK=aMJ8qOO.grR4@Tl#ApK>lNHD(8c-PqtZTQ7'c-.`"1!='#8KQp,';9Q.5UW_KH[Jk3
%)o\sW5IIU9kKQT3:\is-58KE>5P[.^GYZK&"5F&Y0KNgCD8,\eAhcgr0RuA?g4J)]e*Js;5VW3DoI.*hH!E`pm9J9.(.Y3Fq_A9[
%05oACdFO(9[O(U11KbAa`9`6AGK,&SdEjl1oH$98cS"Au7bIoLc83)%BCthTrGJ2l%T^,W2hItmN&Ejl!ke0(CBsCamI=%.].5>O
%]'6gWBme$pY?W%=WtIYm?G"RbK3b#0Uu:V5P7b0\s7*K^1!c)[C;9J(f.9c;,_to\%X\F(Anhg'"X.KpO*_$R@<U:=1:@fX8*"sF
%oDeia%>F4_DV;C6-STQ&qki?TSBdO6i[J^XOblTOlhd7,RDj48/ANg&qk('\=Yr'qk%<#r+>pK=DALLq2l!n`DZ=pAk.]gE0I@k!
%C5")Gk5nI<$g2-\gantbKl[?,begnn3;7j<3Uo1bF+K.8RW'n!IY3/'(_O*9DDFPiCYLIAg-uW0ptau@n+P1]!!1D)^5ud_+1[cp
%.l!.ecKp#(ftA"_rT8ZLTWVlCA5'Aa.bDM!,O[)=.+F5c/J00L]4D\YmZ3>mWSL>D7m0D/Rc9<"('D:2IH&jX5WYcZ).eof:$!l$
%BD9?gP+32sE$jF'khs&a;r:!6r>/^ll$cuGJD3<Pq__;q'>MjT8<bf1@pJU!B/S%GmWJA8nCU67`)#<!KlPKVp^LH<U(PJ+lbab[
%<<5jXFF*>[;)EogeW2m%@/grZ_;D^`l/jEK-3'6g:8@l6%@MA6(,.o<_]>5(j9)=oj);!G$adV3@ZH?fCjO*?<VEV:T6(J<#fjb>
%ACl:l5d3"'VP\bk]t*V"n'!nHM=q@loWmG*@T+ZJ!^;D1oNs2^Ba+p-hH--'.)Hkg(P9Hs<G#"RbUNCB:=795qWS+(d5=&::=8EY
%nq?2o^Z7;sS=j#jq\M:S[8Ap_aZrDW'!D;\88ZkjINK$9ACE6tEgT$/prTBVLaf<_d?4XYjA*Eh1tl!>g+WWBVI6F*j**S<>dq:I
%_\sCZcA^cd/$t^aS.$cVdZ%`J)CF9"IPE=?)9BoY-o9U;rO-\a1WZnh%8NqPo4rHgoZY?/*Q:uM`&G?HkBjmBr&\7>4+#T6Zs?8q
%l/b',m'BF^`C(.;RL=(/_c5i=2T3rtm#qhQS6GhFaRX?_VdX.2][>Gcg78b7UeS+[^s=L$I'hHO>>9Jun*%AinaX;b+e/<i11C93
%nqk+,,PE-qanU!]VQl5(p)eO2FG_`>pa=NH"a_QQmYK[8r6L4$$"tgi8R27!h?H*uLBtUP2\RiZClm6i:Sg;CT;V`c'2I:3RX0bc
%].**9ZJ!N*m4m`f->eLL7Nok>:.9>h$O,1m^]\!J9gA>[O'.r_HHkHg<2u)L,\1mT`.Yk:R-i/:CtrL>IXbpp*:)Pp*9*V]T(?fo
%fdR/OPJRIFr0Pakca"UUm<DB[+&/PK]UnaHoeC9+n<#Z3?CsYGs&<<;7kB/7&^+N<JhOh@Bi-s"RHJ[ujLu$/_aFWR5.-k_BEd9J
%'Vk/n=g=Fp?[i%B[.TLGW8on>h9DXoW]M=O7nrm,-N8aqA`Xs;C;>.B"I`(or)f>,<hiYR>pLb=LAl2<hk5""+NO`a':2[$iZLjM
%9<uX$&%j+/,(,Jt<>8I._"'6.+pcAsU4a\[.&`gY%5m/cl+-V@^)b(g=+L5e@[YS7kl-\NQ%"K10@8K?cQsDN5/*!NlY!S^(uuq7
%F.Qs&]%QJ>KXbh!;'Uu-a'rLW8`B1EL>sE+O/i[>$$;snpD6Z@dr",u-L_KWEUu-KBE&LWs->5Hj5%j8^9idsr9nlDi!iMX=SmBg
%V7(pInGc_fs3VV*0XU(\dUT?$]W]H80lX$dmbZ8162?9[&'GF^R/>8ZfQG]ns77n]!U-I'kb*(1fP?#`XrCYSbMr-)"$k$2II/g?
%MpG(1rPCDV+d`eh/015AmZjh7!8V:KL/]4rh#Z3Zn,KG#ISqhoeF;JhLLtYuH"Eu.H2b]pG7pP%:d@K7HlA3[UZqE#SU+<OX<r6X
%fB3A^!>ek,1V9QP-NVl]8,nuDr6L4:651Gnd(3MaR@i>aKLb$pr_0$\pPemo;d"JX2V/^:_?=$[6"Y?-PQ,d%Yjk5&[=E3D6c]k1
%`EoHX2^UfgrDF6`kSVCo6l$OP9lN]&?`]aPk6I7NfAl[59=\"#ErtEL$8d%+DABpI)Aa-FF$/QH,R8Yi/fo]?p>,8&`_#O[U]l)Y
%0-5i9?+f2F0#e4WkL=p+=I>%T;J:ZdQhclC:JYuj&cA"-RR#aUD>PQ($?d55$P]8*[B7U73Cl9"pQ[)FNPPCQUg<NFMC6<&!:r)\
%j(OfcUBD(X:Df&eY6QjjU,eH'1?ZP%eQF'@`;P&52=2O8X4Nodba$lL^g_q'?";nImk"Cf11;p:@ICP*ddmXjXm*U3?Lo6],J!9\
%AXlbTP"VKh*JE<dRdH3mldi28)<u=uG0O;!IVd,]D)Ak*aJ`<tK.(aAVbf!]#AV=nG71k,/qrdPoH>hdBq+O4I#?^&j''``ejXr4
%/Ye:Hr.apH;Q++(D%=YAqt;Fii'YQs6I8DrpOJ4jO3k0-LKSiPs.Jf?-&95eUJr/m%5dR7?O`c/)q8YoQL2ltcS0H#V3Vi<(a4jL
%mE(N7&CPl14*4nQ\n6:+_(>>NK;Qc>I<N^@37D1)Y@0c6L)f.]eXCZd#3`j=]@V@iX+jeI$X2n!NF(F&,s/CqX()7#)1nL]Vg^&&
%,`95o=r^Y[G8K8:\=Vo3MY\W]oSnEeG_L?]SL'd]RXZ0F>i,\[R#l0S*OG^")9N'96g9ca2$t+^]QZCBUUqsZLn8oE7ppo"\=INY
%QeQQ44rX0Pfr;QWJu9l9@0521rNkNa39t]k0Z0MaEJ3`8fT(r'V.WcO:tBO[V8S^!cJ'q#9"FslXO$f/MpBXqFh;&20?dJ#hAJ?i
%^K@s""gL9Wq8%_M4Tdp0r,+"^F^!(dfRK:U(.tG7;geQ_`OaS$R6\Ug?Qa,!(fk:6eei?NEb9aWkQ:@9m@mHJ'A1,,_jq8R)e_+`
%#C7Jps7\X5Yu0+?R@D.OO.X%5?HAgFYD&@j$/r"Wd$_cV[j,RfBX^WHBaBipoi&KWs#X7tNc[Q`!SZiV.3#DF"f"p=df3(T=D'W7
%_^&u=koJu?,9A[Z\Ydam&;iaf%=cTR0UTbTBa=ljRu>R\>k`WaFjLD:'0"lSKT7ta,BgZkG_re]H"seFXn=u%MWaRX5/;$#)PHK`
%c/>@1Ps0&MjR53)Ak8+.1)020IM!4[f3-_*(`*<F49fg(nZX3VEFpJ.?ZaDK_Qk)QPN$`SItD*Pm8fm"'(!&F#To+ni0,S-E<eeH
%?r<.TKc_JO%J&0n+_ms)F,6^^'?<E$NQ1gbEMP>P^#u"F2i.3'"u$s=gHIlK[0n***NRW\]+Ea'9Y<\!1g9a[9oNeQXh#AQdHD:G
%DSt!P_rh,1pWpm,P3_L[UX'5cMGggN0^W0,&q34R6?R,YIPpmjaR)m\DHgM:N?P0G&@2e2XD56Ep5JE91jmM_M!siIj%B5Z$)C,;
%D?\4B7)MgL\?11:pr=bHG)EDJn](m7MBEY'SI]9LOLjAT\Sg_H.Ug3Z7OnI#.,m`"Zmq&=*5Y?&nfOlBK]]u$I?X_A1nqR0$f_=o
%OSH!/op/FE'8J%uKF?KT"Vq3OB_YC3a>s&)WS"WamJAu8(2-dM=ggP3$i0;rUYYJ$?jIX@3-+\\i"1<M1gCAQ"88,aBdA#BB\,9N
%^#($I+)E<2B9@g\I%a9\Fp1/)O*B5k-o\d.;Z.7L7Z^g@ZJGFTJK_[$YMcQ7IK[d,k^06ad>8YjjKa3X3Q*l;c$lbm!3p6=%-/7S
%ef5M<f5]l,lQO&2DZVlPk!sea=CubB\E%'jpTIW15Bu^="TrH*p,bKB*._:=LH5L!g*L*D@+]RGLa69u#qB&GO*a=[,b.Toe#pSB
%m8hUE^,/&WCUh('7m__\9"ba_'#<_X(^e%+d9VSZpEsRpl8<t:cDZO#gA&UeBU@GD!*0)pQ$^d8LPd*^)9o&7rC@`f[V4UbMX1R"
%IMre4)h-+HV/ro.$lu-B'!"W&N/P$;iiNE0BRW0`fJER@MO^d1LF+"K6m@)l>BRig&S#r[MiAgdi$-eOggmg@LFn-;g_W88Eb1(<
%qeiYDYR5g'%opGoUZlnph(I\$K5]e=B"H>D=3[]^o&V2^MnMW-h+g-D@Yr6?r]CP7NUCF]D(n!;Ner)^3%i5p!dGU^Y(naQ$RP'[
%R50HHWEChBk*rc/brO8aBD%s(2ujK1cY1n%Ui"glIOeqdEVbPV]FdP13I.,jEfe"`!gKu[)['?Z9(utiE/Q009M<cDg-o@(m2bU4
%c!':"mSEJKjZN\mHV%Us6ZSa`=!U_3*6],jiLUK*#!Z`9)bOaa?f2^:ret-Yc%,^9aIb8i+)_;&#Z<pRd2%K_;^k1l'aPN[YA:aa
%p*$1E]f^AeqTGsQc$%e4"Phc2G5L*2)^Q3si^>"_KF]QLrq%J8(*Gj;jn*csn?=/A(nGRXF2f<a8[%!Y@'6&RBLf,TF!f$mRR7oM
%Zpm<o4%r.Jc!%g0"_HEZAV19o%[sd:3fQ=rESSg&!=lMrVX*$@BI17j][ATX?(_JPDKUdapZigGCS<QTPCN8HZJ)c[rFiq4Qh@09
%d&Z8+#7$-b"3i.iXN7-?F1-04h7VTJ:)Gp*L]#S'/@jNlCK*5Bc1#-g]XG,9ZAa$@6+YiI9Cj+7Q[@I7_Tp0k_t(oe]2t4QC$nAl
%A-HD5@647c?<LbRFq[[Ae_SKX<bJm_`2uBc]8>QegVGr;-7euVa1IgmR7g[egI47H?`q'-laV$E*Qi\?EC7Iplft[78`;;1VD[`#
%%a8t&)Vp_AHPp*k\5'chQ`m)%^!%H3L:4N5X(D+lr;K"*VrCdQHhHE94RR+<169$dSTlBZY:]H'.sn*JFG'CSH$MU>l/fs$3Eb7A
%he\O@eS_B:hm%SLH!/RRm.&iuk0ENTBa=q!8Ng(FD"tC0VB;$4_TA29\tJ.oo1^ur)l(o8DUd:'BJEd,cW="EiAn0B/b2Q^jQYAk
%F>pUTR7Wg[ea9ETq.cX+1hu6<'ht$UX/'Ns=Z>EM[ICJ14WTiOou3K`=?HB+duJKBDhrqbDW7nC6T7p&l>]m@(7,ufXcp]7gj%JW
%A9kjek-]C&J;r,<=LZDHIb;14cH48,I*FID%4ei(^a-66>:Zs91Kg'N%77u"n`"HO?uu<.]r$\NE?>):?CKc;;ta.3o;ZoI_%l)S
%EP'uM73H;K>+J14E\C]kk=rmpm:7dm`Me;nQ&ZaUEW/@52`@!XiTOPdFX*S%So?1s"hJ+LEsDdG'&CiLdSH@akp(eP>"cVlf!nrP
%!$q>oM/I70f/S2VZ:,_DhV(Yf?;I3_Cq:jGp<Jhqdg]\2&)ABkH:)(A[Or,W.:AM[:?p/mh7D:m&YqMQ[A`3[f;N"^5C,sA`puGo
%.U8Q`md&3R>/"2,C>"=#M3d=L,QaG4GWQG$8pBNhQ^s_k,pL!MdeZr7>#X_Vp:`=s\$fVgV+[2Pd&mt;DU0]5aXj-OTpt[1)neiN
%2i!gWG.W&LCn+c!i)rrGX"D-rY-(3W[e_i%c$n+>XERc8-5SNCh'A_!]p4O_B9UQ5\,lWr0c"J:>:S:;M0sMBb9(nSn$tG4Rm,Cb
%Z[^F6,?Q#O[(!QA%C3!XTphC7V,ejAPqMLQ"_MgU2r!^W`lr<HglW/.\El33e".(Q/9@;cQOI''7reLc<Apck+LA*/hASo<fi.Ge
%P:@Y(%!tr%AQ#AE/_6^bk$]oGQaX'1`hi+nem3;\5JK'0#j;K4@@l_1[7(c*3o<?JL1eXJfCo+3%cS5^dopt!2-3W)BL4[!i(;o.
%!hPY,Yp?D3A+s+Y14QOsd?QCEQ5[!)0-Ws.:81sJGDAqsPm>ZM4T)d8]Xl^C/iC#kbFuXfD67>>"6JWm8^!aYQ//M=JWWMSk;Uc4
%As>kO\/]4ZfBcEgZQsDC^r5usFKtPJjRds=9&1V)HKfnS(j+ljZ?B)`XnqS5NI=WWbCY+=?&`Vi\%*i-j4!3%_XhYO?91_"^ZF-4
%'=,3FQaPqQ5*KrJaZN)1<D3ZHi2-fR9.UMLlA,F,W:a:7?hIDQX*]#9/RR977\3u)'#.S*DJr*/r`..Dm5@n/F^@DQKb6p`5<@MZ
%AN&"H"TO@YWN7uaIf<l%0j-_Oib6'o]nIpd44^F9HW=17Zhl*dCuOVVj-RUjBeH^\P[aAba1LQa2Fom@`L)@=*Hl9G[H#-4Tpu$R
%";Si$f-Je+.9mO9Q#aq#3Vmk+=*K!^+]smaV/=4-Z5D%D\ECJ))PLsk%?9ih7!JN#,-4_H+jphbYeQ0'GPKp1N<D^:_o^mmiB\T$
%THT:'##S!+7`.P$as1!i\)qgcgDJua)YC7?nQ1K[W6&:/6ZJq*q@s[Lj)L8*UX9ZC2CjW*QO,[r;R`,i5;h:+DLXX\JL=r8-D6iZ
%aWQi[^V%Q@+dc:.*8/2NH!bPiDV'6l+J>5'$/HXLGTTZg))V?RdRAKT^/@NA.NSV$"!JbuFF!F4.(PS2Oo3oW[,Mh]E+I.e)Bk^^
%j6OLDKl1-RD@KG-Z=TfGNLg(-UqF;6f7@8!\a^H.:N$$+G2![:N/X-t%9YFmGDKC'N=\s`e7:6dEP"Nim2O!!6A)h/6icc*D1$\t
%2T3PEC\2DZM!'FHD:@kQO7GV8fZ4s07&Ibr<L0fIAPhQn4>helf$l=pPp:6-O'2YZ6d&gW2)Diq>D$he(AFDO/`MZKo2p>%Mjp-t
%DLQ^e_.:GiTRs61PuqRPGZJIVACgE=)C+d6f6LCG*fl,e@LJd^U=M,DR5dE=]q`:aO%hg-g-mf\8sS,b%q,;gp-"ls-gm"WUhKmP
%ZZ4.Q(0Jn`XhJ\?q;&+5Q+_;3e1U.7?Yh"mISJDZL*g3`5Ao\?>N(9e0MY@W0/#0X@;R)jcf(0Q$5#l/D1GYonAZd_(#<+h?];;X
%cp7+FRhW$9KH#/P9+jY,[<ON*fVlqWgSMnB8"Wl]93c5qB#(Hj>\ZqP$&K<D!3UnQf2tY[a=Hj1`,-]*;qNKUC+j*=:]O,$j5\[b
%N#jDgH$hr(!N3>T&F9R[o[)CkMdS2OU^,_c_-Y@W(P;o5IB;.Pd#X@<1.Y!4J>JmsG4q6,oHOt3Rtk9)"a?g=8?,Q^GGslcERt:;
%;/><Vkgp&]7^?"K0,JDG*C(`u,(`ZHLMs-ErVDcq7R0Y:Zr5HO'SMk%aijR)]@fk'>>JdOnW&NFn%HXZ8RpDq>SVC/Up&\Bn%`l)
%C])WFof<!$?=Mu!YE3=UNs[I8@PMc]qFWG'M3hbdH'Mj]C?iSJJ_ht,[T7E5.J/c3]6;j63t(.)%Wc^kUoB3GR/;Ldo@kq(S6n-^
%WbR,=T^9,HkL#hNj3;9a0B5IPdHqpTJnir'Y76_D3R`"qV-!0O\(]X*AQZo=h-=/d^Y`5ZE@/VQ94d\3::8QgCrSb'15%,h\CbM%
%,]VEaB/?@XTA;@[CMrU$A4fF,kTTBf+D78e=6DC(B((FX<#^_H\0;`M&!Q20>qhVSNDl9f6'H8:R_-FgLOUFTP[b*3fS5qXd-EV5
%,Ngd5T=V[/)_[Ii1jsMQn#69"mbZdrMk+!2g9]/m+#8W9[hK_jn*+R*;s3G,cLPL*8R'UNJsdQ)2em0@]\B'bn[B9Q)5FR0B,*X9
%a[!pr9L!?s^3mYRI3V&$(e"Q=$C7EZK==iDH2LoY1(V!EJ!2;(:q?=$S<p>3394O!"7>rOEU<Z+Z]p3S![s"c:-,s9Ps(TOCHX&;
%G-;[m>p=l)8,5)l4i=JDg&7s/KTZSs`7Om,Hmbdpm&eTB<Y<Ni5.?BU5efB)B(Rr0]"olTdnJg\g\%&?ldEAj"u)V&C[E;fI7V+D
%XY0JBl>MRDD\Ah?FlOe^%R@&:D8/63W6o_W4L0[h%gGu_CbU5\\"mZ&ek\"O=]^n6^A`,P-`om`&CoULIb6YN=nP1.^JNV>\6ar8
%?a$PGnma!*F'sfTOZ$9agG-)@*_?5JTk)W+r:9-7iNIm3EX]'4SE0=UgYK/aFHgE8C+-N![Tp"+,47mKBd&ggSmQeq\^\Rl]cQn>
%pdHX?]5d[No@Z2^?d`2VRA(!s$:CgLp6J@I6/9b4H>7qYdJGM-De<-r\rT"<MrtYK2H!+H.[>V*GJdQk4kPJ_`">,mVdWOjh/&+i
%+t2I-h9-?D2-F8sY9Q!e$N/sT&\+5EJ`-0*;@keD*%g(tS+j4Ap+N./$S@spFCG-N2+0^FblmjuN&":3453:Jm3[uJTA/S`)`G)>
%fhFS8AtcW"rI,g;'p+aJe*a(I^/+)EI,9"-ksR"%dR_-k.WmF+8+H58OisII_'_d64,@DrN+GcsgPK^YFX-9E2g_OQe.q;[j]#b@
%M`$S*FUg78YQJnrhs0=o3B)Vfr9e/Jgqpe@=mZR\>I@gK*kZXsJ*4Tfr\;Z;3MJjidsENpF`XrhgYLY&l-Km<Z\4LU.i.Q#j5m*4
%3ESpdAQS:Tf6^]o7*($+[JQXG8i:UP@P8Z@2d&_^WReFu?B`nI,\^YYp0P/%lf?/Q)^$p-pLs7rP)Zeb0c7%Bs6FUb"YoC`Mc1Hi
%g]XC?h5E>4[3+/:3kDT/*%K[u8bq,nIVZ`>X+Y]SG)Bm=YKK('.C:S]R\M'gQeNl<b2-TRQ1n"hee,[<*8L""dd#>O-QLf!Aa7Ur
%9=_1uk1]4bRTb-,Ds9cIjkB^bK>7p%%CVkk/!cL7hgWpm]mPn;E7-b1/f(qLAGro8F(\M#EqS72m7aW1WK[*?R&Q?`iVaD!>=31J
%%4bK/W.7:/IjKZdcs>MagoBIE($m?s_VG!^qYFf/+=m>@!Zr)RWmfe#K<WhmMlN=RmUrm7Hg=fJ%h]&Y]B."fd#H'N[.BI9N%?Lq
%_.dGGUkSUGT1NaXPtYp?+o)nMiuL]T^C)n!>4WTn:hD3BCO>kh6oPCP8bR\C1<mucMeuU\F%_:7=\FBo;1@AJc`d/5-LO)>TH0a_
%rR&3I+54u]MO"pIpI;NpeCAU2WC*eu^\X8LbS3-)Q7S2J0.?a;!O0f8)cFF#fpO6pmp'^K0?9RYd:8coXOu^;+'I,4+@t)le3A4>
%/0V>(:?s49*9Y";F"QhbFu]BTM<P6M2[_%^W9`U.e!tTq\pag/Yr[qn-WY%Qf6)jLJ$+APlaoJq\$C./j8:'`ju;CgA`tWXl(;\>
%j>i9N8:Ve'70?.rIpQ&_luJ^#'s@@U$=/!G\uF$Ad<,U$il1$5&-ESuV6D_1m+<<sU6J6A>U^b?"VHuMd`kjr2e('<8)l1Qp/EX\
%oY\"g3Z8OilOiX].SPcF$uC>&p:cmIT@;s:4pQM?[?=j<(>p=;aM>_=)^eM^?H_LJcTNM4f=k@69:_s+/'6L:F9.*`b:('4fr&b0
%X"_]oZDO]DUl`9lUJ6t$_lp42kUD5Rblc1j-mtkTZ.HC6UUBiFm82u3Wma*$0^i4mMj\rC=`;qb^N(s1=3[Y0JS!e;P?j&`BkPVM
%l'NaNA=#fu#e)O,q?6*QdSD#e]DMD^e>_<86ae2,3*OZNoSg5#\@];DM@XfMr\+kK3iRW>N9P"uXhLEs(BIK?\YWRgf9`oeoF5"h
%.%PST_j-JqhMKh.E,,o^jH=T`@.Dntcs$enr[.D?\!L`Jj3bpQXcD^Z<Xt(Xh+m$C%dXZ)#l5t&nh3I7093>XieHfjS:BraOm:ZK
%/#"l0\^l,3V!YYAoUmOPQ'eVe*5bKN<ej/50HJNbeuh-5j"h#rR)bG]/(pD=XbE[?QVH6`Q&>AHc</=<lS1<4GB7uWeB@%2UmKLT
%.&Tjp?KU@S=%0#JQ>tIYCG<mf8U=ms*;DM(9P0XU)PAtIF.gWaf>+E0's1W;G]$/]P>>F.P:H%j^9\eI1X\ar[%-p@,<G48dB>S[
%!lQ7KEo(;u>2+Hg#0In:I=X7bo?0"9N%Lp%0q5'm?V2,mDfU+:mBGoWep7q`L8-"tG,WM/9=([3X55TM`I2BNW%X;<B/NiAcAqT-
%j:L,k:2kGO.)_t"3hK%]DpA04EG`JUlfhIn;mib"dnTKJ_O]=r*t8AK7CkUnIjGjSJ"1d$B\YsE9T+!+G.K(j`8jK8@`clIoB?(i
%2pqQHYkAn$d]m#QOqb(pQqmjdVmQkFc-E?]G%BsTW\RYk)Jl_JW,Wb[h+AA>C0R8Y+)"3ZWZT.,C,FTB6+[TqkGd`a#u"ekFfj>#
%H):P>Q)=tpGAFXJ"b"4qKT[4rl!eSVo&;!7lbBXh3s?>l4u1PGWc<'iGO"VhH#s?7$0oj!Da9ik\u%?/_HCgZ+$$\V*q[?hRIQ8s
%2ZEW=3&o[-O>^u/$UB].p'AI45/-A,JYT7*OJs?U.KVaq`-epa)tT,A:,7[kF#8:X<FPPhf3g2lOTUk$DM)/b\6Nc#W0ccG"grC,
%L9^+R-l@1QkAjsps0qBdrp)deVrRYW!hD&N\Nd%EHhcC.h%'CIB<6f\:Ucu1M-3"5Ht#$Oh>X`PDWX#G:YfahqiB'p>]Zq.gK*@Q
%B\0Eccc?S<*9%%"6EX'Sg!,]1Iu&0u(i^"P_QH<KF3WE]X8)\bLJMZUIeI0Z;hn]Cr52TEkX,=[q;gq9RC:qug>,!\G4!q/FQOg*
%n>.?Yr%(ZWOK+@R.n^q*7i]j%(\*H_n_q_KdKdIY=0na9B>T\1B'Efo81i>Rd5COG?DGk(XSPEtFubiOH1/E7Ngc#E@J3uM9[&@+
%s1qT.r/;sf2uP[p%"1IdWK?E\d+$domKJcI+:NcQ]VX]Lg9@LLS4Y7.bbEX3WQFYmdC^A?4'k.hN^J<+g5ArB=*+.%LHhgUr5+ZD
%f]//FH@sR/>%L;*;`>fE46G,0`/ijE-b'&5T^D@*TKZ6V=n7C"6*ghhrbM@ibQtfCUtMThps^)"%=:]fKFGOmqd5hQ]_h3L8+Z1S
%jeERFG/<A`)a@$jZ!nl<bRW5r+&gn..,PX5d=A3Zr[AJ,nP@Ei5maF?.U*uYFr1(bSW?cD5I94KmSDHfn-Ss.,FnpK!IcDW48?"<
%&P),b+La=Y3oNF@j$uda>bE5%/dpZ_d.c2kBGkinJ-q7)r9R9N#91;qs+!=G$(4X%j1s^EbPFiF$M,&8b9#qLbn.SA-3R8)?GOno
%rE2"IToSXJOp%Nt6G@=?f5j&\Ut.k%#Q<jL"63XG((YsDJ/X/l4/?1i_a!KoW)\VQ+:0Au:XBIf#&1GR=NurX,kXJf2g[+Z*P2b;
%JL'm7'f8lH6Pb+dcj8/2;XXk%kfmeK5]%0klh$'71uJJ#^U5OcY;+H]m122/K2LB7Da7>Ne8*X^.pM#.Q\XVT(>DmUPNUBM`<7^N
%g+6K3k+;ZdS@m+`qX>Y$=3V30HhFAmP4WXTprL2PGHfUQ5B/^fbR+,&D.)<2kb.+M7^M/=@J:B!#WpgSabO4mn<$fG:2p`Vp#'VP
%\UA4]I;9s"Q:oA6OULn7e+XP.e00,ujT_5@*ZkcF_s*b]4\S%pDn!3$IJmth9k94%p/WqM5++Xt';sf.qjIgE$2YON)eZcge]OCE
%r2lLFp8XOW^#R]$J,^N!7pbh,G]e9a**tWn)&Yk*:7qLPrBWANDRY%C^qtk\2Yrk446C\\Y]pZXbUIn\?#u'cBW6k#`8.K7[g7@`
%?H-@$0?&Q2oJM37-@$oBK>*ohjSW;'"+;c\YF9LW\)>0H*,9k";mNT<p_;CJ?Vq#DD`Ou&_3\/T20Z=7=?GX'e(Q7NSk`FZr&X\3
%LFVTZMc^3J`)uqQ-=sXCd+:q_23r^EITo)[%/<=-P?bNB`a9$0.Z@(7)]h<m<IWa">Ip#%eT;t\b[i^*SegLMG?4P#H7Z,Yh`?[`
%FE3WKI]kl2$O[pJk[BE=rM[b$@BO$fU)Y\TJZ(IKY&a@>J&:FXpD_?"'moKFhb1)*p9#Y]=qrJ.]=m7QiE1-6g=VEHErsn>J+,k$
%.D.4\.9s"2&YSUEKf3m_ILbm/qM^!(3ku8WeE*GQJCc=WH#<^YdFg>REcBtH=N3[k4O<CCr536=h+QV]?"b%NSY]kCI9s]6>)?>;
%Stc()D(E;1hlQ5l+/G66D54JHqfZa$I1kX!MiPC-Q@1;4/_/^bL0a%T2DYSNP&sYkNstGp7+3O(/D?ASUZpg_WPgI^MLYZ>?9:7V
%8%6*IR<#9P\3V5'W0GZ0OQ=F!FrY(qjRc_<PJfsEerRsN6#PJaQNQ8.8K;jGcdDu/Xf!2qcBhs'?_b`1H@Cp]b'8DP\'?AeiaST7
%\YVKaKedk$#^mfL>-8[E7[%Ph]Vi%%(j]_s5SMGJ#@:2tS88^2/=k2'YqZ1uSr^+\nGIU;&Y:N?^P9Z&[/e(u:5-SILKuab3BCT2
%e]54>jRhRd]Xjf>@UUXj$Rg,iXurFso9g=t@K)RqA+f&'-W3gg:GF-UiMH&!dc3fAISE$906#<*GYs2q]X2g9cFemu2jh;Jb"hn!
%*(f>[nENjp*fci<-,XM":KQN-6i&Y[0>o'nonp-lAfB@o0\_`70L+H##kP`&.4d)g*epN!q5:I@5.AGPmKjt91W"Tcj"gNH:)&V"
%R_i9%f5c+_qsZ/LF1#!Sml&j434Z;oLK!s=cf+LoHQep$^?p[L(L%F/K<s-VpaF_B_T0[UF80i))@:&CUkA/^6*nG=K+fDUakU-U
%YBmBni>[+q*PQmW6:WrN%l]hqq!#Hj&:V`ZCZ3.\74qiVBe>"]V=!;^eMb"tg(L_6DJ\+BL$c5A?MLXIr>+h(EVjh9"/@e6hb'Ka
%/LBSHk#SK@QZLR(%Pnpe/AB=_-UqR*B29Gmc(+R?EB'kd0!EJF2OY.tgWRV!gi!#_D(\i%aN\:fNeFrqa+O6Dn\b@Zgf`l0R(K;h
%2s2g*=8BC2"r_g7l>q$m\a]2qT`JGc'*m<_FU8L6k$*mfXfQPn]'1hS9(R,7p;6`jYZ%*R=G?):=AISBBDGbC?<lKbo1Hpab\t3@
%b4E4]YBTU7l/C=nIZDOo+(*X.k-GT]_L2?*.lMl=+'G1b<*OG87b28!S!@5grfoQkKl6%B(TH\IB1]-Tban-c(REZNQ%eGN??Lfj
%*5*t\iQK5mqXFEkY^P".0;N]5H"!>s@LFR2CN8<BXg>ES*T,LRGZ_`'/f5Q!pC$)HUZt25V:/X^FnamRiC"2>A$NOcF*bJ9m4COR
%ZDU05;<hoD`Qcl.mDU>Lc7SHac`;sO7pD+pS/gEl]UeBF/3_U"Di:Gn93Q^kI`X4Nb/M@u\7>k<bI,do;LGIk=q]o,`6q,@]jKL$
%1mFbBg68\"Q;2=4c)(?dg=F^.q-ILO?n>`c@Z'nQ:&R,ee;HbuQ^9bbZ/q@`I^:S14iWg%kD=uUjH2#F+.VFbbLq[<S`OX&V7$6N
%X.Cl/V;(3Sj7qPX\QdhE6/$:'HRl`A0<7#^Ot(=MCqV=SQ#n?mZZ6+.E[BVe/Zh,t(r_cg@I&07Sn+X^DXqHnZCEb0OnD[1)j-2B
%[j*t1STn]6:%(KUnQIA^F-sP!]\)2<Lp`dDh*g,bMR^6r^I;5a9DA%Yd\HfM]!F'><qlCnF7jq&2HFa5o4bU/2]c"8f&Q^Df7(Gp
%7O",<.&Y_DdDZ#h+f`:2jlkrt?B8EbgpEir>\>efHD8?Qh73o8[!$<JGs8dYAI_Je2IlIZ>.Tp&f$9/Dq6ett/AG55iR;S%6L?fl
%f?DiUZ,Q*D9\tS>1%"W#3d+IUgT`:!JWIK,>bArLnV_.`=1Mi#dH(6t>ZrW,j1EhWl6^t%[;m;&3o4+t)b67lnbQ\#^-6b^Dm%,5
%/dgo:BjP%?p%G$/cSiB4qVC8ldlN;[\GheB.PNA'g*X^EcI\F(dE""sh<[7F<RJ"<_Ds8):$@sM4BOn]W%<96=_G3aOXb]c0IQ4`
%/TY`Z:"a?(5C:@$^0)ApD(S8gD*)%dN`&Z^gs'S]O"6VYR<q#e?fiSZY/s='jFpBd0:.&e:*/telG>1RH<a=#\a)$U\e3N*WMm&/
%.5)!_\'[4pAp'dtR(!GDTu/O*`+X"q/#q4lS@FnX/W,n\B+_BcX"`Pfg8Z^+XsS?<KmhX@1<K3ZPeY:&98347?$]FfQfQ[%6'Bbh
%#sZeEpN1L%?YsjA\^\&hj\?+"S!10oATN@9V&Z=pJo\>k3*!&Th,eauCmS'\o-gXdQ`aNWH+LSd^6f;4ns.J-NE,<<Ht+BW(C'Q?
%ZaXpi<a-MDILD\W9.V(5m=^STb9V1X\Wb,#O2m+*p#0qcCG=A0bf[T.\XRoQ2RCrn_5<ng6oNrFG;!1*S_MZFp1c%^F_Xm6>L-@Y
%7pE)_Ol'L"4)/\Pl%R1Fe"bHGmH;(p,Qc^PX0o;JMkt/MgSaGZS[6meG/q\*kr\9uU$f(UmB,hl1;CJk>?MC'Q5[/s(4LS2BtSG(
%C$F&_7D#^-QaPFVURGHEXM#t2o3NYee7..RVrZ]^ZILS%Xli[]FHoX9h!oP;fBjWVb([MZIGq&)dcIgaNdc3gO6_kY<D@DFSE/,a
%9A<K.WN8S;QOdLVD65^61X"CRSP3M+Wb,#Ng1@.#f'VgX2^2IQ@SD($4,BE$DY>+fM^Njid7AVV;3+WPHF@,6^T"*>pD^1+b/%9\
%B_t&Q6s^BVmu+/t=*:]p)!Q%<LYLs=oIuW84s!b.bjD0jZhr%qf%ng*&]A0/-r6mj]V;cOO11]@oG$)#DHU1,Y$Tr!Sj_6#e]G7b
%9V(5t/ah[WR0]ESj\#2FPLB3'fAc_mBk-a#5Du.E&nh%S_k#W0p"%FFd^A0f=#K-H#<NI0luVp#HQIVepWf%_4a2@PXt2mukN/WV
%\QE"\1)E%MX*eo`XRBCN:+m-!lfQW,DK#KJOF'$H[.<1dLM1#9mqh-m)_5Rs9"/'8>V0:,?RG6&2D4H=]B>OJI%kd15&IQ+-e7UJ
%X7B0bofA8[U&Fh'X\umG^/Gg1Y1r(*oSp6Xpj-us>tNgNC+%!Tkf\R*X$9o+DBJ=-jXt@Ojh$N;n]kEhD8X)'Ua*qSCq6luJ&GE[
%mRp?0m>&b`1&R,:[-etV$E`^9n7-hP\p6u>DA4-FcZ@-fG.oRn$&1;:F;DS@5?[RBj`C@j1AuU)_TL3DRqhRA+rp5];GFUnnoWb@
%)@He(#@hE@lIrc&c/suA62%sQ\B&7i=/Ds6TtOX>-n;-#oF-""f4"-+p<eFgP1D+dV=Pn[/iBg",GoG$Lh:hr/nrm8M2O.(s&L\C
%?/P:s[IPqWiApn1EgBpUY1,LU\B:F&'@lGqj/Q:d[G.#:&4p!eQQ,["oCNk[VQWn+Gjq/KLc/RDQ%Q3-\l:?5Y&mC@F^A9AI5?;S
%e8K]8fpKBcCc?MrF,e0QQT8k7YGfXhoJ6<j/?Ud5p6luig5#S'[9YA#DmhXfCqc1Z4hnAjB_W.MGuJ%X`OG.8A$-j7j(<WsrcltB
%?Bt7GOi=W[^IRTqSO;C]s$eTd$JrB+L>hte(_T1oEddDY*I-&s,'m<>](4s,htp/gHCVVOQ_c@[7K:MFLujj4I[b+D7*su2n%Yu4
%ljt*B*B.sPY-kmZh?.nGTL36bYb(rcd*4ZTqPAOW3#_!:HB0Y,?gl73^]2kPj3UsO]Grp#>CC"]aG"kq$\?buhCsVs*'7M0kF4O-
%KmkY8,*.b1[>.9/66k'2`p7VS/An5WE)m=&MB#\d<PW+B@%J`R<FS<0-9tM(U;Rq@;]V7H#m;S(C8g>r(Kgf?Gf`7:G_s488T8)n
%LLDaWpoDRhkm8WPm9O=(!Y[u2]'NC_38R_B;(,P3SDJNH*Y+!F+D?*2_aI)i.eC;FqV`.1ToqoO+rJY+/kk89!Y\t#??M[t$!:Z,
%U%8Vp;OAXi0U3kmj;#ZnFFg-n<L67-A]Qh7Q?>5)30(j8O<1U6+Hpf^9IUIO67@V]*0A7?$AOBG,C6b+apCK\kB8+3eO>71+CPt9
%Le5.B'aH8l>E=2?h>o-U0V'@aQ=UC=<"N+`"De0$J9h_UZ3gVj.V:,]aeDI:&s5Tc6aMb\Lt&.tSR[6J(p"8Y+;i0OL5?=4(PN/X
%W=FRmZ=G,]n3$?fno4sO(EJYG.uf,A-#kJp%9=,C.h]oJ/-8(qK=AqrJL(YX8U"PP-I97G?mpR4F9MQ-"j+Z(5]Z(S?udA]MAVLE
%(c63PkoGCZ$<Am`"Ju_Ia/C%QTJ4ZZ=9>?rhSYR,8E="ei]W#fU;*u=Q98-oK9=R)C7O6jFsKY=M^mbG*eQHbK-c8g/RXr65V0g`
%+G#&&G;UNl$NbssJg<CEX?ucGACbUZQ"VPFiic(,TT!,D7O471T&DgLko327'c[D%!D"&T!$11B1'+]aXO'E;`j$4XjTH+6@i3NG
%JhnZ:R.W->J2.s/(koa.L?km5T`X[j_E'%e=n+ba#LEM^3@\]2`,e@8rM\T>n3!-r"9r^.q#LL;7plZK].hSR#UV7*i,P,SY8P8d
%_.=u).Y5BGc@ngm">0L_Q^?+:7USu14&T$5+Aq'f)<Y"Ri^olJ\q"E!^_.P!L%4XE_Z[qm&k%N7.B]C8@"lWtO:I%d6)=[H4`M-<
%>$FJibH3A%Z9lAK-<d;aUcKV\P6_;t9G`tM/.4.1jUaS8W[7!I#T,.2!YZEHAe7W^1a3d7&t$V;Nnm'1OelH:X==@:"O`JZaUUj-
%nps%sZdUX[RfN9s^]L7^<JUp^3+/0<*e;?T()/+,0I0sAk.2-A/C<[PM^YM<6>R?j8[L7n4!L_WnRl6haIpjj,[AAB(^prZ';?$H
%XZurO3=!PcGfUUL]%$sl4pFXi,,f&]OGPGU+Am/e1?Y\gat?e9;.6aYbT2_B3\Z9Y(e+tl"@NeVF<WT2"=uTAlrR&O6=H8M"=CZ5
%Q+"gA^^gu[R?`>1,1X:.N&i1k1bK,64kL8U'tt86p([g@Jd6@s4#R0<e%!Q,JBE^VJ6A0J!/"]8.2_T?^_![S@1LA`=qmu50^g4.
%:4p4=_&P:_Xt]?'_!)"Nc\!h_3'&5bPoMKTM83'q-AJZ/.L.j4edqk?\:4R$>/f3H^d-!SR-`&(,U!@XFb']2-W8><?pLGo9EBks
%6XZnrPGfkF.L`iN127Od*RKtV<<.[C_\4^:3slYJ9I#pX4VeH)5bheU/5`S_JN76P0Nc;c(ks3IJRICh44STn)M)n2pjj>\).52/
%P[M$B`IYk`ne%gP)aGMeoEKm:/keN.MI?S:)]5Y#fg0!e]6@Z3cjP+),*>@u;,l+\:iRuV-pjY)llTVsjOP*;g9:j.!b2t]X3De8
%SUa.pU4PVkTJE5D6hUi((rq9L@&1CH(nr_i'h)=D,]aG`-9Mr1<qY`ec%Mb&j:!$p)23(9"-OO*R?;n<$coh$Yb6j`WlX[?g]I$e
%.#_Xa*Z+p]]#ZZW"_0-?@E?j30[U&\JkSHu"Me;1<$9;5B`mXW#[jlik#NV1i.)A!#fL+H$,[ICTIHlS66\,S/21&?&qE7ZhI)EQ
%O>t[YX@g3q12&BNQ(<At>D7SQg$)RM'T.X8-UJ4LhCZ+U.6n6jcif)*NhKSM#%3f['^!m\"b2_l[ht&+(]m&e,;@N!3A'fDJT2YC
%=(JPZi1tm.$WOkSYcL_V@5!0\"NDpS$UZJc0[X;^!\9qE$(0lr</%5EZ<i`P8?4Nrk6q]>"bWg2%+oGF:a0:R+^j;K:maLVA0s$)
%U=J)HSUchT`*glm%f]EDj1tlP,]Wq,TYMC`i6?k_,p?#\^P[Uh#E3;6!(K9l=O42W=QEp!ckl.E^ECFOi]%?YOS$.m(o'@3!a`&I
%-46OPLA$=/-kCl;0NF?>"GUWf?j@:sFUTE'/V6P&:]#<:3sL>C"u)+d40!pj,&.P'DA`X-.',`h7A-4e!TR$$0[G"I8N<rl@+K0/
%#FZLL-k8p^Blt\*UfC4t@#r_)3>C40X^\D&_%?,4_$VLt\Z7ia=0+2\RDNof6sr"46846GGn+UqbWPr9f+N_WG6s%m":#)^(a_9o
%>SSDK6GgbMaJ3sV'7j$A8\d<k,;;]d0]%Ll9o3:6[2T6"&h$pc%`j>9Xb1''Kg[W56p)gcM,937Bk<RjNK-0+8>.eRP^q,la"YVf
%+b,:*dH-%ta=JO>!0ZN<EnKY#R)HTj<M2%2/gk<<VB0>S@3G8O"fg,[Qug&F)%me-*e@aDM83X,cP_q(AOdq@%S%rN#,4@jK'L4'
%@KKIVT-3PfEMaXP3&rUd1rZ^)#1Z&V84k=)EaUBeli[oi![4@i'_<;?Plq03aPe@O]Qshl=@?OVMhtl8)[VI9WAkMEoLlt4kG"u`
%3d+pd#fMmXA?&A?7YA/Snc@G\=^9*`$l0FV&Qlt0)8d^9`ek67>X]!`WIhro"Yg".M%<-b,)+-t>91@s$5;ZEL1hZ?L:Il>(5/_.
%AMjM+=s@?jbV2_2+L2C6*LO0J$!;Ad30cp?.YYu(il<_jF97"R.i3a?'UBoHJ7K3%$._)G#bV:8'S(fen:!'9D$5e61k@(iKREq2
%Jj>=4W7;&q&pOa6$*4eB/Y9P]&eCFa6XU5U/QQi,HlVBL<>&/H9'Cn"'TD]FJUp;10I$N"``%to&hk"'.2_Df2PAY9a(5h/&1e<U
%(Zp-R!BaTq<j>n;(s2gjR,ic_Ddnfa,/BpW)pK?,A*$-E?ipZ?B-RZj(*/-L::(1.)(!X\X!hdlS68-SkPt]VjoC$EcpIqjXWrCj
%l,RcL:CS9J,OL&u4LRZ]L=iTcN=<p[J^6nqNlNH^pir1,&Bca/b)t$o@5&+SJ;JQk5a9*Y5j\2P+R!\JkjSn0<Uc[fQrb84d&o,-
%MHG@:+B!jq#Vo$WL=JL*2AVeb=R%AA<<UV;'JAB=)?I]!H4L]X#=oXm!K2O;<a8m,G(?(fPh];b3]*7e6-R]q(.8QZYb4mQiKt/Z
%-Lhe)Ti<HE@ZiHBj[BN0V+cVui%.co">8VG&d(/<1^'&IHse(SJ-aMAa^n<,i-q@(">S1Xc2u%*'^l*.-E06;7i>M@[4QrlFVZD-
%j4kd6'ED4e",eSQ_l6S+'n*2lV$k[2hPF,)_MP6>5[JG\R*u0d3%u8B:oI('&DKeeWoO4Qp5T+fg&R2`Q.LW33H,_rS-T[I=[@C-
%Z9'VEpHX83UQ+5i`)F/i3Fe.I^)R5Dees'mJnY8gLV[akiYX]Z;8W0a+=iZ_U>f&tER#+l$r5rLB>Fm!ZlrM@Fh!Ii-u2?2,*&]X
%&;A4/.,u-G"0i[fQmtqOJ\eWa)s1;,!C`fdncFh&&5ZrBZlu*Sa>"Z--3>]LM^u$Ss/52=OY"V"@*Ph'#,[CKL]"2%?aD8L3k^'s
%rP[kA^rSXk;KmE+!TQb'JAZBBXWWP;Oj9*X'6lY1F(jmnKfq6co5V0Z<c.""TA?Gs]sojAI-ZapYAKh_T77rhk?A]mFN)%8cf)^n
%#p!9RVh)_rT%=$Ze,ausPq/4^pmEJ#gJgsJ:H/Z>KBkRO9o"%&[D_O#:Bn[]Cr3OPEs?MH36Rj/8<iRnoCsVmO)B;<G-0*b5E?%^
%pi_&+ZG<R#FKdO8!fKfU8!^J/2LJTHHQ5]re%hq*MLjO,`i2*7aOEWNGSSQHGf\V.k-2QN_aYV,"+s!]%Qn*fE;!FhQ^5t6Mcd!1
%QHg;VZObT63<e<AG6d#Sn0Y,E?sh0pjeon"49h#qF'-VD0MMTQC(;%^R9C*Q?3Wq]?Mo=*/I,@EjifB&/Vo/OEU^!#@#qo"W9:M?
%9C27pF>@25'5DQT1D<geQ7%)2_RO^no9c0>l"2N5,Ad5d9BO"i5#_(^U\u*uV1d[ha-Q,5)J;?DNAJYidh@aKI;llq!f?(YQk\Q]
%>Zk[2mq_CcZEWte$hiIBhNf6uqcA>B4pS0mHa#=I$_PPE@HRX&hj=ir_(ajL@:3lu(1-"QXbR:MO+E1T>Rou4-906'"o+TYnKXHO
%%34qh"le/R8<E"<=SnW?C+[HZqcrNpT]H:<S:%EiC[g8iqf&OS_5q)I/K-'ss#$nT]J"[0WQjGCQL)*Hfo62<qZ3<PqWfaJqjbGR
%pM-@._\gul%gtNaOD:8s"1q(2+!7pY/Kc@Xr4Tl(,B18/!dfIZK%%Ot@Nu4\*;;hRTc7NK\q)S6^7Po'\Qp56\/T[Y_J33+kL77+
%hoBK2*`;^Jn!+?!'a1EoZNiRHZTk,g[*K/b\t<V[/WPl(#Ij,/cPN)]f&ESsAm3de1M4%^YJ=@&\A-XdE41Dt]W-M:6#q$rY6DVV
%i2'15R#RPcBjIeXQ?F0b"+a[^g;"H]XM99,?4^H?=fr\uS$1`='LoGm&t&R8cGKLlp$Hm:bdYH]7JcW6C:oOIA38_^;h8mPGjH1N
%lZ!9uo9rqpk&t+3Ah/<W1S+)bX$hduS9alGnDk^G%o(Rl'&KX+7$1S(0L*i%I$9I%P$kWh>duS/36<n_b`cFJ*nGf<fk4d@gK]T?
%HA"TZ=9ag#&'!Pq\34+"j5B*[pciaPn^<&.T.jk)T;^(nAT=+/LB$khroSAt?LE419)]D=q0@[cX/LLF;"X=pMm<]1dkVpCkhpf8
%_gC=fqs**#+??k0)[GD!*PAdiA1pT'53qOM@otBhNeq]p^c+FYDgqiD!R<JL32u1qcXS5e_4LFIPmV``DjXp72?nMcq;A=j#Cg'%
%#MmCI@4O%$F:;fE0RW\e-.BQ<A.gC.Q8JO0(PgT*a'#cl;><]iE[(+.+('7#*(&?[M8:193s\RCJ2ZF0QrhI=]VP_9_)$%;E4LOF
%^<Yp;&AjquKahO4T2QE;*+n#Hm".;a^.\V>M8o%Qr*\O6f<?5W_t.spZc9gAL7:>d/EL-DnDPUt)BI%>g9sDOKA3Y[:972W_3j'J
%;uQ;#cIsX*-_1=<Z(s<La5RIF=<)rFo@JJ!#]1MeY(9XPi+c=$#^cAt-dGmfLG,I$\HgM7^Lc?s0SD*m&V*jl<++Sn.NW*XhWN\0
%TbJI&C06kF6,M@]>]t7?h;=F4P/f(['@`Ll4pAir"npkS7Kg#*3!VP?ls=lURErDMB9QkNMdu:=$le"gZC_AlIVOcm$aW/oj<V?e
%?,G?<I-<*aY3fVd%[L;9_E=_C4H>CgCE1Jta[&./'L+>43X?h;;eMO1/sk+-q`k0d$?0=Uf<F3%)E9HJ\'Y*3h@=.)J=mpE3LWC7
%M0o!T@`4lP'Afb,pkjfc'ZX7pjppa^P7<jgHL-Z5E98Zr^h;mIIEFh=fa"&1`,^2EP.V3Ph"l(u^cP8G2=VNnlN,1PYfZJu@(V.t
%[Pr50@,lb_Nns&@OP$.W`rOoY4jTt,'5.t_[#6fOb:[0_[rDlJB85rQ+7O4[%(B:=\Ab_J3B/%JX+eeSA^pR($+ZWT>j((8(f()+
%i%b\[dUAO,r!&=)0Tau[Y8^T*\I<E"/ZdC[i3F@K(O_<+D"@nh`/SjX6mM8X$'$*9374r4Y2fhcZid\uUYT<>kLR#D56pAZF>0@s
%;Zc.)%eb?*(Ahlt`U_qI%%KB[=GDH=V@@q(g2h7.6";Jjb>PBJ(Y:\nS;kDeQQL$NX+B#dXD>L#Dk!#GqebZ>LO8N))tAi%Y:fb.
%N:-^XIb2?V`AuTLHNgS$@GJ9nG$>4Q[:BTNobF^$D!cj>Dr\9+Lbr5(m)23D#8X/uJ@c`Pp*^E6_D?/%I>?cE*Q&>`hZ8RY)q]Lf
%m&pi!nWn^oPT=[^n8<5bblLR(P*s6@DH,19m_kjR?l`$/pt>sJG)*nun,Y@0XMC*3(bi[Li50R_QmBuYQ1#;ep2I5P5LSd%%o2d+
%H`G-N+jsTmbc%1Ke*t$2Y8Cr%eARu]%ViB_LhH]G/1CEI]UnHI?'b(70TQ4o8D"$r6B?cJ%LWWd)41KD@h>$Yn@<^+c?>Ddo,P#,
%;ghr!<6*T0QMW>F]asRO3"q%!#CAY#(779S^i;mIL(AYNiQ]pY^m3`-E_?Xr,?*uY-/*LrI\=pG09G,*%c4O_"ea]p`NV"m%2'LD
%^VAC93lbi$'*U8t3!<!G#ls',#p]QhB@^p86`fM)kM9)&$K)7mV8r]1=p`FGJo1T"mdIR!f%]]Lj5>26'W(%6g^_n^C(o0]OfMkZ
%I(f%2Gk&,-[XSnNCU?m!b]96-1rigjZ'"))lj'HR[r&QrNpJ:0/Mp0[i%Qk@69Q]t$8VpN>9KnhY-*jBd/F\RJ)'e82Teju3!X6^
%aL'6LPnV^_aNaN"^R%;6S1iV_m7.3U;%u"8S1TEalUo64-Ys3f0XX9I2LK4k-bS02$`KVs5[,K:('b.Zr!a$40.&ZS=?fp^7pl[#
%!GR+q\h>eX1Y:go/<l"$^C"f7(U.`["Vr]7JB_,!JbfcT4WeUPSp`>&<^6n*]/fY6Z0)6.H1Z/eYUD&S;(8g@'*Bif(H[Cg<;?Wn
%)'Je_J[NOTA\>0cn7(_@G;-59Zq(KrI`nAna`D_[4(>`)0-(OM4oqQ%*O(b.ZQDaIoP[jql/4c"!4I/(AGa$UWodJ=^=VE($u1l[
%L[Ag[DI5'p_"i4H@(^+WC]SPc#-Mq2^_JsGDYMAjih0"Z!lJb'f4@YlO^ht+X^%2MV;Z[-RC/1tS,q4"+D"dZkMCZ&i*unmn<\\i
%gfu;P_D!cb<e&R*\T6df-LSeFcP%;0iPBAL"=SK=5e@[2FaF6,T@:SGG!+Ni!A^,OS8@I##URg4jenEP;,ZOs_"`t-gH'D=iS*!)
%W0"A,S-)IZaHtkLGT:1P34@i@/W>u5^T[X:=h^F4CJtrIl_6En_7$M1[+dBs2=FLPm1'p+i0<3,Zj^0q&JeD2AhE(^i2kJFr!HVL
%V7`iY2uAS;FN)B+s)CG&7o0OH.mXCWX+9.9&IY6*i9k)X/4GppnA5$W4\H?S%Ih5L4.6DpGX7VU:U!St6nn?kmu"]^EA'FN]BYfK
%d^.YPT_^YR$f1!qT,2@/Lsn[_'eQ<";!U&NS>ecLn;WO+LTdUU?#IC4\KX)[I(,(,pH4r)_/q0]k+Abjlk=X4K[l\dqq6tuJt?*E
%j":9udJrg05&3ThDtL;BE#(AufQ12MWH?$3BXbi@%4QO^@l5e"BimSr%3usHfuY8`lJ>TBYs<AJ#B2b<1("64F(ts7NfftNf"E3E
%i+M=2GhbZY`RD%H"+/fE_p59FTD^K[fQ1^A9B)aC%";5LK2kNWfJCX>6VCh6W9q+(<E9W_]-$jmgBYl0Z(8.h;sbquGGoc4,fOV@
%L>0$f(1H]X6WhAKcD8)g'gm;,S20q7)kGsGdIeBi9u4'RJW6F?(o:G[BQaeSbDu1IXMN_B53#26aiYbU3C]F%0JE<MSiDoIje63;
%KAA"Z-)[;MK</Zs+\K:*1k7^65pu/10WG-XMj.fj'b"Jc`6\8#%4f^a*YcCd%BY!8e8.qoL5%0H/W?g\\ZsgB?:;]$@V.<O#^-lJ
%+,ZP9DG?M"qd@Bg7U=tAI]eNDAESklQ`-2dgl*nhM>]]Q#=Ou=*EJ[_%\3LL[@BT!FtkNQoULb(LR,]13@^d6\9R2A)9aZI/5eT,
%OrD3ap;`k>mP-+MV>c%Jn>#iKH*HS$80YoqKSH$2H6uWHl:2UgfhY-m<?m+7Nt=cGaKTtFC8lpKP?J_q*M?f`hAXtj86/55%%kZr
%TA8^*<rLkk>6V5#GgNlFk-6M,kEp?gKT3e$4IElU#+'^F&[Mn0iX":t*S<EJPiKdE$I'e1N-=bQk=p:#G\VEUT4_>;EN1Z/)?Om8
%U?W\PiX+8e>%(Mta#1%s(VH5?mFgbe*c+Y:$J(N7Lgat_J@2`*54Cak<o%IuKF!66fnNqq*1+]pr>ZRrE8>i4^6u&q1[]JRa5D,9
%eQ<.@gpaLSjh>*^3Hs$;IU7?BpY6A!!6_RX8T$iHFLE`]8aMG^hlCD`"nV!d2VOr\Hm`?[1`M03#$BVd$8;1B</$>F7m9"A_l>'[
%.fZI%.+R.#K@rKr[W61mfdt^U1>CtPrM06EL]OUPZ.:KgZ=pFTfKA=a'&G?X1Vn**b0OPf%q2A#>lbLDOpul1*.u4g5+!F<$D(3g
%l,U==6>_^8l>s,S<bXggrX,%E$$;[eW^]D9*8*d-'h6`NYe%.W@5[8K#M'A\=G@^sp,qd0R'%KH%R6l3-%5L@cf:6pOk0s@G>a*G
%P><L(iY299^+Jpa?g)Qi_9QO,N!!OnX&._#j,Q6//MsNg64c]RA6Km?jLn#s,q;F244\X^nGWmBh)GG]_J&KT(T+nX\8Efm"iC_T
%6VCfHfQNc$fRZ6\9]0aA%qL)#f&U_"Fd@A_0T^E!T,Wj_oo*1WQ*u0&S6:=FVdpOj<9jh3`r10`2@<s;`W"SPdD+@!O.>tK_WE<I
%DUa6jd!:UnIm'3s%%d!1;HnnC*EY?LK7P=.4Yqu3jW+*Op1&*7Wd1h]r@kG/7nS:7<ib<$[qdlqZ;8dW"e3+HXRJ%fCaUeg@#MR%
%=EQnG_2mnkE&6#F0V[`Rk_u,I4L!l>qrc2$Jn+9Rmo[pj*JariXE_UZbMrjTN[B"I3#"9-@ESnJn0*L&?^q7#_3<sHn3b;J$%m;D
%0RY'O-(ZHf4Uu%gI.RI&;:s6Q,Ad-/r%WXa83m7=\8dDM$F7N]Y\q5#+_2gZG^:#BU\L7$'F'5m&jN76'MMlRrAe:a_)$!!1[>t1
%EqM4)*DKY.YFeHW^gMM#Kag,=`t?$Mn,$K?/Uu\p\%"#^Et(lWYjFjTr2bbhFeFKe^iUpXZ^t>9TX@/&I_f9C_1)O/#I4^N2XA3%
%E!6kd.jgG-N<fCs0K_2.<gt6@%[pi"mSjK(SY&u-+U.Hj_*q$e@0C>!-$sjOSlZkEmP4/jFkp0XPsT5^0EEnor:N"KKB9E)qM!H%
%fc(5#RE;\lo8DPIjYus>-^Yi8k73`:739_Rin)G7Y*7*kn6->%$)eibPX:$t2`b;8'8/B^2>MCW#oW3:OS&[A$TH4""imdti+L%b
%fVSd[foL5c4Ep?9j\e#A2i$9X4jV2G<F-Qmr()/\KUq^.EMKk?KR>1.EJDFMfrLSo#%EZqM.Z-YT=6PU.c'Q7VCL^'`dm5-]ou.f
%Bf<k&]d=E]@O=7b?iTX9GrV8mr4anp>r]&$#6$hO;IXM#8*WP;PP7(sK8H4pF,-&r=-Qgd=[Y#d^InqAY.W#pk!9A*N`DQ]^tA/a
%$h6(3]^n.ja.^ft4Un`L+^n[>c4X4MlfY'V"e2PGN3J%FVIu+R=VepKqq%:/*crcTg4n-m=:'nc5nM%0*^>-TT6'3Sh4eO$^>Wk7
%!j=tkK#2K[^ngsNIf@+c%gA#7Na,f;$dd1Z+o3<tH#7k&'^@CdQ_>r+$<5BtkBo&?R:98UItTd,.;NAPhTO+gh@)T*7hWu02MsU.
%a)jYc#RibfB7>1K9JM$qHI1."H=.E7qgPKcOFBE3]6:(0Cl[H6]U(VM\:Skdknq#R_lAVWDC>h$Q\`a_(QL3e(Ju),-7u)>RmC(>
%D\tD?CcP/Gi-^!ep,Ih>3/PL'RUm=C+i64<`/VW$HqpYbC)?i-j>JV\mIrXq+0=Nf5C`%sY%Q2G5s?NM#7t@5fcKTJI4-@;-Zdbb
%/E-=+R6+"gg.#VlVe^q6JSglf(l!ato+Qkj!]IakfeiB3Xh_QeTgZ"$*rXL-lrFrULoKG-CL2$hO])[`4@iR-nah3Ym@4JM[=eSL
%I=JqICmB)F<Xn*-ma!=l"tjWH6gMRKZD3uO0Po#0550H_:^E#2b22ah\dPRQM_MNj7Flk,L-m926IY*h(f\P&BKfh?7r?WpD_l4*
%31i1unXcp>l<l)ZHrPO7HS_J],'4N#<ZSE4%;R7D(.;S;D/M$[Nd\V6j&"B&+3.[';`Od?-F8_krdL1A&Zm>0p7DGlLDR6KoZY:k
%epY?L6n<e3\VKl7c9A]ICtd3NW;9,X\Co6ZWhGSi'AK^+4caHJ\:H?so,>iu>jtU-?Li]WYZ@fs;"JaHe"a.!.2!6*PFlJTR0'JE
%MBYaA+L'S>lfSs*#]<0#E?XA3%q[;\@/F2*n+H?1)NnJ4[m-K]GO8Yno/M&W3s&PXcq&@#++%7P>i:$hNr=:h>nK,MrSfp,Q`q?.
%]Ad/6ZKlo+A1XKgoCbrj8PPmHR6W@&0!)2Xg%u**gA,aTEWms7"Dj[#0Xb"i_`UIukVE>&h<ruWaNSh_Yj!<EK8DVr5&1cJVeLqS
%^t(JI0/'B-=pE=8LGHR`cnkfM*ggB@cUn>1#[h</NuhI[LZ4`_3^loF]Guu(%*RSs^;hMS+Y5.*C/+u=kecK:pWu?#0[pVDp9b!H
%@*`V/%Wd=4P-^]qB[>+`opa"f]XuO^6B@ApMBLZ9-Y'U=O*fWaOLh7pIL`cc16hpoD18]l?-T`S2C!$baf*&;r-XhGLZ[Sur1$%^
%X6!YbD=a:0#8[giI]tC(L,I$Fq<U"N_oTlb6fn4QR%9u0?L=b3:?KB/$JkJ2geaYdAQI4Gj$e7OS^'Y=Zu#*\(>9B(iCZpprO0.[
%^uNVZ-Z`r(6i^:j)m9t_6#+9:K*:"9Od*?V2K:IhSu4/Vg*JAg\KhKs<ge/'l?K+Vp[k)9*!eH$ojnICWM$mkR?u'bk@%?43dlcr
%W6UV?cskH8[5f.S)^"<0q&Hj&/hL'(/VEdMkKlh=%BNYW<nNiGbM`Xt<1W]W8_bQ/Uk-uMfL.V+@r;;4[S4uA6nSmTiG\WVZ\/=j
%mPJ$,5@6:PUjtS(BAr8Rl'";L87*-<rsDjGXp5^eh_AHA^.`mlY_(6)YfKrbbZt65Mo_.N9066@ppu%gT<rYXn4]*.))"9AK6^%D
%#<EC&%qKIU@JsT_*J,Gtl@G9^"N$D4+]>;a\RE\k?m,\^Y^n-.4s6RL4%,Iag_4*InR0ggPnLs@"M[!&W8sCT$.>jm92*c4H+[Ou
%HrIs*%0l-`f3V8]Lpn\7^]*PN;V($)JMdfp#d4-##?$<?#F<uSQsEZ9p:AK3ZhV5F((>GW#M,q'//r,80*lLHJc)oibi[/YqrF7+
%Y6We<nXrUQ!/p5em>S!am?>I4d9H?7.SUX[]I3IHFJaQpWP%4I+2G+tQNl#U3.caO_^c3s<`k`kgqpWg+o!:hlG8<N1]>C@NpJp%
%EpSbs9*_lSWrd.gO3Hd%g+%)'ag#,XB<Gt96$m?qA3Q@4/ZC(QFo]BobUUEYDNNRY(dpIh8EllO&M"SS>Y8+;bBDDl/\aMA1E)W,
%'SSh3"'_b<RXo:Op47S\p)BLBXg%3[4SH.eGC-_oOeTG6gP9=#AZ)l\hF?/)1%qs;^4&8ko@g*,Ks89%eh6$um]U4FWmRSgbR/rY
%_4i7>gq=4jl.0Ido'`1kC&Y+g:86hZIpPUnl&Ub6M4sq7Yg!7A`c*8.lHk'+F.Sr_Np\.g%.T\;]7o8>Vr]Q@be1??RI\)=,:*)P
%LpT#cn5!tfZXabN7lrcX]j<52ib1uVq'gdFIZM&_^cij8'uJY&.]cI%)=m4CMIE`&Z?e,cK'3P,2\"pK^6#.[0DN.r+#O]CA-H^A
%/jopD24--@Z9L]:B6U7^&<M2T\5b_d"3^Li[XJpiGbk;UF:=VZMQoGpHVLHf#0dIG'u;dPqC\q%Sj@#dctrQ!Q_3cEil6teY.dZn
%]58WigbE@!*g[=q7";@o?[,`Wqrcq33EFcjD9:j%"1'dDGd.5OgCJJ2iu[)XAGu:V0=m?d-;i`C]3`M_^0g[0e%\rg"2QSj;>97F
%gQeH80r.1VC68@9Gig=mNFbJ9'O#W=3g/QNrbk7rSmT^Vn*+5&dW[7%iOGdq9"D0`>hJL6R!PJQ3W5Q?/7C\*GVQnDYQ$9uT*o"1
%40)]DnVuQ%QF#kIXr,$on,`.#/pX74T\.mIdqf_f[:@D"(H04;;3aWGY=L78n'^IB%nba^pOLS=`Q[uGD!tpH`QO]KP_f+dkEI`k
%c,Vbe`=0[SDo)O8G!kkSK6>b-jhu*cR#L,H_:P<s`@%(q8CMK-ZYVhGs6D?H-V:XVHj@B#6MJ@*V%UiMO@fVEGt"on1GuEF9Vk0q
%At#ado>$tuA->S)0+pCUEV9fGOj'[k94i4(+i+l$oIL;6hsg5$=.M)9ErS$.I*h&Mr4a&uI^WA<5;5%c33WA&kJLT5mr,(0qXoH\
%#>CFPqs7amdl1MB/761HFpEc@/V^$J0FrU$LpXY7_jZG$4=FJJi3BYO';jSA]f3#!f&m_Gld*;EikHo6Sfn]uZPUXf.`Z;mGo%g*
%L]Pi)fV]3?CJ=Y`[\#Rk7]QF)o%.YNIAh"?<Yf2rkL,2tM[_CIFt0J/#XpQ#SIZZJI1oa.n$3EVafMO\PUtN25o7_uG(,>H_[ne'
%F?:BJq*(DB^1^<Rr,$^M_tI&o%o,AKaaV*ClU7e+Q,HXBd*imAC_LUc/#M+!iumd]/ZdrKR@\i8;6ubg*h@Mh&.ZP2<2(MPF@C'1
%qB9n(3<(1XI9N^jP^MG)0hobcbmR1`[AWQM3lU8n@4CEB8eTV*:KA5<Q<iMZFHZ;0C5ER3=b5aE*Hqo2jLPGOT.BO35#b+u@T`$\
%%[&t,2U'gu>9Q,0hgbjZZUid+BEE?:>B?sSm1>j*NJnE?_U#58(7M2(&"8qN/oen@6TriS,9Q,p3aGQd/mepTa9)ekkIhuM`AUfb
%m<V"LJgDGi?U*$-^V33Q]9Q>Pd12Bi3RTA==(@,ucb5O0c$=ZJ1%I''H\pl(8+FR^dF"U1M.7Yb>7M`'M:VijhJsP]7D;2IPj#2'
%%L\B%EEU`lYZ*4%eKq:BXJ'MK=St;Kmg"#Mib@VakCJBLMWi:B;)#&_A#`4%jk':SiM8=Ogi?*3)r^,&3@2j`"h[t)gJSshO$SD:
%#H3Vc%p!e9(=Rtm?*]n[OZ<S'o#h+]IFLN]:<-aY"Eo5WNKX>/cmeJtT^IeSONC(;5&1;EK3Lg8:%p:&@_-&!B>'M.iLJ)=^./OY
%)NFUaI)2:7([rm3H$7^l'!#I.[,bYf@6\)A=/sLm"pKQ40Ce.TCY)B.:lO0W<ohoML*Zi=^8,AG=dgb-cL>utX(C^?j:ml9/S<_s
%cYmn)s2)fB\ORf1i[<&-EdXCpXa4;^&l_0qWJCe#1lH&UrX`%A_MJor$OY-Se(:i;^V&kc"Jbs=j&N2P3XG1BF"ahl\9R"hNH2.6
%mHRl`jRUp+VXLC"=tMC#I;?ap=27tL#6HEqaT5&WOPgiVUaR]hF]Q'2ALWe6@dP_jHuc`s26RBi1(h<u#0BPM=Ohd1eM^bO69;=`
%bV(ptpb9d2Ba6`M@\8u+Sddatjj_Yk6X/j5J31<U>e^#H`*K6#H20K`^uEF.+t)#s+1C(9Irlu6<@4=+m3`c'e7-=IjH"q](;)>!
%<H_Vp;[+=cLC4LD!cDG>\UbbRlnmiGYSs9c^#8kj%jRgRGY2$bi1amGm`d;dU\/(N^%W4"Nf0'iT@^K$3cQWuF393+@Z,%0au(>e
%r!!sC$b@'1?he0]f9$sa-75+aDUV'P=20'd^O@[IJbjQR1e+<2Wq"HM4l6(I/Q:3d"m/.i2<`CT32:OnlWinb*BI<n5[V:\\1TR:
%p1J^:%?[@[Emq(PC;>T69GmlJTjVpZWD6G!`.4;H9;d]Iih/8I'/6#-5EH1/$drR1TYKot:[NYg7ogkUC9fUCA?ZCo#jb\gI"U&s
%M;C,/NqT%Sp-+,b?pHWQfM]_iN&BKGnB%#bmgUNH78;A4`1RV9m$U#/9kS`7E\SVd8#uXf9L91rg*I_sn/7g?eHFq4kGMj9[A*Ti
%CW:T?#q8Ho-IL3/irT"OXa"VUZ.@Cnj'RE^=)]L=,_43>[F4nmGT>T/%l.)[O;CQIa2:)8a.R"u%bEa`T-5WuThS=\PVhJMruatS
%1f*471_[g;g>@%;3eK?ae+11GRV/.LaD/F@6\DM6ZI't;lsV:"`?V(rAYgGXWc!q%<44=SqVCic2%e)9MOQFJSErk?\OtZ$rp0u=
%C,,#$X5JI"j?Z=3-M90p8i+52\*]sEcC=OO&m8#Ng#,>66V\&-1hX$C6\`GX;8g+p<eU>m*TOEX[<Y=5e+S.<`4ga7:iTI[W+tO)
%'s,M5pGs+b_D<W]['+WF(*3_nmJ_^PRuTetYVL9'NOJ>WL/QiBUITRMf?I1"cHrGGH6%4=317W1kLlLQ5OP:qfRAmMfgp*WC'a^?
%Ria?8kjc4TWJS*J5tc].olQhXr1oelbsZ/sW'5(qW3l3=g]a-`-7FO*.KUFYl'eWtn`&c/`W4>XMqjG522@>Uo]YTf^\RQ7jZ=e.
%DH0*2Iu,[]P[pa*(Tt*Z*(,Tdh"GI)]O>+ER3oIi0>74hlsnI"C!eAI>G9%So9hTf6eZ:J,@CGni!e6:c_c.>1:irl/aiMBd>V>N
%Dl18Yb&1l+=$qut#0kL6l"rh\2BT;.5]A4q'Bd5Z9"&0g6gm#2_fh"8gp"F&4!81!m7L#4mVYc&HorNLLqR_!+VZt=#N[q5VTqN^
%IQ1-r_tG+8&"Z6[j-4VV;2=CCF!piKf'R":FWHph-hfK*.88Tui5otOIMtGg5)-#37+`aG;b1`b197\#;7qA?'N,S?FOt6(e+S0[
%d%%!9;%9Y@?gPO_XpB>mLPF+f)PKMUH%#d6qe@o;gGUVI0_^B-+]Te1A\q@qm>h,#Hjop(SpT^ad>n[;$QF@i(SXDN[GhbJ@/\HS
%0Vt%_:M<j_Si3[Iip/hQ^IKnS-Vn8^NlS"/[Nn8^6+6,0+).cC#pW!HE;?=>q?g=7A;/[fVstU)qgYtKU`tEfVfB+GP9f2KSl&R:
%ls$B"*P[?:Y5@c/<3>oDQmRjiocNnrd-0Mja\@K(E,ob5,*=I&I\N^<h1qk^5rY:dCA)Y&(m8Ulfq]5Kf;F$=>5PS$[QcTbi^L/H
%45=[9Anu2M$7o)EOmWWD0qX5D8h(+U<^C&hqO@FFo[/B68aST3$n[IGC<`K!]LiU7-9!,T:2^Q=+f;([,mr,@l]f-<pN^9^q12.K
%B*B1G?cNPCUq5M@;L_>;CGp-ip>:ou6:ST?]kC7mp5=&8GY*TFS(p^iShO?hp,=j"a<YXI41Z_N_G/"Onpg]Bm&hs=chbE4YP^6V
%^>;!>7D`bAEP;9:=4SdWGIM%h@FEl@Jl0PR4uCBuMN/YDnh9]bkX(Obl/#9n',C7JX1BtjS_JIK<`6Y)d'@9K5RZ+[0^5uLTTV@u
%.`mW#rFBt-jZ,K\7q(4q9Ps/=(QNB"h%P^:e:^UY$Fu.3JX:L1_8b+@1su2nq76/Tpq3E;ENt_%>:tj%D!a4,LsEDgh+UArT.Y):
%GQF=4[,%"S^uP3oF1+=uS*9%i$L@ol(DOm_o?bPV*bM^6G6=_j#r'n:a3Q'I%,@u`].d^-"*^D?F',.@FK$?gbkF?:gRSDtO^UCB
%re,&r*>hD.7%-AZ(H,Z6qWieAImWs?coX9<(lQ]2\^eKnZpKPB!.sX(Bpr/lTiGNs*[5sXanLA[FW*OZ<uZ<nn+#^9buJ.1q*:qR
%[mTZpL!5_R6&<*mJgn6ddBfaG+m8GZ'1jg#U(tJ?$5k0b0!FnMUS2@&?aA?<4N)a.qlk*$NmpN/3p\gplm1*fJM";FFklc&&X@n$
%)CJY$'J<M*He)?h^?:EncWb&Nq#+#X9?"mCfY)TB!j-.[A\I-W?PD1TNdt7N*Q;\e_jebG)a@Ob=c_4DOD1pumikJh?O;NhZq#nE
%ABAnU&gSL6<jO"1/]HCTg[4gZ$E3\E-q"kI!Dr+#/p<K.J6o)HJnfrg&:&"[*f*`b#>Bdt=REBD<I6.!Zs]3WF=9T-g+QB=l$bKD
%KQP/W4<4PX%t<\rZdBcY@WIW5aA.*c?AeTa^U7Mt,rnDZ:qFJh1[DXqE^K2gY?*6"-9'5KL*T3?%a!lVhS&B^5:8:[f*S3J8q..3
%A3Q4`d>P`geP.Nb/:7Pu:L3'tQ_]kJB7*4%5MF=IBnDMq-ZQYP-mqFGX!kN\cX9hJBL3Dd(F$VGr85gQc5WVoNL":#gIW"_MlP7!
%UN`]P]hb+7jC<TJhhlm:#j]LT,iXLrW^k>H^7_'jP8I'?HHDGn(8R$Y5i$e5:kIMfs"*@?`\d88oGs.0LP-<KXL%"6PY*mWD'@;p
%U0sU<?X$"VD`:(d"sl<6!\O#8bBM\qC7uc:pjOAoffUj^k[1g)NYIVEXE?L,G,1CM#=uZZOSF2/YCsqlgXhoC`!EpFYW]RE'1Eqj
%N'X&1A[Tsh8^-o(\cljJ157OTCCU'VG)T$cLI/ujqiQm#))YWoLH@Vq;bQmt#0k\E<C#)!H!Z*J76PPBgaSQ/T=1rPL+F?sKSsPP
%:\WO'=]G5'O7;6Qf.8!q<;+*ZNIWO=hO^i+MbiE45Ac128dTiFgK?DrkpM2d?B_fNn-X%@f/9\Wk]&tH@e;atKRh"D>)b,Jrkj&p
%:a0rLI1mZo_5Uu"Vrau.QI01rRFJ'+%aF7S'@p>9',*.IV8$']n$_\`h:?E!"a+tcf;I7-qn*kRg8@;Yp:MR!iq`mZ2d5;Vqmbth
%:W'p8.C47\(;?s7FgZYDo2S+SQB!UI[F!!ZhQ>Ml:h;h=:L=Y]1m-`*Z,Jf&I%%ep'?0F'@Rg(gKNBHHg-ieGO#&Y[gS@hBZVELd
%gI?N5@cBbW!%QimmtcHJ+7JcRY1$0:D;7U-QcI2_&993GaJ-=',i."nC>E_;m@9f6gqm`r7f0Q@^S"%p@sVS$2EX'II6j>[H)jE`
%aZOX5N1[[d0AdES%pWX=2cm]`lWh/nN]2jE5u(<e<1Y8SK1fs*8K_]<Q\=\6SBLcLn"X-bL81KMG]@?jLZ(=h3e,f:/`#I)gZjSH
%>$Xqh_<R5u%0Z9oM("+$KZD.tYh)U31]4HtUCp/?k>Nm%1YAX3Z3OMmqW5\2FN:IWeQp+M@XT9C</J8<9pMFPnmOQ`I9,O.o%g<*
%[1`XU/)N2F5-MaVdae)c.\5)WU>$"Rj'9qu34^bl)SXf0^I?heCiU*M3`0g!`a+\9WS(u`Q0<OgZNR>@X.Pqgkfgk3pos_2]:&U2
%pH@?c&0^YHAD"8$<QC-bFIO=onUqOA3[@q^kd;(/mgmn9=*GhBKUI]MjM1[(W.qtZ@U5,BX!'q"+d]1qE4q"9\lIudFbBMdh=_j(
%p,ronf8FeP5s%agPi6/4#b'e&>?MhM@&,USA>gg@oU/>>I=I]G6'n=.9m4PI(C@58/a%AYKh:deb,NUTGXq9V.4W5Y92.6qh=4qN
%rM:k.VYW=1F/d8JTXZX(Q?6u,d.%fT/<+NdVff61&A]/KSmu*Kg853n`ao<P-5GlXl5,WkF%mJ:IGUT7I6<*uK>a>4X0&"4LM.f<
%:rlp*E/)/CK24]gG<bV8&j/h:W,pV$>HU$Z>,cpB&.gYBDCfK_g5O!pZ\'sKp:AB8WA;dN,:-ILTD/AsG^RJU*oY:ik"sctBrMq#
%o!(GCIN6n%q15BVe*f:DniUmJ6V$XpF:?l32OO"TBh.Kj6k"h^IeR\F9kV'uLm(8;jjFH$-jl][g44[?FrruO?+[ZZYAC$I-e8\L
%gA5QjDRc$qkpDOp)0*'GP2V$^eCl'ab0M+.Zl_Z9el(m6;/+jXbeRpcC'@4gTgl\=F_eWu0o3D-mX)4*Pe?td=o&j3S,!n(YqGAA
%XR/aTSAKl.TuO'N%]W%0aVUpd4+"?>4gpu>)p2$P<Fa,udJo\a*ua)T&Nd?j'r!3+K7bWGD&1aC4+@ji>p_R-,g2*/-p'](pU!:p
%m[sDh5DFV.;,[]^EP6*t;NTEX;OL;p$+VA[<t_T;WJ]p870m!:Ne5_9\l/N:4uO#4-7C.3,`["0Y:]]aV!O:*Phu/!Uis(@IC8IA
%D&9-L;cc,f27%R[n/(sVoTI-*kod>CZH$A)@pnnoOnW*X:]8M"Q:`;n>%`ls89_(M83XKr]RI-R")fWgl6i[XkapPb:23"U/Ut-Z
%O0XU$/_(;m0e"0jfN+$Q@i/+op'g>drHQ]]DM+friVIO0mcTG,3Ll[Sqe&AV(=-XW_3)L)EC/),=;K[nhWa>jXN/*cI^]qe],IU1
%>k>80X1IFsHu^?4C#*'o'Ab1p4S@*,QLUs11H<.:Ip[5iFAkc'SpX>Z?!;")9'UP:VrI'2XJq?qUW\9AKbaY-%od2+ggU0+rdE/H
%Pb4QkRami*lS#*c/%m`]a32`qMVQIbXg5i3N/hUbP\-HMVtp3m("b0E*,ScNT)\+0nNp?(&%+"_Y=CX0O70g90^Ql%-SZo,T2Pso
%ocM1`>^36\_V!1RaD;s;AfG(TL8*d$0l*ZcCnjPE9oj(n$Fd0Y0&8E"?b]g*]c.8hiWHe)H#tt4eERPf!Njo-@`QPHSXs+*U&OhE
%$'\=![c&;rW:n^4h53*22;Aa-,*Y!RXPg_3qJopb,)SDk08Se,7/F)jpL0F/USc[7rj3]@ZMC=POdENnJ#\^7@af$4OTDf;&tR^Q
%c@1&bU;mO"iTF?7LH<R(5>8fs9l*3UJ^ZDX4m-/N&NGN%fR,\/"f+:\A,S0cMQ2[9ju]OQ_`f9%Oq!\4aYu`):(8Yhq=DT'H(:@R
%@MeQN&a9\Xs%LmV3::*_!hn<"2"'_@-_I8G:b*kA+u\!:]=5q3$ulc%5FMu)a6EdKrsW5>jKtcg[H`%I;[j1`lh5$PL0X*CTJ^j=
%?-dbQ-P%5GZF2;KFnV:>YA,Mpj<FGb.T$:)\`;6/mAFY?<,=cu%eOf%*ZNi_1%!@*"".T)qLO;b,%15Ze5.K^2Fatc%=sdDdcEuK
%f_/06M+P!m=k_:omG67sQW2:ZC)G0-<S^3u!lc6W0uPjkYNPAT\\J#U4%AV[NU=c670;h73i2QFI!<eFAI"!K)A`O22k95V:M-!f
%fV51SGc(&\G'l!Fj,hNRkFq2<=5%J%Jh!%u)1%lSJfi38<4)L.?u0^3;-N8:7XWZ,[UW9!:1@BG]aBWsCt&fcoXUj!8_1";U6<ih
%7gX9s`ZBK]-#LRc=3Q7<QLC2#G'q,+8mX\'<Tnj`*urs/Z_RBgaWrsI[#@Y07aL&rICji/n>GY8lEk^&!WS!XBj)INU,>WEq.EOr
%!h#1BFeqMihTSSnfNk[X-iMNb*HI8bHWCTsK5LI,Y6K;(<A\E4-KcB!RR#l*NB!'@8#o;ub]\%tq>,m.47B1A!]+#\f=e`[h@%$#
%8!=4L8oIlhC/6S'G#LZ`KT',bS]c6+h_#Unqm(g?0QE5:ZP1U0,:lcQgn4%g-$JVmed"uGX-(?Z^4*O2A't>Wd0)%R_lo8J<)&7A
%Y?o&)oAEAZM$9`b`7r_0Pu4VG/EHa%X6KM@G3"WB5$<N?J,Q/!FE`2bB_9]C4$"XddkhHXlKMoo>Kl\S.f\Y?jhpe_O+qL10qVsr
%_$%2TI4UZPq]%eU-/jb8l<bb\$pQ_VKWV-.@a4)2T=44DS+/,&3?/fL3W-O+W@hCde=FeF=PcfqAauDFHMG$],P,n-.Dgq6VVfQj
%-)(Q!BloErX1AcM!7pWTrYPMB(5o6@BAH]8T\!jpND"@lje'!=.r'X<nEeJ7kAf?)"M+sA7[c"'m?'k[0H,eV8c%5U?I`^5g;Frb
%B)!5cVQ[Tujt(#U=I$=?%YNR/j7EfY3WE^Tj#Dd>'epg*N/[I"K'>3mZH;h+GLJ`(%S3El`1Xk[9_\1A&F45L_tH$PQJE3,it*"S
%qGn"2P1%\_pXU^O:X_$Hl@=7'C,`LqE(#+?]#[s:L'sT,Tk1RA)WNkMnm!mIS#+7iLnr6CCA>#]09n!RH/T!tr8Jn1%5/+O+s('O
%>u?5kaD5'-$0TnC]p;!L!Q-W^O,ab"Dg,%&E2U4^kOqfiSrfRh-:9heS/^,c^-LjEjn13F.O6osO[t^]HM><t$ou:-ID1]7_QksE
%.E'@qLp+4DIsT8[oB#*,'#\_RT)>+o>jB,jn'QpTpeKN=;3\\cqaLma)AC6/@g7qP!pMVJoiitagRV0>!0brG8OL=$]2.09W^JW,
%[miQ98me%nfr,I6`msA2Xk9TLKQNOTP2V'hMUS0[^6nc6c1nXd'4I)>q-taKA95bDF@AK_*3EGl0_+84imBC-[n2W@3fIcfT>=_.
%BfH;reMOE<22m[n@Y$d-!q0n5?^/T/Iem2AMb(AGPtq#nmPaoBj4!SRqkTpq[^(-753B/"\QdK:/UUlH]!)Z7YkWDsTP<QKPNA_e
%r3UlB7Cl=I"FD8]Q)l!'2X`/RJ2mF'jn&1I-N&._kc0j.,1,$53f)[1a/DfPFN_bE_2CG@36D"GCaJV"Kq-8*nH:"9O(o8m*dMNl
%k'."(?VK?C$3-M;A>8M478j&rajk,^p=5/N+Du.2iX'V!6I3/Z>P"/tU%i?uqFHmXHnG_G6Oa3nTsc>pG+3/T";'&a>Zl'oRJlA)
%hkJ\Y?Q.W?T9cY_WcHF_OGbl71$8)ort(p,;?&@N/YZ1+JpspcWb&\2MO3^6^7V94:pT/i.E\+%M1Nj2<Ug)Mj6SG&c32BNH>Cgj
%>CSt%`5OaQ2!VRups&<A9U+Su`@oNe_ahfB;rdD\\NT.cChtO>dn@'CF/P3!'i12jC?4PB9ZNMg.Hs,nO=P@[MeTQ`bSu.fhJX(e
%&)AQ=84t<.N2`t,>Ci;fTCPe,53B-d[8pL2Lb@GTPgE7uSeL1Hn0cgchpPpZ.-\b7?m\6'h68//$GOe]lS1$&40&I7"W_fSa\o7`
%-1k3c$qnq$adsU&7G_?C#/$ok+;cOoce!YK^B5iS_u,5!/KZ(,R)8']VB^g1`ILV[0o!9Np0QWh"(?!Z#tb*tJ(f?YXsDU6XmOm)
%I[EVrq@futWjYuK_/i/)VBRWOj*ERLP*Qo%=F"3A&,YghG?4BkdS-5T?RhYArAjOHFo/R`21/j93lH`.(h^FgSilng[IP@6L\X"e
%qEqUAbAp8!()/Uu!)Mm3iKN[cD4pf6/WHN-_&7P:=Wo0#-$QQg(]-BQ;s!UZS;bh=ra%)`0NAb%!tTu4T1(Pa3UUiS>rDQk,qjuY
%hsKDfm,+N4n:k9R)(lksdMKMT[2\TI*]KohWNG\!K/ph5=bIZ,NU:jYr\,E='0!7DO28_S_@jgj/*RX;JDP\^$JE?2b=UdV\/FXW
%LXhAL!V;]10D8o>4Y:SDN5aHD-Wd6EGY8ch0./ADH=dkIcn^B5hp7+cZbE),1rrhX^R5&l9Fg%NV@fbVDNQ$;3P;YXe23+T+a*L)
%eoc;+3;bc]Lt:j=SR;!Q0BQd&5o^-#5KeK<W,SO0?s6;bg&Vs-/5.>(1UU*5.?/;TM5>6e`0j6j'E'a0,EjdRS\[+8>+?,L_%5l!
%VB!6XU,&"5co@TG<HAtSKI1W,G"R,#WIERqTd?=-VY='Yh/i(u`R\gQ;=@Mub"Z;'eU(/81d!4WNS[l7bP(1#DSOhbU"(3raV5]C
%l;_`&)84p@Rak((i"nuU<j^%RRh#NcD<k/X`"]Cqqo+!m%H@s;]?$GRZ\NQ-WC4)"[&CVU\3U'61u]+R3;)Jl::V+H&^u3_hN@dR
%qfc^N:9q,AG!2['-*).nR:M=khP\%4$SmUP^P]?!,YZ/u7&;9Q)(31%pOP?rU0dC%r_Ku!5ic1<bUc(fFns:ZbN-"S'mF_'6^T[6
%)Au<iGf@H?emm?%]gt5deAqn3MC"VuTg:mnJ=FSVUt@sj>nKeUXK\j(lq*aF^8LR2rJo'C>I1SI;lfnRakg^Fi/X*D*TgL:X]%Bp
%U?ZY/I%#aSUWHrTgtcoBn"#3gD@[3%Ttal4Pd!q!Y9j'(WMi_5MZ%-A_5_QGP&f(L9=;Ibkl,$T?7tJ-,uJ:\qKNm$-B96,<6.(r
%NI3si[;<G<C#>7_6M7^)+PGi5hl#u](\5]]ksUYjk+?[j9\&nme.^($AC]Q*b`Tei2\kHb[87QSF=b2f?gPh[6sZUNRd%aS@KK3P
%/ns%j)jYmX=>WF+Zn=K,;bV"e3gX[KaRUgthsAD1I.Kog";d8PRk5JU/KbKLJkWDe$:UGra>;KGMK9ORQ,Yh\ltbl>k$u5p.R)?8
%WjQ7t":lD][6sF3eM!@`kdA@8R!3Vr)2[@J1P-S2YN.A1A*?[c1,3+t\@Z`X3VKJj8j6HQ%#Il@W`*YK2>1gR>g47nUG`)E+802X
%$N,d="dE_FAK^NUQeWWs'>$bp2IW[=7SOZ9l/`dZq='mdYor4lrF.t'Th.8%D./1bb%u[6ZZg7dC(%`c8dE`)pe_R9/(GN+fFlVF
%1KZk+/B<RNqsZZ!Iu1mXSp#f[W]Up!mc-47dq4p0N_92oM.j*$Zr`mQGE/;]_nE61#HQSN2R_0pA?)L78MmAP.[C2r$1:>L^]Pb+
%=3Y7B3YsYBq"iN_N(I.u@SVToH4K%HD^._V/p\SC/T3>k+B[-T(aW>4[?XGW/kNgFp-IBP-W0asG:jNJE$Sj5OBj>a^Ckr8dM_#d
%(1j!]<&0]\V5af&Xo5UIUV\$O!df-JhjrC;?TBPO#kq2[1gr*-ndpDT_/#X;R+TWgh2Xu-I[Z9Og$MZN]D+jmBALRX)4[^i9/X#R
%n/UrE@,^2&,DsIKKR>melI&uffC,SbcnS:T1bV4cY'Mj&$:mXEWB&Cb<+;WMVZbNeYBX_hM'Q8&7g)4E9ZNfof:#nD=0jun6VM;e
%P@QE2p6\`*P/a8E[Z36TR<cb@p/&n'.`#K,g\+LdUYuMBjs`sgB5<=]m!s7G:1/bqS@/0=Hj4Jf[d*$daMU4QJWi[MB8fX@4t:ib
%JiM4Y6fWQ'&(YWE/%L<7PF6.Gg/Q0cj>fOG4Z2Pp8!%bGo^f!F(pr92:e8:/bl]?nK`hA^*>CV&d0Vg_kZcBh@WmQKi<,omHO]"4
%J,O9=#:5G.D$AL34"ICcZl4fr:ni#AJ!aBd/>1QV&!)3>W;GXH#+;KIM1:tS6!8F?RB`K`:epsi>h.!*K:#TKK[:bOZB?"B,,:u?
%&heI0*[pq?lm!;#L_nT6YN?E;WXgFB$om[S4"EnalRHD7lBrBbJiX)CS?QF#&,<'i(ff70.XqY3e6]CO4:WDVC"]nh[I7"gJ0?nS
%nqL/cAD:G@@Y<&:>ZeIAV-m1j#,@s9.E4jB3M/[@/!)H0DSjP>BW-6.Er>':CQ[LN>7f2S6?$!]!lJ4?[,oEsO3@4nT_]'@X'O3<
%N-ZpQ;br[hN;9X=k]9tak4?Y]s#-(3ROY(19B!)3D1<K>('#6KjL'1];+\)sAQY!!4"b`db-5cXen<Lll>F_^(qtI.*M]X6$C*,9
%"hoGfo[uK5\m+4d=4tO`+Ib1fCOB"Gd'X*'Bt8"-M1=0<;$WqVVUMR@ob9&&!gg!eE^i\6%[M2Sq8StC'c]jcpK]kgW;$:*qMpuF
%ZAs"`/F03/Mhd.02^4bR.RB_!Wd14)hkRc=onJ2`S4abtM=Y.;7cim8j%g8laX_ZCS+%Dr?uD\5_9#[@];hmHT3e.UrfBZeM,3NV
%F::e8G,_AY1VZjQ9U,*=d&pLJ<0C9Uo7()cb`6_jOOUB'*e(GCa(uMuT_uIc*p%iSHa[g1CJdf^c>Pp#;O\_ePmT^n#9>ro@J[n8
%qt>2sW>oZ`E@t4-"Gbjj&WLT<`h]isJZH2D%I<;<7I=NC@-EC1H_kIW@bossdo>!]<tuWrFYAV*#/UaOQCS_;'YtAn_;C?mkA@Tq
%e+ET4&[LZ$;j/'>^M[9`-T2FjmnU9dq+R/6hh(7cD%aei;F`.[[F$DW(fk9e4dBG`RVam69/KokSq/R6p\rK'bC1f(:b6#OG\Zea
%MoYAZRdS.<;3WL+l7O*DMr\ANLYt.N.(p;K!b#&k"h.4O<)Wk1mlQR/0R_P:2;:r_T2_>i<7iSI'Qfu^Y^Q'o.^4Fh"'7#<.>sAV
%`?[cj#W$jq^8lW9m9m$alBV",Ot9p<a?2!La:s7(e>9rS]ba;ZX0]&QdY*WLrhnutPb?Ls?q+)d>Bc`$6nd%=eOS;,@242o[bT1e
%*HmHM5B0]RPc=R4f%H[m_h!F>O6XTD`k8?F4]=LBX'Ej$4V:d..>*6XX1gEgDUpl9?PD.`]3Cnn_`ajcLCt7T&>t`Skts`1HE+$?
%\!<]*p;@\4W2d<<@O5fA3!)*^Eh2CW&(<83qYEKkP;&[D>aVrT,1XjtdYHa/>NTQj=:.t0.h9U_*#P0*(7gOND9&M@lEV?Q@Bu]C
%NJcL<M,]9dQi"U"8!H1ldDGkF:!TL*D<lrHot0H*PbR%:$]"b.jq"?Bj;f$C18Io?<kT$F:1e)c$4TSu5eD\?'E"PrQ=EQXWhsaM
%i.auSc9G))(#c:[MijPD2-@\?;0GgYO)H;?,bd*MYKbUqm2-T">=t#ciqW8bIO-.t\[D.f>q5C[fkNK9%JnG%YdfX9*?C5j)NFjM
%ZlLbMSFA^tj>2\@@FSfY(nijh):Q39:G*Q6W#'Gq0,NcgFGqYG+jmG)LN[!t$/7e%K%h:L11SE,[K;l.C4lt.Ifoe-D-[IBreKl&
%.a9B!N`S*Ui@Ihp%]PkdD94Nr7N&.mmV/bu6Wt$4'3^=GjVQB0k+m6YR$`c&SdEWY/pcm-GhQ$e2"n4;KBcr/82p5k(5#06;c#86
%9]&.JQ(IO_2>]Oq-0jr^OZ(^oeEkNm$uJrua`j[i..hhaj<Z'G5&J?=8G.d#d3R!NPbi8G:e:beBPfb4l^5kl#CB)S&3-@JWfk9S
%^TLAe0kqL^XfE;;=6E]'r)Fu&XTI&jQ+=Y#Kbgqt+R7Qfe3THZqC]O3[iM6Lq'$]t%sAK"`ZYY1Le*VVK=3Vq1dDDCfJCPg+R[ZO
%i3e9srhnutPl(q&T;^i3)>+#H_eFQ-Q)-u1@`hKp*>g,V+/;"5"8![M!dl*]C&:&.',="h(2o#9_OCJ1V;2oO.tl%84L.)4lo0;k
%CHg&&V>)G9C&<pJ4HZ!p/<Nd@2CWs@Ou^'eIRm(V82`AoCrV#t6>03'VMInDBfZGeU'.ZBcXs9crcL;^<]*;A;a`O*3"fd<4"6Pj
%_!6<Y2q\Y$Z@1H@UUJ(GA1uWulNU!JN0eI/)VRZObMq^^MLVXM)=_[/n@&J\_tG+9L/WKV=r'7*9p%LIM+XPp]dE"bGYT$,DKenY
%/Z)nq<>%MJqiJ%Pb#UqaNJk+2rYNk$'f?.X=J*Y@m+*<i&fo%kOKl`h,upD`a!fG&5L$r5DI$h`"=Lh)K7OQg3%-Ad7p5Liesl1i
%+]L](0&XuUPnCo\mm1+QZlT<J37lF#p(/#T:5_"^l7[H2-fln64ru2CA+Ejn_+iLKg9BM\rNP[!iXBX&iZuRVQg:MFq_Q5Q$Gk'B
%*)*I,O7eWge(jBE+B>>W22.>4Q0a;%(n%<^rha?dGr\k?Hm[l!4]`1j%(muQ$gp=S?``$UX!g^X]5od=[ZL:m-?@>C*_#AJCTh2X
%W"C2aXd4-^eOhPKmDJk82!Tlk?<PGI4u2o\`5Q0A8<Xlmr8=@dkQ\3Xi7\,;mbO.cVg;;KSGQD?f!J<2O+\qb6@K7LeJNA+FAd:0
%5kYfp&jnZePoMa@nD:ohZ&,n4Jl_EDjMAIgC-c=e%'9C&^NM0&$hdbc%s'[]F^3IX3dt<p)X?Ie*"LZma]VE:Q#kgZ1:BC8IlnYB
%rN:Nsn:8FHfP6U#O`AHL_=;%Of4$?=`uZL%q1%-?,m>'(8tYfeBGe9O'*ZQeBLX3W;.k+H<tB_#71[=u@].\g7L%^i(.g8/'bH*F
%s+gP+cUL9I.h_3A0k]c81g,P[g."5$`.i.Ba;#!h)6`&ri(<=H?ji'o9Hi9kBg7>A]h"<(&1m*i^/uTR.)c\VJ+ZY).+Xk\+kPeo
%MUGEO=VNdD]UYViS,F0Bf%Ua%K0&Aam%pf/%K"MeqJ`0!;F_3dQ9(QMUlsLI;jZGhr^NpbB&3bNc<Jg)>-4=X5t3kkcU#io]-UQ$
%C;b"lbgLMq8*X-,X@W6XMR_R1a3[eQC_:dA/?Y(EVh)LJRppm?+Dt"U.&'Bi4]CNh<;"EK;2rL^#r^"_r>8]I;49I_lqC$U`O=SD
%PIgBY8@27nO\0sL$D7+<5])P0)Mnual0tTn+'=K2.:sNY0tU)7'IlNsrdh04*^S.NO-Ll&^qr:jDsJ_UQGb"Ps1#kfDs$N0`:`mH
%\?qg?\Un@UBOG6DSa,5/OpMpJNR75%<YbSQ6u83s\8u211ERiC)XL'u;*D4kF6(s]6CoZaL:[qQPa5ug+o/%(/oM-7>h0eO`\ckY
%I@?4Z;0JY-?G_RKaE^E1UOalFlbQRG#d?bCU[g@?32:)NgPQ70+:EX#^Z0?#;J9l]T'?!<ZDar#"_C>ff,%nZ_ru8<X_Rff==PFq
%.LB7j9(+_91%^d+\4eKTldF,pZ1"j-K_U/J%9Q-iaLDN0YfB76eD!j%:a5<j?AhVVn"CQPE!u"R<Sg&>j[s%:7BbsZE%TN(C3KJ:
%rQgmp+WomARr:-41%,3G2UT./gF'73)jsJn<8sX@*M9C4Rb9s\.cd:d2_qA#pu+@0W:W(Ke,F^X?2Yu.8_DB&;p[$qe_THEeqtD#
%2)QM6df"j_%j3IO/t%?3#QA01%SVt[a4GBc>FrI_/2Jm_BQL&4T(B>PY6OJ@Y"_(*ZQ288=Q)490f0"bXfU`Lp=Yr;MS*8-AVK_:
%6XH^q6QG2!N5t`ZYp2]#D*"QBVu6B%qsfP@+\L"afV,!"-1+a?2T:jH*kcm6PJfl%D$A"s[P"q[+k((0>D'$PMtn2mJqnCc^Jtt?
%)]@M6>4KB?*nM+p3fuVf9%%h(TY;`ncDDksTqBnG?qOsg1Ur\93rT[l>'8(8JBF^nVIdRtku(![l_<!>%pOf^bTrh3mt+CflXa5c
%l!8h(R543p;3!b3A>7LFI"#NGmdq3/h^.HBVF<5=I[Ybic5B2jC#P="2eUSElGb-0AdCgN=Ht/I\T-1t_%FfSM8L2Wn"T?Aq<O2c
%[1::Q'X`'"mE<B]W)\T"Y=+uHN">Ni=&=t"eil/:q4<DWL;34drjlOalQX[E)/:L*,4RcW'FFTW.E(Q1D-49>V.(;YY>^jNhMLl&
%9Duj+ofK3)^VN`mp++bLmS2tKYR`jq:f-W'$:R([:S"1VLL<m*iCY3g-iT&"lYN=nVVT9XU=q]gd(-0:FD.JH3Fs9ZB0OII0T9HH
%&sG`fC!md0BDQ':DD;]7>8DEJhr<!gd553F=d3'o?Ce_7kO*&kQ#ej:9Y>?4Gl_E!n\]J8W9E>DbrW6;Sf4GCRSG5>PG[Is&GVY&
%70>m:CH-<E99ter0+AKah.D'PO)\/^0'R"0/2&B`Z;&<[U7f&O\s9\W;;F.&<9ta6.]=n2&B`Y?f_/1]Ij@=]"N_-j5X$"DNMsQ[
%2)[`[C"8;$.UI3c%ii/uWNuHm.6]<'OLgPn[OUhEckKDo`,$.5Ps`HCcUeGRM)UYCnCMMu8D^I<L@Na$Ns`K3GAV107;[C]S.26p
%j+.?('H(XXGRt`qO^snbX5XihF9gpd_fUi/^J2"`=JmI6B0i149_bF6,a6I]e_nB7Q6_T.0O>&+E:f7cIun]#g5]$1DI9]nVrG@]
%6$<s9gdP*nHOaF+8rD$tC]#L9;VT3Y;W2WbVd1BAH5KHgQM+c_S;)`"LbOqB9fH'B;&Ag<@IP:#,R+F[\feTaL<T%_m22,D1+T)f
%<-@B#OCWbdm.*Y_jr+!O.=(lp2NeZD)j8t!gH$qk:[uo@&)-]n+Eg&iaDb:eXtK>8>q(hlqG.qt'gWI3IW"+*r&]&_;bKc5U7\;m
%d)T.^H_/YuOTpQl.Vc(R4bE@_8.4uPOIP(T,NX"bhG>gN3#&RDLM7j:TaCnd!eNh$<jGYE>[(1UijB1*4DesU0TL>'>/eZT/=;+2
%oY)UnVL;-oWfme@dF5.#<+Ss[P/h(#d8>ISP4B0gP?2"&29$$8.gb>'+QWO/*M[62#\TQ$adFiYYbc:Jk<<3YlEaA\ee)SN"sMf5
%2_ocN9C[GQVeI5OgD3]Z?.jF7fWq\^'-eL!&4"4RD$X]pKE/Ztml;-Q`MZJ-"EF@WFGuW%_a1%23o4c#I5#=^'[rlq&:?`2q:$@Q
%mW5jKp)]NkV#/+&+u+]hS3#S;/[JGF+N\FdfsNf:%POB4`,pFo4\e3Yi-DmrZ#J!0kYOrU=LH]rKAkhAPt9MXj1qo>3[%t,/lhj"
%R_JZ4<CC9W0WG*FC-BQ(<Q*Fp6U?,ND/7#RC85l)NR,&dABEAJktlne`noQFN=WuHj_XD6,RFZ`X=F72MAM1lbmHd8Vc1u?f2g(Z
%l-):KMM(DVRenWPem`^07Hm3+2>TfFCE`qb"I'=a&;>f]!G7_Kc@eIsr9HQpN<*3`oj;ps1'jB#CPaWhbN34'CGc*A*sp]n*2sEU
%^V-]Jo=$[kJ`4m2.K+P0)g1LD[g"U=0)EfsPmL"+)PZb\:i:f8^=?CSJZ1S]<k/=oF:^uuJ,RDj,XUF8O0&3q,VsBnnp/)kaj(Qq
%l]mj+84U-3oki/U'ASg&&V`?*YgP25&!gL.?8.STi0:5`MC:u]@e[E*Y\BjC'Q$X<2CLo07P?3Te?`?!:UP)=U#c"E"Cd*O-'KmZ
%RTeeLA4BLMqJBTbZ*K1XCa7N.G[eni1pqmj<S"iJh_!^t`AKU7Bt?o"Xk,HN)-G(!h8sH%`f]K)d<%^kCUV&UT1`ikIG2E1P2qDY
%$7gLM^78%:lPa<bS34h?^3i.UnK,Yp*)5TpCIdIqCO`VVUT3OB%hFCnnJ>R28Fe`Gk(@PE5("ZO/_Aa/7g4^tLuff)nR4CHSAQiL
%kY#9(Y`71S""lANiUT[W_@:6N^a:s$UQ4&LZ"c]Y?dZRQ_fgu2%hu\XoWYq*@W7Uj1,FQai7*cql>u_Zg;tH&NBYlkD!o!2ESaL?
%0d[P0oe=@#p+e?[6.'Fc8tj()hkpi#hNLHmUer8K;V/PJbcFUpG?!h4E_Ya(4*-4N`28SVI*%tTV[3f5\7*b'_E#[MV0bJ9&spf@
%e*nB`*D/:kl8a0c6&B5Pj":Nr?[BlEduZ=7dA'.cd%:86jAj2_&QJ;,SR72!IuY=X!m?BI_c=,d]i@UjdrL\Mp";G&MTT7]0_6Q1
%]C^K-dQ[C`NQ>]/B)@T\E(t92YU6#U<0a-B&VWSI0WI"D7')dA"[Db(As'WV56#'eN_(`aB&\Eg<9'PPB1M&=))Mk)<a_aa<Y+S&
%?$<O(8F.I#E>BLJDO3`JUX"B*CJAjZe)3Y@J#4uR&UagIc8VnZSa"LcW)@TLHP?nX&/[2K2X(p<b-lrOo\qIa-2!k6mLS2*E%[nE
%>7X?uT_]YuT$+G)//="dGA<PlRcCK)Cq6;n'j=G%[T_IQ9lHq@o0i1(b,=Vg.N,3pF.XlNs8$H\V(rpA0Db!<B2X![4J@,(Ckq5c
%6>^@L!WTP*^=HrVBX76r2>V`:T/UbjIOI^o-5TZp[baoYY1N9,L50Br*KB)CCu=uQ%4QcMJJ`6[OI.l6A6QIko@!-ZpXA:S6oI(%
%=VQVA`#1CI/lf2/SDp&#hRjpThG`Z<Q(4SQhX@GF]hZ&8(%j08n?!qk<c@.R,%\sqfll[.fFh^^(Ts`GNEZ!=:._a"PJZ@_AE\(a
%IsilKCSK-A[9g3o):?t=4$*QN#eJ+`J?rRQg(F,-ph`BX.:+']mK0c1rpjX`<.e6TL2Is0ULqO.E9o!b,G`Uk#e2PB;%^4iEntH7
%GfjRTK@3BCZ#a'\pUgAd<:O:SAH!uZdEVhsp(A)t7p_SFVAY!T_2u_>)u\R@A^:Tt;_W82*[SfWg'3U`T-$d\+-;2paZWdYlJ$4C
%\F%8^VG=$=ZNn6>n?02Mb=Om;QJC#rI@ba;)ch?M2^lH@lT[$PL*I'/e_W"P^C4?34Y'3SAf^d7k;m6*h[cQmC"]q=Cps/'9\He)
%,Y/^6[LiISB0/&)KU4!10l6U=Dl;00.dHe<Y+2LAbKugp4OqfIc_trnZn(4)lCVEI\Gq7!9#h$[F=4&CKH$@ON+NgXNY6CCN<@\*
%'d?qA@SRUk<FUkVI[f>GfT,EMo8rZBqke"m)Z^VZoief.bO$TL;[S+2Kf]nNV!O)ko:#D%VW\Q6f+4\XU"W)([_i^-h&:%a*E`er
%:lXfCG4LY><\/2JCf#4X$b,f,mH^EFLd^jA_2`7l;KD>L.2HodO86=9Gt,5fa2^t>7X^<=)=Mmtjh'ao<78Y,)Kgg7OOfad0T0t;
%IQ\]$050c3W^8O[Sg_NucS]bKp=&LO10J3tW!q4_/5iU<$D`fNO')tWKOruOArc1.@TP+o00+pY4tOI>^IksJolP(%md2b5[3>@-
%gS.L`f<4tV&o*pfol(:o=>f.#rI$X'*q\,0<4.WkH\]WJ*Eneo9b$^,(ed9HhWWh6%I.COkjDcRPu#kIk;knClk1#"d<?JuY$mm(
%gKfd6elhFn9@ikn9J'Z9h9&#.s"o-/Pu:H1;d+7UhP*InI7P_8>Z+h$XQK"#<*\%5=;DQ2K`'Tqr585VOdKVKZ@6`64!72*LG1BZ
%)$1m_Q1=\jl!o0J<H8W:/sNO[p\"B#3QB:u)VkMH5EEn7P&0G/h4ts!?\gg;_Q/.jD/I<Th+Y_;qTa4JR1J%,.K[H_$[lU8I!mc<
%%0/`BlELnq/p9WFeJg$7&\&U"Gk=/]kmu6e:rop:Wh_7ObkJI^`*kB3L0#I9"oLCUo'nq]>jLBnCu'`p4nt&s?nKDoN^*q+5*C%J
%)`-QqFeLLGT3W)PArcktI)d5X42-V"4Q87oEln#7k0$La+TSIM\(m:2n^aU;hRWe2[bmi,J?B)<?KB;.SIRD1hdW#)NZ2nNMhh>H
%.!doUpB^J?R!oPqIIZK"&D`@b6er[JgK6BY754mU<_W8LFajcMT4c0=]HKU^T=3X\%"6f2IV4\#)9Eg[O(#spIq<.i7C89l`lF4A
%kr5ofllI>j5>C$<!8:8T3IEk"78&oA1kpZbmLBP)MK3$\eK[mX)g$t4kfYc"@,o/sHTU"j/l9&/AXQ@sJ9EO+s&gQnV(Ta;oN$-7
%3EXK!U=/&lg6hjrrH8_jEPWf%T=<W2Kfdj!W^uaSGc?UuTUA-E)BW^`(+,\#_@2"q:YT6[\.NhIiREj:I9G:r86'<J\<"#HTM<L(
%QO>I@j:!C`2PfXP+4sB4fDeIeO%&e+mg+/1[\g#<^#cb2<*,aD1CCV_?2d#1,4YToPq`"fI0\;%5NU_g'_*o`a,!R8]8N7PGoa"g
%Nc$dRa.0ri7D/2oC`fNa:fI_jP/u]Q'>#gC>+.W2$,.L[[8]T%Gd#`]W+qsLc!U/*++CQo^:?VeLPI?7imf@L^9+AN/J2TY6n`F)
%MVTo%.K@;KTtKpS$%J>V0@<U#1bNIL<po/!WK$4QqaQZIK(RM-NA<j@"[tlEmI210j@arh^>Gmc+"pns>OgkH;-2jYH.+p%%PJ8X
%[4+%&)6l"0Q\#>G4%'MS_tJH,AGqY\El.(AChSYudV(di2++Fd`>7?.j!BCp$,q[:E6d]*k]bM-.oG]&D6Z`TaZOi8\>FkQ8m/i#
%PE^j0Pg@s[<LH>k8](N(Yl,V#nL_Rl=?5*,><B?<q@L[t"%NWZ<?>,c&TZ*i?S!(_qjuhDgNSWcCVgj"W;H,X)u@o[7?'15RiDhS
%X,@]-'78/$=oXl9=F[k!hb;o^H"YbkWs.AhB8*LQ,`;D0Wdf>Zn-lhJ&ugaT7U!nD<6+eqH>&Omg@eD>!Q#j>mTWl58J:I[W[dUC
%OR&NREXa+=h%Qc(WGjS(g[h#X2nSP%/4^e(<6^s_Kjps#VS'IeK>::b-$l6i!>WMt^7ipka0B/>B0#f-^K+<-Fi2`?,Va5!KNEj"
%D$G@WA@OHaVtRjSZ1r2@rahDjaqA2Bh])L\WkQ$:ng^cs2;CK03]ZTgGU!+4b9?PS/`KH+8$nK##C1/kO7fF<pS\f=28#j:@tL@b
%$L8FGM5cT`"=q;bB!&_KFKtcclDkg"[L^jU-`c*76g`,j^"\hR.7:J?kYB3q.WU=QQ6TV6;Dt3uDB&?DIQ.6);DWI`>(Y4^pIXIC
%90V!La`1#Xm^255YN-::#(8Ze\gB_)I@]>@e*l$Q:oV6YH6tW/l#Zl4*7;m*7W2!q8mMn#k`ah0%lI3ab:2l&!;WjIVa;4Rg]T(:
%`1i+t"Ctk<NsU$BW+d9hJI7#)>"bb4p5VMAN>sb8:YU)qJZ48I%,C\m'W@`URYK4@X$tbrOulUfl2:7#&@N`33tQ8BEJG(Z0e*>B
%o&a$ef/H.)BoK59mXmP[QQZOP2/b%/D[@LmKkTk=?i4O3qCFIT_gtj>>('tteH["(N7K1J6Y/&J#3^GuUA#g;Pqk((X]I<n:YU(m
%'Ocs;2Bq`ZY@:Hh7TUnY/+$Xki1uRn(c`3ACd)Ne7_ri(n,KbBh*LUCI.#Jac?Q!mbTUm5Ym-aR5uN3r1[Xh*FA<LIZ6<\N(lIPW
%]dquWhbgpY`EqlX@WET>?fY<fj;V9=-C7sp%BPYK<FD/7Bon#%lh\AcN^475C!s91qQA/3//$.#\hB)pUh"n0\/jE;5q'E6g.$dc
%n^FWO8<JOX'Sg4e]o*)kE3T"W3RU1$62B_XOhm&3QV/i\]VZQ3c+KU%ojR_\lEfA#3h9=-F!r4b(2[X2p<S=_O$:ljAe*./W*0_#
%L6R%Z5kib"*OOjtgR=Ua87A?`>'-J4p`6,IW=ir3<i^R0K3H8iY+(M<%As*%knk+#2_@SK'"8J#9rA2K/RE5<7O\tb@-;b1Ln#%`
%"/$X&[<[-KOM1##E/U@jP9hhdlq8iJ'1<&hHF?-]Po[gX"dW62D`:W5]db9-bFJ=n^0C:c.kq4e(Gsi<aZZrMDuZ^Ij[2,1piKH6
%k='1@RQ:7OYaTAY2Pb@-BDBqt%*D_92+QnUOkDdCg`t<2eJu\T6^;j=F/>;1PYc`Rnq-U)MqSc&=[$][;*/"U-;(T)qi#eomYD$^
%C)6;DYN0n9`(;[Fke<.2`TW[Vnm;!3B>3'5UJB8QQ`>,te,VODPE-0$RM)X(%GhDt"YB95Pr,4$QR-n5^(J-4p/-r?>9l;3;5is]
%@Dm7U.*r99+k.Y&M[B\[g:M8#1TFUZ2VjddHqjXJmA!8d%<C)6h929WFY-,0V_=mNO8pTG\'_iS/%\2(6pm%PqCIm6,NMK]D9&SG
%TcpB4\>i(-HAMV&HKtN,/_ctH42c06@C56rTrZb$.&#!NeZ/VA+/XH_9-U(4NB\NAOlBA3X@b#pH>KY6@$[H#%(>@,93hcoHjVuJ
%aHV/-N`!D$O4i4rcJl5<gd&`6-uQC7LiN'_EU'u!1d@<mek(jplg=-7@6)>,_dN,<`:s_n2I*30dCAm`W^sF?B@@XNd=hp/FSB5R
%P=ml*+/\LoZjU)4IAB@Y#:T$h;`t1rh@[>4P$XlM8UTneW+&Ar6rmQPo[@mj]%CV-e+43;p^@MGKSRKpHi(:M0(S'ie]BE(,)8`j
%d5k*lO+VnK^4Y_&9jR<^F4X@8(?&3>CTit!`M<*c,_FP@_j=*#Bf&gX+]T>VpgH6RA_U/6ZL2_L?JQr0;qjP/'Kq%uMO[^AUo`:O
%E@Sot[l$Wo<naJ545r0KZ`P(Ha#IapWub?@F/9RVa3i2JSQ01:l%.]j^a,Y)$Hc\_\=^3X<*"t.9IihrE#Y%&OIKl\,U&%Gec$ph
%5\prY%aq>bYb0o[>4IR/LZoWhWV(!=;<em4A+K1iBpMVFHlG)_1Sds?)@_A^;jjQ%%FW>,[e&BMa-b6J#F]4#=I(H^+_?u(%Z."4
%T"^XiD:M`Y<Ep@BB5/6Cd+4@EoP2hQh/j'_R72tl[_$e(KIT0Pa[tUP:9$:52aT)P>\2TAlZ?m)3*U14:\&B$4mZi["+oYNU=Us;
%4f]qP]aQ*C-"T43d3HY;6?o\$Vc'9J&pi[5Vu/5u8'\">PtsU,(`6U[]i$7mM>.gH]Ok0k1)&br6=a&W>u7f)-f%"hhks\[C%CjC
%Z/<79O9/ra<[;hM#t)?]hP4Y/M_c<FWBEpVEUC:!o>CM'MQQM2d@R^7T6F<$<7@qK[p?W^d5((Xg3h/qSWM2$D:@Y<TYW;Dmks^V
%Wi;XN#e-dHEc!*Z]WWMc7qZb1VM.;b!D^]G;q$TD'5./Mra)o6MR1jccKr4lFBcH)bc?L^)1M6a7,g*M$E5G;:^S4aJq``QmIrun
%p7B^1BjM6:a_m-6@Q$Pr:HT/S'79B^aX0.Fi70k#If5&tpW-&q=t8%EGJ\+k>hNZ.=#2N`aXd$fI_Aq&WhF(5<\IgpRXW"RI7f0p
%k\g6T[:$f9>H7XoTFjlJVlA%43l019`QVk*Tsm<oj4AdJO-).C!<^&rZ()+XTb.b4"LY*"Se"GVTU9IGlg*At\:uIAmm0/4`Vpm(
%iYsHG!*>7Y-Zl8[3pJ/sCqi>5h,GX7<dqlJ,a=DJ9!M3@R_L*5Euan^O;PPR&'7A0R[==(d$IEp(C([1,l;[Q>;p'=GhBp4^Y"#H
%4c@%&,Cm3aoZDJ'H015N@-ER!-`oau%32QM>+4esZ$P2b:]'USf@D1sFmdl[?JEEE:^jnRaiF\=[)S-6pGZE94eFTM1Z&`?n"IAI
%9_-cYE<iX@L*2tfgLc:Jq*+CX^\rFTSg]%@AgHn2XM<Ys.P\K6Elf^<k>"X*O'+/afVqoV&j7@eet^^%'adSBO`md#Dtl/=^ZUX"
%I^N0S0nSEp1h22PQ$ocokc`Yh$U+F1iNhjQ;Jr.BH`hTD54$>:b^XA_.>QquS!*(#Ot5?&p3;/''PZ(71`qGLK-r2If8O!)#`X;%
%^NZ02_Q2Q<'=ZRe@Toqf=QD@?DGRZE61\'JaQ[n+VkaJP?+k/tm[r'Y>Y1[DI$%M6r+fW_e20P=8`b?FSjb/W(C=h+)BDud<"EL[
%:X3NXh16+60f3G3@;h``Uq8UZhQ)&OJ.\W.S+;u8Ni+QU?,1nm\)sq_`DiAUVu8\6)?H\geY2GY/pb<hlh2p;#S/*.:hr9'A130#
%K''/g_L9o'rNu"Q,#tnr4MM^ZoKTD;jgeo$ITD85MXr4O6e]*3OD#mhX+u5b`sVIVH43J:`]D`aLsFkU:@OhbX36O=Wp`MFld5bR
%D?,FdhlqWU_SK6^C7nm/"/gcWR^&>+X>sW',Y_lqM0"c%P<b;L#FtIGV'a#K,?)I2P%_\,o<3gAelWR]9BZCHPA.S/;@J/C(O8/8
%[9KtPEm\aB;ttY0ijR-[)UFS=/3[(!kH-FUQBW>("=\"9:;#:a(%3PDe%U<)k9hd6&Np+Ym%9uJ=#oB^O=mU0oTL^qj[+$WEoV3M
%Y4PhNn_9&_PWb/:#m<n0Y`MP%_6@:ja2iWI764,rEMdDe#qr\;dup4K11B`3ni2T%FPB#8Gu!Zf*.e4+=c\.,?0RlX.EO3g7Z)>r
%FG(V!]jrCdRta`@b^8s0>!1Pd1">gl-&265^(7?qVI&kqFqMdd.&6muY1&%CMe@Sd@oSnM`7/hPPl^R;%NUUciAlkSm)RJK;RB].
%m(PnEA@<La$@:2WY0`PPF@VIV(n+6lhrELnfpV,L]rftkp1%d-UZpDsPprl_Q;&[7R$ct.I;g>A="2F]Na_\9$Ah>KJqba^c_7!*
%Mu=JrAJ+cq^6J"oAQe)UAnmLP`W*&?0(k6jY:1\kM,"3):7+qn&GuC4mmF.4RN,I./t3<E%B\>CdniF=b&us/HmPZB?hoG1-o<[A
%D45h%=-MP.hk=J`Qh.,f%`cL5/*.E\Z+NDkX<4DBaZ;=Ug8ZUmL-cAqLTkG#rF%pFQ?J8dKLO)W6jpuWXJo)9CffXp3G9iN'"%9&
%:uSZ-b+uZ!B1V67g5hrL;bnitdP>e=a@N"BM5VWp4[Z-2Z>o+i(UD'0j`:0:=qWAsg<?8%pgO.3X@PXcC[4`#H:D:BmH9=liglVd
%pK&X7-e`(oG:MdL'.!o"-i.Q68$8lPOn^A0ke(0tO<&d5QQ0bq"ecb(\k'u'Q_5VH!NVhsjE^FUbf@dU0N.E%)Fg<lY"?6:p.uBH
%8Nr><Fa_Uq3`n>H$U-bgp9$:V^9%(brl'<p9hAjCX.`EMmnI';cVD5_+ntH$C=c3K8'e_Oe]eR5U=dQ9G9FYg^EZh?$0`XK%<YB%
%EV3J^lbg,(CI9^rlKAlVcr.9ClE,Rl4QB1a(r*s\Mq>m/b=MaL3Y`qHpl[gX/*rq2>innCD:/0Le!X3NZ:"3853rg?0kun]LSdTF
%Vd8JJeEVQCWi9sXK#&,W?(KO1+.hroMR>BZ2G`0;kr8JoZrk4DV50d(H1fM\808KOj^pP=HFN>m($'CGL0FrF<Y9tca#jd+O9#6d
%J%qprU*(?umHRUt;G'Xb[%`ZX9_a"pC"oXh9mJ*mhm,)\o<EWJq)@n"Mb&"hEg>uNpNA8g3n=s!("mmb?R6<?[@Oh-0!A*WG/TQR
%B&X)UmU,>$d$UOpQI4C7>F0T`I+2>`(N7gKbnst:<NJ,\BP9`aVP/_:FnDg,Dt`YH@RG):8Ri:_#IaU8>TCIu/3IZjZ1O]S8IHEo
%F;gcaE>=C-SKHGO\:l6qW,[``'W^i31ZN@;N`#P*N2E^.JSWZ29$GtuGZtfLgoS"QTB9Wo/.LDDC:@'k4sQhk3i.Z^dCcsnLm<8l
%NK&aPG8:M7-&nF47d;r0GA-US,eJo\G*4U97>/XOgB^RjW@KjC'OtgB((.'tG1L87m%Jk-MtoFimt2[CR`P?@e7)QjH7&(qDHQTR
%!EM4h@K[#gV6*K4WlB,Z0Rm@OA;8^h.b-9B_"-tj;+`fV,ht3_;`58?Kc4&TGO6_\pgtW!n$kc^e+n\3PlLD4S]Nc!lA->\ZOY\@
%/[oMV6u8cX_m6^%G<CA[ItpLuOe=5!*lDQ#MDT+u+[2sqBkXt.g,%uoAI"=nCPXNk,ccEZD_cdHJ)+s4"h+AWp5H.#%lm]M'iJe=
%@0gb2D+h53K!.7djkjH?Q6,Vj5HWgO;8UZt&bo\S5:L4'A@f6,kk$B;:9NkjUc&FVqOWIsMPRdViZZ$g?gQ[Dg#>S*),I-kfN+]h
%T`&rKs7A6S"X"SbU]Y(a4pDS`]&%70c/RX10D8mheWM=E[.2F6^I.>IUeSm'+h:7_T@sR5I9UdUO-)NS[gHVEB=IeNrdE/rqNI1`
%/q;0n9GPXk;BSXs15R%c@Re-YN>S?n'+Q\#>k^q,S%k:`YZh\U4QPSXB9=a""sBlYqSql%l"h^oEuFCrA%%mk+R>>NrF.qpVMP<M
%,5i^.DZc_K%f6Z3ZW]Oi&MrWLD*=JKkpaZm*N)V'515?N1o!;&qp=^&8'WK7R@qT&S:n#B4\of,]VV$LM.^-5,2^NSKe$oHpu\pf
%,%(@Ys3'G#g1'2R]`>Bs<$HqKnDLc:;83fd`<Sl02J!E_Y:epe-2#h,27oKXI8GAXrP1b'p&m:-&aETS$UsuVg.(4sNHe1lJdg=5
%/$c1WoBT(VL1@m)c)X0QGOH9+UUH!_&r(7#PmOO0NfROY8YIdrZ>"93>3q-BeYheQUIkQ1X"<k<7@*W!H#>5,r7eOtlHY*B_ns+O
%HeagY/7Fs.H$p.uc#a@dX-tlT-M3),J8$<PAtGlM>J*?<\3oF)k;27#"st&T4@e+>k2mA0:YU*CBl2/RZ'E!h!uZFOF%+%97O23(
%&Jo]=,m5#DQ,N9"3'HZcQCjIkb_baVJZgt&5_K@4s'OEj[-FqBBmTB&r""-P+:5=fIWq,JXeQX;2Q-klor(HjP#=T<.Zp"'W.2!q
%??7o`[Gjh93UC6+5-qcq`@d3;Y$m:np%aIP>S9H-;Q'Agp@S^+>`:.rUr*oj\X2TZdE_\+e[RMuqU"l"h$NP)G!`((mg<\!PfpBn
%3Q9EgMIZl[9_"r@XO=EBhVQ,%-5u(S7FVRt;UATa76XSV(=Z8WLa!]<7u,BO,bH&NpV(E,-KUuP?(B:GOoj=6m]];!$'Wk+[&ugB
%<$Hia*]ONbqS9OQ[.[dH=JV-=LatXZk^!`s[ZV/rn72.-"^l8B#``"oMX4\dnl*tLgW:O^WHP&8;,sKbad(U8Rab-#AB%/D='nV1
%%@kU&3D9DfWRfS^']J;cmUMMJ/LfMASZP+P&lPWMr9^DMAsVcA()M,3N_Hs!0`27ABH6P$e]0!K9N$ZMY41@'aCo.Jn@G]7+"p.h
%;js.:?600F<Ne0#!CNL?esGYUR[&D@+DK/n#8fV_<UoXfa;\rQ@,+Dh6)Er0Qf$G#iU8*TYF!=2rMJ7"Ji;&+#1W>t1\r"sedQMr
%qhPLV+IT2XlQ@Q5aRF0?17q;hQ<$/*o;t*UC;!;AHrG6rS`3ATi0m\*m`rjW9^!)NEk`YTYGO#?4hY6eFde6'C3GNCmM<6::bD]N
%8/1OekG#QX*X(s6^gU'.6#/h`-E/hd+'b\kRi]N4YF=:E1?F]j!6`6IAi"QefBt\"T1)E,m6s(l)'Z]irhqBgK*U$Qd.UK\7[`KI
%4+Y-a.B6+R>-B6Q74\I?Q*5I:_tP-Veo=j<94T2N%:Sq+gT>5&XL_Hlq9-+L5jr#U**(VUIA/VG\6HN;Q$iYNs.dk.LsmY4+Ym%=
%GP-B`>L\En^%^7c#Kqq/'W\/bPY#OXX[Q*9O-S;A'VJSm.L:hYma5>XnXs&VV6\"3\682bZcSY<<QH(!N'm<^J"Ed<p2MK&jCMCM
%Lea=R$>E5KAbV9>ingT`][qTBKcd>eJF"YJLYYqBNkbAlSs$+J4).Ao%ji>8$$'+Q6K]l?kNp3TJCeN;&EIcKdJJ[,Z$8.Z1bJct
%a";"@,N.'Lk;U/Y/E0m_gDl9/05!YZUN>:?@V[41EQ[Eg<=*#=]6o&9+&!95PR[OKabAK9`YM%*2qf=#]%k(_ZN?dhUfD7A]nD1p
%M_74\&RV+5,bM;k4'GSZ)C8;gVq],3`T,]keT(>_!Q^`^>Ec8UnP;pm#`@?**LiAq"R6!L=bN;R+jI4T[Kg%3V)jQMVp1d_ma)1a
%3Seu8Red'ib8Y[/.>uD,8tu@MVcZFE2!ulq^3#-1`?'o1%0ZtqX5psX>KMhHDXSk<R+j\o@LF6j77b"?4"^"ahl;`7ThXYrNr'g6
%%iY?@VHnldCjBa,W2J5kA">D\>Y3Cna0S\$Wl$6h@k+Gs;3E\q9l:bl]>,0o4W:+<_-Ck,9'^H`$B31141`/@'VERE=;K+G(&<<K
%-e`:,egpj+S7f4uGOmk%JbUC).*jY*ArT8E5O1N%O](SD:0o?8hu1Geic-_4#='[*e5UD7\R+TA"/qiHSt;Z*kZd^7b,uW=#/1"^
%<;I2S(.U?h9T!h[G(oZ2X)RVS9-fE?/.aAUZl&ICWm>>#3$q0W@r2o:AtHYs[k,[oo@bHr-dHNiPDXZ$AY]">4,4NRL8<?:oTEMW
%8G_hdX;g2Gi$eC958RQI<L_pTC^=QFVHBHC"-Y/O:=7ts$C^/ZEX5.&.6p$O9b:[\7S_'_Od_UJP",Iaj;&$eni;O!^(:lmc3*t5
%^56iVWW(NDX*UZ2c]n'Z$&4+2MGjS6'9n@c&_SCo-``>:(ts-Qj?@&*Z4c'PlAq$p]g:FpbOT4tnkkp_C>rsUeDnX88+Q)ZN1jCR
%c,K->&i_rZF.@"SjKIl4G60`&grSU>c4@=O"0VmMHj0^E0,e^WnAcc`\o/lbIA&1ee.:\T;4+D-f1f2_\9s^J<"Q`I\6NK[X[WY#
%Y;[1!;6]rG*EEp/A+@G1i;LQX\C7C^B:R'-oLJss_Amm$W'9VeATP(Q!-+R4-njCoQ29i8;4C,;h=HIP>+\3()i:+75Rc68UYd:"
%Heh'h0@geCkk"&Bnltjn8k\,Tq"G#c?W!;)gj0Ko)#dk.mq"c$T72M2C^G!+MUC[b3D>>"d1$k_%\95\I0e([7<_1X%n4iuS(h,.
%YuPhGDk!hai6cr(*%"5sVb4-Ab`d[q0_QW:dF65sSV4l0e6MaVT1XCZIMfMA6rMuJG?BPH5YW3_US:9*-NXg)?_[IWK7u%\?rj&g
%OJp8pSQ0N)SqO0uWfKl&f],.Zfpf4*C(Uu5*eIj_,tYnUpWk@-L-q;=l=1U5<a,9kp4(Wk[&O.fPJ:iA>UWg(I?5>E:2nEJ[q(2I
%]/#(B];g4$WoV)=FOWs-=B36U`nQCqW?+#0(1!FnPNZ_&+S++^q:;O97\%].$H'I?PPOk!*EK4SIPs]'XTa\+O)&)`q[qNUakGq5
%(WEismk6tOp/tDVSO4V#Y5/uHhq,2@K3FmLo1IRGm1o&smK5O4[2ce80=pl#Z>@)"oO*T)=+-#S_j8b,J/mll<8FqPDOGIZ?W>9*
%S5KR*g>c/6]nG+Z"R#?P3fK5C/(bUd,%UUhUT=]nBO8m9fDP99Ri##VnHTq$/S".\lhSn3^T2f%c.\X7f_Gb=`d0qq+h1#C@T4T-
%C#F@r%M,hi0I6fCrVW`XN+S_d9AJ`Q&?mXh!h>gU[cibZ_l4\Oqu.>J!8RqE`<I!&*2(J6c,ZPtmTH*\%Vh!fQV9+Ln*PZ7VA*?r
%AGTe=S:h73j/pF4IQp&s4uTf-Yqp2^U4Ka<en/^o=G-'39-J+LC"?c"+L9="\INCKqt$TF0PU-k6,h=7RoHXTq7=N&RrPc&&R$O,
%VkqF,a\bk0h6=n*b%D.U<u!C$)cG^/Lt,r7E=1&20$32a\t0.V<W+bSY!+]^9Bt/?KPQ*Uc3m8&)=eWH"F</Zc>Pa13L(GGcd;,g
%7122qlIpf6SC*%,JtcQYg"P`ir2etX?hRg2OB,!!55>Sd;mGHTn@Bkc9dU&lh]deb@[7[`BqXguI@U`-]8X/'ABdF;Jl>dhTq:>>
%16KbKH;R6\(7uSIq>"g#&*hD9["Plg)IrMW8Fc;I#"D7V?-]Y&AVOe[`[Q>"N0F[9Z1QWR43-CE=u@O:88q_cLTZt7GtPjIY6FFV
%HQ=DuEi^V<ih;MGG3Ec"+4]s+<]*?DpQiTsBfKugG`6ac?XLeOZmrVj-F<,]hdhd@IYcbSH$>Oe*Eh8TG:J%VS+k<@X)-H[7oi>b
%]LUTi[k437d(U$m-,%T[oh\cZRL#@.>+Rh(V`nr1QE5?5rb)a38`'J!8aOt5EL4`32q#(j<amO_7OAMK7ZZFYUC'[MI#[=PemXWq
%F,HTVXg62m3]1c>[/>pL)6?ao.*pgC;;&,BY#Xf1Zc0:hQt%Y,AX7XV%dT:>%ug/R<h8uEgGI,/2kpVQ:kj[bTeYO1NgK-aRR:&F
%HCSKO4;Pm,+?El@O&\YZS<3"DFXZ"_)tN]n24p.*r#(JUKC;"@0VT$AgU9Tc)!LG"h(#r\29X+b(;dV36pb#qWjtXi@^9dLG$qc\
%M0VS`@-Xd[h>;hPpe>n`<(Shu0E/8A_^K%-@pQ6>3?c)c%ZJ>+-Og]Xc-;]<J1N_DpJp`<8PG_X/5^`On\=s,>\_dpkd:1i5j:(P
%Vmo^hl>\<LeiF3?HU9r8h+t*G0Pu'W)2pNrBpF$9m3YH\0=;!%C1c1/4$_85[AO2g(!/``FIu&q;>G+mEUV6&H$q?sbd8?)HZNCk
%$ZZ>H7M@g(kp=*o.Ro-lq-!AF\u\mY5l>_m*tb\W?TDtZ%Ztkcel&TnSE'"5a;X%o*<>q]^V9"t<p<rtD[ud`;tTPX\gMMM&=7R5
%QpCA6_:aQmW:l[;'8PK)amK#+qAA<_7!kVjYJc2'L?&9mJ7AA:Uh;0URPH;f0mSnZLBd[]kOQA;4sk8&_:.!)R&6@KT*WebNJ$CT
%KnW9VM6-ZGaq0c+)HG*Trh0,`8-dfl?mS5oNO=t]><k`?kb(34+qP7W%XkX#H(a_6VfX!D=3](!jrhV]i6l`d)<>Cg(A-Z'd/-KH
%-a6%)iP]=9QO9?4aNEhUG^Sa>)[-k?Gt_sJ&FL03[Qlb#ofD<7C=,Jo&VA@EoGP(\pR6#VT33@Bk,nNka0f,0WE8fiDRTT1G2AMM
%E;KJEJ=o[s\Cqq*/mrd4T?LQF-[P#@Sr6@_f<(Y@e6X6`oIQ^YmsUEobB]lL!.io-c/6&$pL""'Y=3:*XZNVILr$GGVGZ\>JK%MX
%9=sLJU;bh/IK!P0d-pf<*1"5li!kF2T]*NYY56d]Y9CX<Y[->YY$F%2OIgJ\lB;i8G\IpRgYis:JF%E9$j6#0]Q>6rb?t^Rcce&/
%g2V<;okKgT)0,!Y[0NUW-s1K=JV`dK6.*+(e+V31<p;4g"CtU2(AFX@lN%?8F9SIjFRX('h9,\=m?D'dGW*BUjV9H*GL^,cggd@k
%)"?g2(+GSlJH93o)ZeMkV'541WnN;rF"2eUK@ADTi1dqb]2?EJ@gq\t;sWNTEe;'1JH<f_\1X0LckmT*l\p(i+uRL5A*So$]i6)K
%_l<i"q("t6+cA`uj)qsX$;=r4K#eo@3R>Z@3X$@4(D($EQgV(M%KMD,!2_4A4_8d"D8pnhSq+"B;kgpn;D-#=B.M2@f!s`cZ+O%k
%;.[duC'@TQ:(o*+a&3ES^AQ&l&3RV[5b:o]lCMO]%(j?^7L\FU407uTelh:LOklR3G_:O/1$2ch0*4K&,"iWU>E9g?<8]>c-DRq'
%RZtI-]@CA@)rl:Rk3LA\Y@DsqN&*%*7&jS[2?ibh7As6E7eU+0>i&\->Uh7=])$/^c9[l[V.^&g4dh7skV^U&\k6]^m0E37R+GV$
%ZnD<[3G`kMH.t0GJP,8;Vu)IK,<!2$oi]p:WLD@"$/I:]*m;18qF7\:?RM8oV%N5&;TbSh&(6sBIQEVSD,JT];VA)Eq^EX4Bs.N&
%/f.Sr@#d(>h6t.(],K0PiM#j(fa$D7`s[unE6XSaXE'N&\D\T96D8u<ff$CmAEnuHk-')&eOU@+Rai8,hO;@E:n7K5VcAnf#L,m.
%4t-6+$.Y8>$?1j8:Wi]H_-0Ca@>-QI$g;6o?*RV8'HqHYH(7#/KpCn`ELJ`;("BT_[O^0sV_Vn4.':$`VE168IZAmA5#uBHFFPr9
%qb/54(27+#buFtTT6sXcU2Fr"(>Uj(>V#lWS7@"MrN85`0'/AUC,F$o*k&*#C/^#a'm\durs!V1F"D)iZ&S<O[B/HR*:)dSC:C15
%4C1</kc\Z\eLqB6@\BacU=if2*W0$@Vde\Dh^g:mGEOTH43P*F[jg#]B<t]#Fe=d5jVs[K?nHq6\5s+0kTn\MN(BUPT?2s[V&70=
%ic!@UPkiPUW1!YRT&<6R"-YT%eeo!TUG[?K<S@23m]-$+=b,$?=\Nbi@9)uQXbsBpS<q:EAWShV1:>FG7ThMp6`-.d]3nei@9WIt
%K<P)VF-ragTS^^hC[esjeOZX>A>SF@R+47<OI92?"V5CO!j6JK>o+L2n#DGrC%E$$efHtn]"Z430sYUP$6UpSd[Wtff`#_%L,$Xu
%NNJn8;K(B"Pn5^rYLV04[s6=Z:Os,k5c)H_;QZ^I_%e7Sn?$N*fGo]$>('!@ef@dK-XT,>C"qbJ1BE&6ioX^!*@.\khna`$8=)S)
%8Tl;&&p)9:oQT,"'iu;6>Y?]7!,SZP-$P`ar!JZ)d9"ls?1dE<Pd%=]@480TSU0,Y9DL:MrtFIkQ)$E8.gbc2Fo!TnifE@2"s$RL
%Xro9YMo94]P=uR*I-YsV,Df'YUco<-UH-ET`TOG:1P>O-ea9Gof/b.eDHM&u[t\X9a0`NZLXB97L^@j>7=p4!SJi[&4:$lBkZ^,$
%:a&`_7W2BQgX%Mhn]JV3LKRMHMo_P::+]i2OGZimT]$Ve5'8)$+N<+L:ril0:8h5WEh]$8me`[WMeN92Jn2F)1C`o%;F=G_I,'9k
%7A[u@@"tS]\5'FMmRoRQq-j-#rho!]KJRE9Ta;,Ml(h>;2<@HnLP]FcIGMaO+mp;r3b*a=;>nu7R)1@'9>.-2GrDo<BgCd&`\K9(
%fTAN-C&&pu@ZSB+bu%pAf)IS?/ht*:Z<[)W]rV2G:I]8`X':<g*%Y*]pNrl3(O:q\s+C<Kkpd/rhW6pC\,/cL"m+2$*sb5d`XW`_
%D7d<l`!76g1^F`X9DOppgoV8,0:sm8.8-AbL&c"a#>^L(X=?lW.(j7XFRt4L.4Cbgg",1<IoUtLCO7@..Oj]h"N\_?D,OS!FA`f0
%+chtYiMH-K;,4HU9Fk%nXZoL'0rt#i3o7[1ai=#'4cSD.B6Y5!Fbs6:@)iIu-<^07r=MNPgirF"R.N!hOo!&qbmgkUAD(a@m&(3>
%:mUD0XjZKV$M/e6&rnh5>\%l'cl],&A&Ui5=0gt&h^6sU9f%gjX$]K9CK=lLb29j^_;p$fA#f<srb5Nb,XkPLjY;5FL";X#*)BjY
%a+E)neePAQ:8hEtLaP42-d3+Th(ZURWf]aWBEn"3._&>6Ftp!!-MVh9e&J&=IS!K*Y*N;k;Gm<cs"R6)FPi^-O*l.gHUO*,!,,5]
%LZp't/T/Sijc,(3(M81t6KGD":k(#prh$KUc_nI9Lp'99<jpBJG]8(E81Ns2c;PRQf/7m&gVN@Q#Q<gO$XUcDn06D]h7Y?n,2@,s
%mq:Ar.EqjR93]tD;RPI6pAAjjEQ)""Zm-Ya0\*'$KDM,,D=WQj#*V`U.Qh3h2R8fG6s4"=Vj;]RnNhYlQB+DS=5Oouq)R8BC>E^c
%!!+aX:o?cYb'Eqde,EfmL@U:Ro*=ApGL7AL&E'Run>-[bk/AI`K5dDD%@:-8g6`etM3Mt'>D5E#BHB\CT`:DA-^nN*]\_i^RHRq#
%S$6N^-jLdHFB@!cm0_8ir.;#(JR7oG\ps#Ve$'GnR)gN:5!)DD$tPJO<G)]=*&D#%lF_dE5T0sPXqNU:G7De-eM&A-d67^L'RioA
%a.9gQNO0u4]7G_gT;*^YibqIRKbp$$0VSi"$"7tEkOt9fKY1h[[\P-a+fq@pm7K$TlM%p!-dC4j6bLp/NE$sT$8Vb`C-XNW?m3)6
%5qDXCQU<%JZL6o5GU2gdeC:<0K;$NR@=tDXC>LQ5$@D;Ncl/o8'MsQ_H+-H_VbU3&);Y_dKD$umLdbuboidp:H(brOV/.!oeh;eO
%#Sf(J;rX(!>;Y#6$M$d(e0EZhZu<h`O3XOOA#YLog^F9^Uenu*s*B0]I'H6Zi.n]#bNW]!<i'KXa8:-Ba6A6QYhYNfLm7\9"ELhB
%:`g4O+IlLD`WmWuUbfS0c('A1>'G$O`P&G5e>s2W__d)$`a<I?[N-tfUA?0BhaRLs#lNl<UHTRoUH!c-&BlHo4<18G'DEW=IT>ik
%=ajWJ#Z,2KAk1[Va0o[I$G#4_[M4,ITR*U6E'?'jUbH[D@+Y%j-D0pcBpNNK6n>u,96J_khNTVo>L>.j7%GsC5:4mlnsn.\93S?I
%q?k<i>CW$;&Te\([A[3FThX$Ui8R_7B("5"7fQH23)tU]'i`Q*$<NTMGZ)i.pnZeAB2r:%L9USH#MIcgJdi2lEib/G5B/BX(:L.!
%$NV/[!mHcNlKqe>kmu72PaSg;Kj'n4C%aE:WL4sGR0-GhKdCq<V3c(1/''H`,GWBB32a7b0O4fbY'+qNB;_t6Q1T$<EeZRVQto]^
%^HsuJ\!89]`p95_<:^B=g09&om`k<"<Bho$UmVup=/m[k/-.]ioiic0+!qh=G^%(C<-r(e>J8RBA^Cr]>Zk`n]qW)6Q/*Ft8R<kr
%okWUfWplYM>c,u6Z<G]`@677XfMCdn@DNPRrTQq*ItQl9[]Q(aNb0l/i`tl.S+"/\'?uhSXV8C\H.jY=DOF>E7CoGC[5M[V(4qr6
%d\Nn`9e?^c#X5>C/#VkO67bHaAQ>Q$_tfu*Qu:Ka8QSb0H=Nha?Z\=C9<&u[^51j>7F=F<1VX9.Kg>G/2q3WEJj[!W;\d"6"hs?o
%S\[tcSrK,fS<.E:*qYg0iZ`!gqnCm_3OJO5qI:C6\%XiYiA;UA(K#+!-7sbkL&@Vg'^(jXJXX)L;@gpaX"+[0Wt3C]DMC''^tCrP
%,+&:$2Hn@K$kMpt1h9Dd(9a)d]njK3ZbhpY5,]"0FOa7/+9n7&*V<TM6YI]p)SZCiQMllX8T^=_Zr64*Z72m2bKiE;5Gj;,jD)$:
%bfr@cg'(_q1T$M*S_ipTZ)^$M"h1lq#A_aahRJJNg<\#EPn8/)/P('9EY0hAOPYnr%+K&>Rsc2%Fo!^WHA:pseBeHUn:UT/Jo)U1
%[7=O%9sGh<Em"e!^#6ic]8\OX#5$#0(:8U(2%bAT\+X<uEiIOsX/](ID-3jXAXBWI]J&b#]7FD4AoiK6;*gtCTD8D<_>Q\")+WU?
%[:uGg;M$sR$<\sgW&b?O>gY.PRU2t*nW`,X(M]GDX#hOiWBZ]j[F`!0D=:b4Y$%t%V0)OR3*`g4AMMOA0UCQLg)uT<2!5b>?i$BN
%`iR1OA^tbqJk10-^"]9.`?Yb_=#KXWPbKY2_F-?T/7-Bn4J=F^O'udsV_FN,2)\tpCJO3LA#d:W%,4$mRk-7TGag>uX@kG]l\rL9
%O8=q%\l!jV/8Os>#^lB;U/>cIL,Y/0,diMS9t=7W#7XA;A)9;,3nK!mqb@)nPH`?^m0!#f0>D8cUY=hI=H7SPCTbh7YrN:e[->Wb
%>_t-V:th94ZOgmV:pZ-_m_R"XfW0@SG]2o<%8&plqA%Bk,6_4I4QWCO!,kGgMgjtV.pqGr1i-6`[q!U3R'U]I7_8^K3A9F`ag!jS
%Ic_<2ASorW=9n'i?$e-rjj5Wl9h/sC0rap8S]6lUg3/F9+I5XN<t&]\.&i`TXEJJ[F/kkp97%Lfj4T)QV9o=3Rq<K[H0*nfVd2+*
%TU?*VEMU`]lSCn+5B7.=eE''S#OQ/&=(kRJSUum=[3TKIQOC>RYrCH,,AJQ+XoOWJ7AeTZ47%Dknsf'RL!;m('a5fkZ[6U(21V^=
%!L.()Zl)VZb?[n1^"hdkWQ<I@rAK/P*em*Qd[tJrGf?3lL(I#V5o5e-SK&>=jL%hbgRHQYHU4d%n.>mQpk/.AX6,pk0Ys50:LkWW
%gaW9$%r%&)ODAab/`H[*rH24T(*pWoi9rJtRfBMeVu(&npMJh=>%5a'ocd+l3a*=MJ`csp77n=7=r`76@sp=n/eL48aM7.tHDqCL
%PQ3PG:o8N!bVcIG,g_Q>a00.:5rPWlbCecQ0#u5"D'Is=V:od\VQ1$sBU1WmrR'[Oh64L3c-6VC@JUG]8'"$^d1TKI:"Jf4]kmQj
%r:3j3=9VFHTRO2Ko/n0VYNZ9:<b%r]MU_uCA$Wi7iTeE[c>B9QHA,l,]4O"$/1Xc83q^R5'<<m>=i=fmfS3qu0pen=<XS[GGnK\S
%T<)iMR*G*2_s0cnGW^P0Pns=4X-MjA2Lc=Z&lB6:%"XH)FF5A3,&Z=%k,*qu]QK!0U*f[6LqVWJX2ekZR_Fb'K98._>]a:Flj3uI
%e8]fonZ%[jV@q99`UBgfdEB*,di\**GE=(*)6X:7P?B+hKcU?j3>86k/+,["*9R78_.\1aah;f.<QkD[7S0]LG#4d^L!(I!iQ@;1
%78k$m>EVNX"TGB\kR`+HWP_T'n^\^]o1j*;SM9qNV(c[:-*&PEa)Q`^UR(0^5^FI=@u#FkQ!HJOkI8*H]@CNgc#p'7_!2")"n8QB
%nWkod^K&G<[Da>Pp0MjNR/.I/^XQsY$@^mD_^^lhEoKWEY:MsjI?A2'3rj<>Qa?$Q]ECYCQ?s2k;l;BbV<n;5r2TX.Q04kS'aJDC
%3E3!'hVM=0p[V9)hcgM-2Nk.1Lk.El.G5d,po`:%<j`<1<h\$;7#f)Gi=M:G[)c0>8hMbHn7^5#]#kuG/;l_?:G$hW%]cti@LM#r
%b4;X?65!31kYYZ+:SsuVNd29:j7;V%\cGl0("KO6o]KlCDH2";J<;A;$BcaANC_\Qd5\=m7mW@Q;!A<j0\Y\9N+A\`<I^Ou;t\V:
%(A=<0ZYkhUWMq?U"%!P:^Z6ha0F\:[YU,^O.2(6rNn3oBe]2@WO""qtLg;GkBNEA3.]`#V'0TWi#Zd2A[1ZL`>uuYrk'D\f22BE`
%/k<C5`\$&2]VstY(C>(YZ+4C;V8(Mq2S%%#pKdaBJ#jD9P.#GKXJ0tE1*t@J+bc,a4gN?[_.8`h6ca`0ce6Zc422i*h9qhHAb7A/
%DGdha58N+g].\OR#RR(]kc-d_RHPd7LoK_k@\oql$$A<B-t/FuJ"$7GoC8R]dp)2@C6T5Em>A\"nA'YN=1"o\G="3@U8]VR+>jF%
%Bu6@5FKdrClB4=h.6t?(Q8Y#<913mAA>sI7kR\nq?Y@#J?OiXh+@+L1].Lm=Fo1uFV/<\q=;6eCIU+l-k_ekZ&&S\TgPW;.hUDk$
%6K&[g'XI`ld6SI-1DVGC;lX<*n*MBSRS68XTtK`?q+(Z)Q?]L>O3DiF9bnY$B6DW$2)Vm_W1HN-,'M\61T<uQ4`%^#\Yshhq6.,D
%WN)N]e06pl9sGZ$*E`o9nA<_SWp1Mu!1[-.3sKtM`nH<+`MDupe^MX\EA_ZLPd44EY`+^%N-MJ-iI3[h-@C&:NiFlan7$&OaE;%O
%<@2MBXWf9^iST<X2:5EUH,nK;O0:Ym7J53"Wb,#FG7>1JOc)2g*JWm,[>[Kp<"n4%Q)r@]p6YfhJdtY3oVJ6O^1L<Q/jVQ5Al&fD
%11.'a=BR"N*D09e?8?fJ]8=_b)Ch5ZAhqq7-A0s$*=BIR#uu?^->mWn9VunVACp*hb:8aTHO"H-1V`b3ajY(geF3^X'ULX)k_f,.
%OARNe"V-RVJ6XWUJg,/3M*.a;Yn7Wu:KY7>'%&'4;&:bqOYI9$&+[2:ro7S-"MCG0+d!X3,YS6HHJ,U?<2Z?%*4Kkdda5q_P/l3b
%1umg0)_#O_cPJR(6AZ'?mn)Dm00qg9^eFZFb:qbnfZM0EnnK=`HrIfXkIjhVFOIM5:*9QrP\c67X-79:k*F78FpXR5Mo:hA-[o,G
%_O,\aSWQKu\5=>ae&Ba\iUX"j%TP#@P6hu#WTG8%p:6LU8874_\W7G.:D4p0'kTmKMOHV?L:pBJn9294,"36VI+ETJFJnj1VP7\2
%TTZ8NO&!KDDR;4KMCGtOLt+*pEB!BEA9d(4.\Z3YbO2M2P,o;Qr8g-b)*I^@k,7%$YmXm#&UcT@!t^9id:7*u'aU.Y_7_M']*n!A
%&*rMT8Z9V^l*X\TlPMh6qf#ek/IE)R`Eo!ZdC7.2G6)T9euSd*iq]OTlfbT_NVH4h=<tQ*8AdV@"nJ2+V_uEB83&kLc*L(Y9ss57
%*X`t-']1qi\\8c55mURdr3/POo*b+epp15Z]9[B61)'Ks?5@HWNhsj*EmFgIVL[gD<4bjY]j8,T(87dT?0Tu_:<6-ei$le`BLYE"
%J!n0`Mu7>R:L9^k8Tbjr'jMu)eoj-R]+c9<pILe&\gLN"ncb$@rWk-[!#GW<hZiW3i'>#!LK4939:S_>-bM_P8JoV-K7R*-!1E*I
%7>5fj^/7a.8bW+bUhZS;2;0_>@?o,5e@<=E4D]%R.+E`G/V%:>5n@_1bq&=?^jFG^ojUIkpNfeDPb0$t]1kUTM_o?InnLJB=t6T@
%,4*Qf&<\m!?A?Hm#<W3t"i*hIaZ1j/^T.j>ng$!CEc(%@%)bs^!Z29mAU7H=hV4+6jDq(VPtn*4-(JN5_.n4o%\p,*a9\c'0^!aY
%4AupFOB-c1>iMl_X#1I3OZbRop48LW2Tcs$MG&B^5$"*+#6[OWU\n"iC2D<:OL"c9Z%,DDkAUU+<?Z79PQ7l($hMph2ER&"HOA^:
%=3s[)g,e&2))"l<%`0R^2=S(Q2HnGKi'jEZT[Il@PkCf@RY>LaeE\:W@e-$__4T"[.)c\19,%?i<o5bD#?"O7>OS=1S4(@B&#k_o
%=K,UgOMR:OVq"6h?)?Ft%a8PBPnfQLisZDC)2"/JE%C*2lqj!XpG>=0D+fGICQuKeF!F3L'XXg*a`B5=I(N6<<upf@m#E_q<V(d?
%FgWjNqm_[[-@G%ho<[Knk<]?L?@r&oPk6s,Y86/'R_B<hCDA*VXA<-)n#rRn3c:OucI&&gW)^I#+DRimV)R4](!,^Mm][$8Td=Ef
%8pgb<]C5oDnu'Hh3f`et;I-WgP+!;]&&#[.@<?qL*%!+.Je64`G7TE/j_WKbNq"7r,D@s:EN[s,7dWBJdu/fs;-C4e3o?rud:@r`
%dQWQ[?mIYhda$8d5W/eNXj^iN.o$k^r=qQBQi2<8_^/eS,[&TnfOSflOKnR9rYd@f[&^k9UL=^-S&AA=qfS_0NWoD77??qWed;^K
%]^`%mSu3[52XU[P25p6\TNh.G9us':#S;Fq2=4dq8.Oe!drsr1G\pFX]jPoV0@e+AEXJh4*'"3AU6]Q36.od4OOJsEiKj1e)!@bE
%NS[4o,?R@kocA`#TT1`W=f/c!5!D5V/;S9!]<'a2Ba?)IW%f%)hnSr@J&N(_^B8\kq)abY3d3N6<)"TDN+%K=+S_F5QGPj!LJ(q*
%e[]sfjU+sEmIFA_^h_0YLqt2K/W9&KFe6Y$Rg>RLN!:'iFVE'f_%B("#4=30'>$DBGbYL7J2e*iC+#opj<Y'Q&[&:N;=gja7O?/`
%g?hU<jSG=Y$XY'_fo5)c,61mO)<_!JF+9*H_aVX,e,tfW<";[8`&b;]PRJfBZ<"8h#c:4I"7`kHf,JpcHn'a-9mN[D(X<Oj%^%`5
%7T$]2\Ih9Dfj&iQ3kG3BOob=H^,7"%pO81.M5T"l6%@j,f?;9l*^o*X#&grFF11Te;;J7UFjS*Or:&/P>K/W!bCABi8XB./6Q7(]
%=mF]c-P86h1D>ce8LZ*q?cSN4\q5!?+CC&?[^F&3756ai/O>[BCU8\XOJA4]U(/b(4<h)6f%9<ELbGchc"?Bm*^Gd21[-Se#^T[V
%`L9fsTk_oM3jg@b=.]-oksPASoeB&`;Dirs&2_FmC=?[rDn:s+>jP].8ZFSt#`6ObYRg.UTns:mI>5T@4;c4J/O%MBJo[ZhRlA#>
%mB,'%mKrH[D$KDV*aYMuQ)[mZPKpGMIAoD"W=N*S8bK(o[dZG0fF:s1A'i/.?g21f:33[X;>p%"gQ?<hp?Bg:k=6FYZSACJT=^m;
%2]HLPIU(%I1Q-=gGb+)>_ZUaG(tD8[^gbP9?I[.)0(jp+5$J93pKbm>]oql1>Oo2U;*R].0e"),r6T#L0scf'5)SJ!Dgi<f/D7o#
%O$2&_eMq%79f7u0.+O5-&`RRI>\Z3FdPb0e\:o/;_s,<.>tek8#%W-_q[1,Cq5JM([`o>2!!5$"imOL?X,5KC+DO,)h5F\#$`bS>
%C+rpZM8,8mXLGD;,b9?Am4)gFPn(:m;X*q?\Bq_9A5u83?nHd/V5nHHOPs7<'diuU=jj^D+%[8SA3GqI297f"BQA-B%\lDNZMDQ[
%J(g3*9J<^5Z9B<omreZCSjV$;9!VG``^bW^`<--Y33=@K^!Z',L4$\459G+HWg_::HO%J"k.X/ioJep:4]QV[!&6)Rk625tC."mS
%3Vth*r6[ZLNce+ZX3#E<g<ha>KL\%1i(4rPodjm6PtK7Q)%$/$d)k?Qf.s.FX5P%DWHP&@;@>o@lM4I$og91d3_4k-T+M7%,dYm#
%\#Bi0+fer7BFbDuGt[]=WfL"GLmRtaV<M"L_ST&&U8dYTOjA9_lKq*`Kl?_9[2PV>TrJgo7S('0)FiFuK),#EaZ,^!Tmi!'G4TRK
%oI)\P59qq%U@aW49$Tq"!KeCsQ!62Zd/nCtFBCUE.\N4XPeBe_PG*-em]4pVVhfY1k2C-iQ@"33o%cg"k8;Fr_6[cX(b/rVkOMXG
%e#6R[RSM]AL;.sm[FAE9NH`)4j-ggrfL^GL^+q_#>'BC;f/s:f<IKghKV3QF6ZQJq[SO/pW?d@pcA_0&;O!,WEH/7XMC,r?-H*Ku
%SVbBtHalnsiKPpOK]_:r#>M&2&DoR4HsX^o-[]65H-4Jd>amsb-2N5t^""#YL5U6B(fR"lKdOi?*NFoM7<:OV%Fgk;0$C$N]?,+L
%rM1pu?Z&%L[*fCc3QKE7;NX3V7kEW$j8%dH#*Q,).A].u)S(&t\]fj#]K8f/9o3SSDt0lkUV6fjX%Ld]3S<0C8O`\na_SncL`Rir
%Lq#Re\MpVS@9$Xu*;j+8o9qG@2a:DNcd(QW/BLI:=t,QV$6t]SU=<fL]*Jh^_*k*q<R1u#dJSB%+>QJ\RHjm!es[KHlm(@LhF#B/
%%"MY>X&gO^#>ik!36:4M\t>VM&oj:rL]B;=lLS8m.'Y3TOI&!_o1V_c$hb]5:YciK"J!m7]C+jiAo^Is$&`[u4HJ#O2mF>^qGN$]
%jn6l@GiXNlQ^GsukJsEJ<W2h&MKlb.R.fEc`Pr<;4X7+$X"/-=d!8hTm.i]"5aZTUpNaK5YI^@lhb*J^OO!ScR#bI&<C^[G40BmX
%pV:_V.(t\lS!m1b,n6HidC8E$bE-YF8GtZ8nfi_hf0n&->Uhm18-9peI69E^.d@73QMSM^oMotb/Bs>:!>Ll?L"CEM0V*+-.GB\W
%>"6F@T&r#a?b#IV"Yn8_`^eodLJ`rPE!N+cc$6,FD;X4X.A-3VB?5rXg&dK)MT%sbo0kPV7*QK1b$M*c-oj0/-:4NiE#0"<J]Fm`
%D;g>,&.Jl>c+<mZ.LC;MCrAgod0&g540/c@5*W4="'A3-&k<c2G)0O)Za>QdT0tVlI:s!^>4`QfTU4Z9`Bho]<:!aN1efC!O4j0:
%Ph8c/D4W1=jH6m"^sY%rTEVnh]-hjq?$BDARWaS`f..KT$-so8,N$9ROc2V&4CWSgom-/n6tGQZOT@gD6"bYI%\nrE"fNt\[;e?]
%R3NM@9"c#^JTHPQ_gkO%^7Q5iFi^QHlWk`_[kHQTQ0S'8R[Q]KG>Y$1iq*q)0g>ue`,8#L?&.UfoS<0;"&]YQn9<Dk;["Cn9*t`H
%q]eB4E%E]/N(C]050LCH>K_V3gH"dT='^<5:*X]-a(QisT^1BKl!\Zm\Kh"D$=Ak@c\-#"2sU&1(<'B]1jsB\Rr>^k]#/8[@Wt^^
%p3lNW(_70j>"1Bc[&o,Y2mD7A/bs[a9-I>@2797n=Q,V30M5Y!E4/M]`L,Li(jl?I7X(a65C!q:/[f8h-CZXbnK6)>TS=c#4>=m7
%rAlT)+dB(:/b=W[UiYkG28ucN5#Mk%PH!GnAF/T2q9S0*2:f6Z<COpQ<bn_Ciodk;/b:MKYoW+YT+=g<[rYj+*FbW&_Q4M=`Im60
%k/rinF%`jB[##.O7lHQF.Vg@U=jPA8Z'!D:kS/rV0Dg$%1LppAP*&6V5G'e&me2["I;#Nf?aALbQC;Vd59YrWf-OJqpHu:1k)Y!R
%LX([0s6O2MRD12l'^8.XI)BKZAD$/0r&B**DC$pYD\PWJ-L5YCQeG-sNhgfHY'-4V:\TjCr+FpL2I%HU3pTb"YPhtLfrfBCCNh=4
%2qsNS.jgb/Inl#9r-Sip0$rX-mM#onH_flgQ8LmEGY2Q%FZqLq8#.u@Un1FfT6_X9oL,T,/K2@,I`..r-,`Uhp77X_=m@688jLn$
%e#D30b1\K9T!6!Cire'q+.NeG6>OenQSh%</8g!\6GFL45$GE_le'e-$FaHAP@(rj5dH9PY+FIq7,P2#<"*,g.a^;cNG*T5h4RWp
%l[oAA`*baLY-H"0*WkYt(?j^>U@5mAe]28ZZnL-7\;7,9^Tr[XP`0mQ<`-\=b?D$u*][AFJcZMl"#sa)Dq/`ib4U)f9NBI<+^L\h
%;n=H-Kj7uO#M]^+dWdGHT\#PO.FTUH,9;)mIstE=7^Wi&m&KMr.'(ThF%<51ETe3GJQ<+nf^[5PR7'oj[\XjmEkpKApX\_4Tt4m&
%Re'FBW`Ksuqng'=jM9k3onlt2]HpGL_RiVnF!AF)-#.2do<[kh3bUOep!g6^n.Pg(Fi]uWg9+S)e2Nd1q>K.&G&3dE,Ngu`Qq\_P
%^G@P!a!u)7q^^a%VK_VTY@N`q0^Ef=YK.Z*O=WkrS4=/s)M`9dV0cV.V:eQEF`/OSJ5W"7=@husiHS\[6/-7>ER+i/$01)A0akjm
%K,pVs&DsM*W*#YcVl-!9lA9Ho[<5$ir%MGJ\MollKH6,$,asSs*_*Q;3mmm'XP/Y3m3fpAJgoJr0]5sX56O&D#O@BTL9R<.j^)t%
%`s*s$^tYhrEiX-7@23]=Dr*WddQY]E&)i[;5ZhbYj3%dT>B#%BZR\n58)'.pPX[e+85"?r5#usO`\5Z_q2lRbb7o37a&]b&AGn*H
%n1=!LU.Qt6iNZK1<aXgu1l'1Beck\d9f[Zn[#BR(cS?pf\dLSqFo*?jDhc@@a7EX*0*^2+\mCiCUe3<FB+@#LnXT?*!'9fbDnC*u
%X\rsoka"\TF]o:$lll`<fN0u%Vd6uYLXi[,SLj&?H4]eLs!g;*l#/N@mZLBPs$;q=_t0t[.tf/r.c2!3qY=9<=JaT0NV7s[]0*;b
%';o"!Y2-i^F;%cfn'oM/J0J57bTmWmk?8:%^8Q9lGJ!F<OP@Wf$"VWOX/]3PST6#1L]1u?S;o&:5UO\2pDe9e;Wd#ALOuP!PeZl5
%dl9Y\assAFgG#%Z.`Z20*!"r<=cqHe4tI5W-5[/^3+s*U*+>\1mP"tbJ^P%5f41%Qs.Aq*$+hHYT+aA6f^6_S)e=%WNE,b0UhHo4
%0#+cK?';:'h/R3KN%A:qX\VAZG)H!si)>t*>)<DeU>fP1iCUga,qeu6rB^H<]pq-7CLF_@;g<N-WqW86hA'R33`1^l$o)0Y49>9A
%_TJ`ufSlHpLM<2gpU0PJM]TRDoGqg8h=U(K%OS>r?=hTsYL4Kd]3^4DkNt<K`Cp6Al:\Nr,*&T;DdRUmM+pj2;KH)"JLs_o.8l&e
%*8[Ut#>W=;*8pCSqI:?PN'WbpJ`5C!r!m!`?+#Y#i]+KO;`#4]msR[WV)@'Q(*/OcoKdn-^@/m$#DepC`hA0dAe>^>LO?(tqLCR^
%9/5I\-=bp$'5AH7'ne^rFW[t4_lS1'03RQkig6a*=^?ZS3<>2l2PC*&Bo,"cbb@S"!-$FGh,eeBe@T;.SVaKuG>:`jG00B(Cbc"n
%V"nMi"O;bKW<-Zn[[P(%V.Yn[V>43f62e(42G$<8N5KZ\N=p"m[\6<9]LPf52Fb"s3)W\QM;W%X*pte//+*oGTKXoZ9l%bD9a3m=
%bCiG)OLHar?Yqm=B03gr)Y=7ta2C+`d*5mjJ:@=j)#4/i@gQuaHFYuTQHl8dk7emK!6R,!Oe_lk-\&1H>4+a/=X\f%bE(DHF['iF
%#$lmc2YAF/Q7;Z#+<Q1sj$1l?#OW,f_t&u>@hXU#e,t]DHTET)Y!h$*FVRM>ZXJEk6[iRW;!qa`PYMhhV#P-ifb[9Ca7T"!j;6Z?
%"^/"lfXFgTW/JGoi$eba<R%HfYSF]b+4MCUXJNEbX5?-#3uP*oT(^=rn>Lp+"\,D>5bF+(GT$RSq03*irO_c5[[SejR_2DY!/TT?
%`s+6jqIH[o9?d</:ArE").[a(e7,,ABCO@LI)5*E=cD3)1BpG?*pq\[4\j`1@N-oEStQ+YLV-KUfsV2o0mlgdQ@\S-1,a:PMFo9N
%6D^N<UqUGFa)Xt%=,?u>UWV[]jQ2n/'kWZ^>KcOK^<FS7Z.hj)#A7c=Rr<IZ_e+Y!6=W5)6NZ]%s%5SK:<A[O/Fb7mgE6'CBkf(#
%GY@VNmkr58C^N+`14oCGE6Gqa;dUPOCS:*^&gal4RjeS+rhVdEdPJ8>4\.%ZDZhRCTnmRABM@XjhM]13^nQG@q8BMeTV^DIdfL-]
%<rUPS<n_2e4%5oQD#gbj"_C!6BiDP-DJm!Ga[)XI0K)%2J"KNFl=q&o,_pu!dN>>P;-IH<$F*'A=r@30XB,We)p*Z8Zq91s5gJe-
%]"BjM$W.Y(o#cF\%K0_(>(<i-"Nd5V!mQZkJ1afHQee>ZC`429,"m5hZ4%\TLqjIHnI!5/>IU)%Sg0qR;&kK-5A98=]/(D?3m^S&
%X^,)B@Chjdo-5c)hWI@0<mRZBUd%Q12lS)(ShoIR4!?(PM6mZs9K)MOe=F/a)7YoIBtpVs4qPN"El/Srd1?)kF>$Z5H`QF44_gic
%71_>eP+Cs\<0c?Tq4H3"c(T3<?BRX#dt;?;BD\eo%#`tXHu/@7MfZ=@91aM0T$AigUk$tF_d8^bm]LJ!3L$(1j2t,(rI<8aVEoB<
%S<$.6kf(B$I$W6[]IYA",>ZC"/7DcgKVdaSa%JS4Ob7.Wf)l?Y9n/N_HlV,pPL\6!+MQHFc&e3"'&7;76V=N:RjUs8Zt9rr8oaRa
%>C.3A%7;26roDc(icV_HFR031c7_K&Kr#`.\-,Vk>KafokLl/^4E'n$R'qpAgH^0:@F$J,^t55Rd<,&pC?G98DYDNJm5LL8L38Vu
%T4`[,htk5I.8jod6.L%WbosKpQHCsK>DQZs/g15_kJe+13]37C?cCj#6LL$79E1[bR)TfLp=7D%HsBP'FT:iYU`@n;@a0SnW\6T5
%U-)W>Dc;qL+/es0^RM+c]r&NiQ?`-^c*iIQ2ZYnacHS(_2SD(g\\;)Lk:1>=]>X4g?HE`SO(l%ji_d%fC2q,tB\V906>nPdWNTb$
%ZA\2T!'>Q8W6IaaD]/(2I98*gA&b:"q[NS%kn>oW`d!m5].ob0n#UEUCj(M9Ap4k)oXF[,R3Zurb4QgZ5^Y@sMed/H@#+Xmghc7#
%!']IaJ>Q`8WU>\FSu;BUJ!a8tD5e^p@6,)>B_T)k6HAWTK*I;'=m_/=9g"AQdN:>k>>m&=^X\,$[ZcgF\_"7$HOAK?oK_[6d151U
%&Brq:nD<3mDBsdJ2OX-;`gOQj+3XNU"YcRH$qM^QrVo\*]oC38WSgmsC[:WY&"<9"d47d-q@pubonR61i-)J_UEgL[le8.mM3)d\
%?iiY,eDVHBm7s03BB,=c.@B$HmDgj):&TYJYB)bog.IF<9tCA`/IK+%K8![Wql6<cb<r%*(`m5bV#B*7*PbZEar%aP7Y#URdBpn6
%*iQSKJL+kQ+g^@'m+^Q,CZ]4X(";=NouHVWd]cVR7ZTKt5[Y0n]P^2>=KZ\Tj@4i)g^9QLG\FC7kWp#7X$;ol3PpKpC7s`,_F4<e
%AMX,Q6+.:kr!;gVY3Bt,B^;Da#f=A)p#g+f4@oW?)YU+=+;mO+H5/q5E:fp)]gNM(i*kQ,!J5d:0)hOB(`$)GfYTIl_l4(%V<0rN
%,!W8]`QJjg_2oE-#SX="]q559nRB8`+3T?F!A0-G+d-2Q&X^Hqk[)\Pr>2J7RIp<C4_>rXPDW\Lm,rUK0BHW/\mVY4alW,-NH*b8
%!.\olE^8)&*&@iX:btAG^iEYO)H`#A:@l*kY`!!Z3,hD"/'.D8cAE9]+F>&3>.(]t/%2!!V2&>i.V7:Y?L9a_IoUt,(H@)[2q+0D
%QjAoiTFG^sh3j"'oqtV5Bfp\[PUtS42_cn:mf(WV.j7Yb%PLP(^?c!>W%0"#\Up0^F0OcL?.\>FZJ1s!bI1)oftZh_S*Jq55EnZ=
%6Itq\NBs_A#M50]r(UpSW:#2`;FUp*SPMIXR8<\*!acYjADRed?1[1;[l/0LLdit"%F2@eh8<CIN/&4&@e9G%hRMjI4KMEh2q;/7
%:/u5DU&G+[1"qQUAG2mWQG(jNQ!qUL6t/<\*dtQ`Ebm\kl=1b\:nYD7_<%5mCZa2jDkL<]Cdlm`8b&QF:/^F/EV678*9`Y#YkPX'
%YcQd5biUbJlggSs#_#gZYesoK3Mi8Rl_ZH^mIKhN0(SZ^"i2%k4?<"sr\2TPBtYQ<\\Qns10W(j*<]S$k7`e'ell(8o&u$D):9YB
%(NRIR<+#LX1_g;L)"cmg'OU(PGIV4<pb([h#0*3N'63IET-MAom?D,W8!,ePnsB3WglsXupaH.2*#NlPBb@i;Ab/V0iPA,M.H,[;
%U/5'3k[8Pq:;-l0TKC@I*CnLqn-1Zsm[*T+>/HFjn:8Sf<[n<YDVr`GYe:@\iI^CK(P-M\5JuM?k[%_$'\2faaEne`'6m5UYXI$c
%Ok_qu8Grl#-Ylupq8iRQbCeY)eR:6[HI:UDjsnsABY1`$\ROsH,knBd!Z0h"\O]Yn+$u%fK$75rE[N9@'HI]k]%sB\<M[(JIT\A]
%XKpHP=l31*82/Ipb22_3'_>SBD@M\RLS6Ilgj8ZjrLu;gP/GS`3U'r64E[ARjjm+.G;N*nlP.PW@HF95o-Bj0go@FbNe`G)l#h>?
%r$s2]^jgXf41GWNidO<D%CRGsI.UiBS#NtQ&"ulOMFVe%d#$hR\*>ZIm$@N%_dY\KhPC/hfo/9ta3[2!&nTR'`a-]E!QO+_M^GX8
%L'KYE\rTil,.F-e>-10##5_TSAdl,EXp.W\d3XV9FMHVjAhPJ^q0W7D0?mphFV&m9OSC,I<]YO#o3QP=+FJX:1'"pJ+YX)#UW/q%
%Mub/aCQi8lk@`Ug[G,nIs.qp5!2ZhVV;tO3K=u-UMJ9$[AOMq:GrV@Jn"Eb&Lbnt33G]>T`N),jr&;[V;ersHqN<U4K?$`P/6P*r
%DpFm4>Y*M]QOLcHUcnP:V:pneI/L37aX5/Q[p]t@]Eqk<A#dVLJ]EP`W2mP'1YV@pZJ6VRVa`l)>BAFj+K)2oTSlD4;$#bO0ZGjO
%Jq!,&:B?L&Sl7oJD^A#K<2)(Siurm9G,sik?o'kAN#lqX)H0C@9t0$lJUpQs*"'R8?a$I5.lW"U4P]-n[G+)DA%N0W<%-QV>0(Qp
%(CIE@8_X$:c$d;-r7S*B$"JW9,JH$j9bR9?.A56@#Hq#CchFCtq5ukA=GDHRfS0PY$JtFag2ieBGKjR&P/JZ&-f@,%9XR+fPHmH^
%"PT'(69K_$9PXuUVKT.>YAjINs'B$3cZS59#3[0WZ=c8WdOM?F7!7pQmA[aHWu%tU']G4\;3l:1N.5UQRtZ\c*)G"7*<%*jpEdNR
%\Jh'W!K=ID@^3"ao0/AV8qrf6C0akiIT@IYR1k)[PPW8tcuR?eE)R8U^0sJ9DE4%tKE6j=7</t;>[#kiYb8B#T-%(Fbo@JL<6@q=
%fi.K8nPj5XOoe:5-W&%W98ud(kb[u5^e`%Hoago$40/po-\%66log-+r.*%"e^WOIf;u\,:apZqI%ZgY57%<;TN%H>=2eU0k`*B<
%h22Zc+pFQ7+DI`9UIL8O,>iS3Ken7.pk3AoUQ;e,(#j/#_^+an;<QG,b'Q[`$X1KD.d?5\<CpgUK,!UG$,F,=dJ%4h=.J+unq6A7
%8kCQiHj0DYU)\3R_XeO1#cpnHaV26UR]7gZo*[<A;mO5S;ceJtSboSd(qj9Br7tVA]@g0Y8A;`%MCT6<F3hX%/aK/7Pt\O,R>c+8
%ISfAHdB\"+g_[Aphj6>(RMS-7>Rt?Z`uYN<Tq3P.SB=9Gn@][PJ*&3-Dr&J!U@u-UFBE<$:o7^-cjM:/%dY>"G^Q2be`"?^Ju"Do
%9H_t*1nL'%A!M^RmL<RSk#iqq^=*VuoH"<jG7%S?2lrFFDC\d!KW-K8%\rBe3GbFFdU0!q>5%CSTNr@L?!`("\bkU4CiVNs8"E+I
%g1%1YJ6l*]rmq%\dU'lbCc3t;!V*k,9*0@p].mAO"S=KVDrerZMA%(^kc4q1p/6;kQ/u6=\rTp'+fhU:dUT!p`M7*LbGEomACJ;L
%X,3=G`jVtZln+ZdYo@H!1%im_<%!Ksb?T`<=.+u]TC9<'E9?m9XqKi41[;0INCE5N!s4TCi&Ktke]i4XX(gg/GWPM;JR;B3;$%H<
%0lS^;r7[Fu\1dXj)gdKf-,sLB23jiZ.=7s\p"hCdkStm\Dr&G`TS[EY8=fhrUK\uiH(=dl#\+dXCZs@;_e1dDV=+Gea!^LWrOgX,
%7^^:'k'.`n=)Ukli'jBpe?34*k>IB;alb6bDU?e1Dni5Lj'h\711\M_2-SEX3KTf81HFWs0ho]TPb*ifAXCou\\5NN6+!YV+qTbo
%?^m8r6TkAGW;2ep4?i!YV-3uLMte@":#*Z2<3NgB7B;3BfJ?:M`l,esfj[qt8k.$Lb<f1:&Y'(!7<S!Hm)dfr5Q_VR[hM*G((nJN
%f!7$?3ZjYZTQ^;)hd/`]ggs1^[Z!g_anjLG::?,nh8lNlg1M[NG&a19'tmlcO*odg:(SVT[7-WnSr>k)(/7ofp]!>n#aa=#Gg&=i
%[g<<+>'ef'l<Z+l&4OKQT>l<3ibgq87e'I'Hi./n=Dbs1#hDeb?0T"SA0P]ml%d,L&.Ln6ZKm.'5Re9%.Yd9QX7OniCr52YBJ!Q(
%Y6SH8X<b#,3aE2$OChiq\`/6Aa6((dW[/c40@aL<WgWh8<7B"Oj"4a6D^JLl#WoD0fd>hF\8EKEF2-_d`;(]#C<:!8bgki4_(iBW
%P%Vlr$[^2fhTpqrY+F*dMcjj&]<!i4Q]h)!D$meId"@f@`!5sKXI*p5Q[<TQNVe%T4DnL+,";rWm%T[I=_*HA^/`"#TLC*&!PH?>
%V:/YW%rEb+X=top0^Vs>*86Il_o;mk)F>^=naj,-o/rK!r7Bbb>A'W:fXH]th4J$\3H7]m6b8c+''OHGioZ?]=#D?7)rg8IjCB:4
%WtDT=`]T6N_)HfrHKnA"fBs]A"/knEIB524hm]N;q\3)74mB;@%%Gs9ZT/SpWLm+gbhSK0/ijc]21N$Ud];F.pWRBP&JXJ@*F-oW
%".)Qfokoeu3!rXp:":N2+*dC$eR*4_]dMF?/<pIQ\Ht3OVn0H064*SF<-E&`"g7jQ/h6<kFl^U!IB!dHn:90&<Q\MggALBuHc/M0
%A4;J$q8WR#Wmb2`oJ+.!XhF77eGM:kYH!X\gsW:_$h<e4O03*m^RDRW$ME[EI&dM=>g)`9PBk:AV_m,HhfV.:<ILK!qpIu2+,>P&
%=<l&PMf/ZDlpr8eO(4BT^8Vp^T:,/Epm>$EZE@9%*mVK>dB#E"pA7:Mlr\SE8.\!b[Un2u-EVa9)Wmmm(^7sIVI"fhYO85^34?FP
%/T>(VcXBe\76YK+Xfg>mPhX%-IT-3PWBp\,*a1kL'CF"hNE_X.d;H402=9no=C\a5mYdq2c"$CHmOqU&FPXl%-KmnjBHj>)Ph[3g
%lE%[a\TWiI(Fn*86S&.E]tfa&mY@p[R,8u^duhes$W^<:pqObo]XLR@/pX\1dS-[/;84KXI)#L'Zgi>Pnr'iH_L#4<'FTDj$i=L1
%ZGN']AA,G]nEo&ri'm$u>kZ?jStTeE4-WW^P>,78P1&1Rf9rA$:",tPTUD[p[7Mhr,%T/+0^:'=5SnKEr"_Mg>C:?KrN!3[J8'q$
%q'm8t;O@?K3)m!\^)`Z'<gU3or9&JJReP@!=mEhg@bAh>?dtE!?N'Uk'sASDP?+k+k<8sWXX%uHk"?7VOC$Pk4QdK.*>#PsPut7(
%M=B;4d/s.[V.<8@V9&]-h\J[%FU.2A+"6c;@+%O.7GT:cpZ:cB.=GAfYF?BoENu]?HB-CTm.Y0^;2]0!o%:/)PJ<X4CW^F98B'YB
%Mgl8WAN[n<<BlHqI6#N=i>tnO3Lm;6_4E[S;T2Ji2f?XG,`CW[V8J,@%@:GX0>VnW,2XrC;lR.GCjN053WuLnBPbh3O0M+u)IQg1
%^/FG.e`AAeX+tfN\@cpq<MbnTB&)oRHVb@p'MA_PoJ$ZrWqAb85kS<99MDbNZ;(g0'NMhh+00,s=QF2b;)U)',R%+'n!`>L,'d2"
%E6,0-OQ(L#m?oOtn)mriWXbe&Ia''aE/O'Re;#>m2eX\lo>sjd]>/7aE!?E(Zjh!a+WSgLWA!)J._BNnH8XQ>)-6")QE;rHbs"O#
%!(#-2K)D]@2%W&SrSPCs[.:^]?ZdHkm(\<AMrtN$0H1tE*dsTL'4q)8p3MVnoO&5k]u<tj[*-4t\*gKCqH]KeTq:.M<?m%%n'%A=
%G)LRJ*&[Vp,Ft$4/FEK^+7/H?c,Z^Po9[P5UP-a(/ZZYik8[#e>]HfKS'7)%JN/clddZq,!5*b^I;Dg+A">Z-onWnJ-&FuP621RK
%>I7<okFu1@IP+R4WN?D<I+R7UT-jtLRn#se;=>#>DRgHF"ARnQE>*O4Y9,Bc(*bBJ-0^k&imXgD\p*IC3D"hXC5U&<efZf`\'DZS
%4Ap([JM#<o$%kDi_r!-,N!R\`'A`M#qK(_5<gQ4;-Gh+C6]&LlqctLKd,^`r9%10&X6DadhUE;S<("=<08jg&3-/ca`XTG4GL!eB
%Z<gUIVAag;9-)0Cs1#T1mH!*MA'#DLkOMN!N2gOTd!b8s7u&_.G22lnGnW#rV9&EKLCN*V5n38WMT.S.`TJfg7D8$^<BQQ+;K$jU
%PY.r:6U+3u.)6NG#GlY'ah"R#G?_nfI]5NW3Eo,u&f!1IQJYu<`Ss8?ccA>QFf5)#+3$'FjueK1/,IhF4rtOXd-;`U4NQR"rCECB
%Tr*IXi_!q`Fd3g;^?[c4$\aO.c0@s4*]Hu^NY2R1;MfmT/s:5k4.WjDUL"L,oOM49JQ#U4ZVg3mYRgMT<<io6\]:Va0W:<<?hcTc
%oC&]?d@HUT?D])1DHQKe.W\nAPOCloA?+tAA4[1d/,eTg*&mH#l7]K0JDGk^<paO-<So%>jm]`>qLU4XPX*nCi\*oql6efOq)mfI
%Nqu5mYGFlTOn+KhW6XQIn[c2mk6Oee**cR-E.@VkM(q=UTcME8c#MkM6so2(CV&`QV!O[Sk*tMrS(F#C!O]A)iefe('dXS,Hgo@6
%afQK3[EnGZ9_(HH:pP3`N;n+PcZN3`%0P,8hQB@MKi'H)fT*j>-A@LX'AVp(cU&AIW+V6;=phoa58U=?hr[bHc#M^,In0`*k,JqQ
%$[KF<cibJdEM1VaY:AJg9,j=e_nPG#4##co:2u,3O'[A=#3@=$E!ng*82;%dTVc@^PG.Rc.E%=#caMf/3fN35*dY=al-P<=*DZ]l
%$+V))1bOb60]9@UVcort#*NEI:(6im3fFi?e$g7SAV0>U<Of;JK^1n,8Z)d.Sb8&!o/i'B0W\JN\?3NF%\&H%9\FoqIFpHo;t?4b
%3b5YN4V)t<9r."h"<c\bL&<@W7/*iK+qNR1LJ?dqA2BCne&J.5k$Un.5Ys0&M6/B[h?O]gCe0^)B3\:Ka5*TL1l"Xd/A)93QWB)m
%.u%o]-D,G5<&Ve1Pp#fUT?`Vo#GJ.dE]J41U#3H-L#UYf9MI.ibe^rh"k[D4B_3A!,0B[Y$Pt\\,ur\)OP5ulq!`UEFJ!>K>N#4m
%aB#R(?0ork48\p2I,q6]Zhi1h.ksC6<j3V;/"g`th/8K"2!XPJK=X06SKHo<OEjQUW1D/1/CnJ,`<1rY))<K[b_f*D\)q2,fZ;=J
%MluZ`Mfg!uEj^E,-Xr=Bk_mQh4jo&He;(tekf^oRmcTk$g'r(PH)6o'hMi_h!Eu>rOq=S#MEMh4Xqg[I$E>-h*^>DoI*`m72-/DP
%?e%B0XJB^#Uti8$8EMCjW_*7D=0T[npn:4e<*[UtaSr@=fYjs!=e6M,28<&^fph7Acjm?EM^lP"nBCODk5@/=NNo7Sa'J_F3fK6-
%$>PK?cg>hf(?AuYII,9ZZC7I(K4kRXRki3NAd=SlK_W1I@s-B?8Pb19V,:h?.33)]J!8sG<Ns*+R^Zr_JbZstU@l[Bednh=Fb`u)
%FqpTSMaP6[[=]Qjg7I:kW62grl@JIb)2b;2P<_`Y?J"^5G?Cthe1.p%>J?*)9Y`.MGn%Mo[ViZ-ET-g;^j/rF+Ubpu61pT(@rXj6
%><9LLpgimD&>FgFGk+]\C[IISO#4!FpAIY+;9r@S)iV-Dq2l@sJtZg%3!*Ru]T3D,N#m?o`N`KB:B:)ecZAo^3fL@g+H]%uoTt?Z
%3Qnh?O5cd%-6s"XCDh**k=G@nIpag35gLJ\l<h,`<JPCsQG!@109WS8ZVbo2\]SrC-<k8el,uo.+)8-R%X#]!Id)$V.W&^U`>YNe
%huAp6d;6P=AP?`8:PL]dcg^uqm<iXmAQ4/\f[[]YLK/3FRLtZ*+*rZ$<9@rT'dIJ,'O,7F/XO9MijBoBIR8F>k/hPlDR=/U]'$t&
%pXS@-_%q52H_Pp#[&TR>qES7.4("<hZLg[]YEWMskCBQpCP\6cG2GG*?L_0^44Ar"`0=O3RJCuSIccM&0*.*daa5TFOn_L,,VdAp
%3ul@h@4Di?m?!0]feFC@p;/uF_(X>IZnZ4k=GhLeW6/Kj\n>3FcR\]cA2VPq5=n/$DIobKjQeF6PI$;EWAuN0dej$4d8DXDSQ.B(
%*\1gn$?m<c:,\Cgbst&/:0.1rQ9ndSikAEJ;0%Q`&2%RVBI/'k+*.=LoX*ua7TsV>I(7P1mL+#lYHAD:l9XJ#R($tBg'`#M%eQ.T
%>#0pK23pl!QC*%s;o;30#K$F2gs_305XAd!,eX7+*^1XY<?J!?ADm#VnJU!\@%UG/YfHfcVf5_$9`W-+1=&N_$(oR5`[?H#Q3(t%
%dX5lR[rf@dAEU?<2Q?1L`]$ZCh$]dd+)!c0A>Op7-66F&B$c8rqn@3.eZ-(%c!\`BJIh+RmOCG7o.["b"j1:EOq4"l>8p5X-a/!O
%dGK)%e]+&%DB/4\@<M;NV1Q(/.iogT'lG!rEqif%X>98j0BIrc:@,)EXHFbr#0N+$aR`[6fQEBSO8JM0P@doPk81oN:WgK:,eOEk
%H-Wqg0@aKQ!)K9%Q8/A$<dL5I(gfqs^k^=<W@X>HQ89Aio'NGcOKZ`$IHs'tRFc3j9";%>;!S<$e?_d=Tt8F&B>e<Xjh<=.j!G/(
%G_q4oF`H<HLL#Ec7KoZ8/Y(B'V_8hGL-4lfpJ^q>W'XLPZ+!KdGcD\I/tbteqYZ!F0T@Rfb'Kcn\HPD;('<f!M6H,bN"\VJjS`4X
%R,G#+>V]gS?5NH6*CTREokp/93+s]jhJRoDA7O5hE0Oas:FU&pY!mB"meK1<ngP2,rNW855^^p#VWm_:`6D>\GYbdj8o3]1[bS':
%o?nhl#Qqm%5E^fk.s,shJhX6!r9)taIn[bmk%*"bfi(;lT*eIag%Q3md33Cj!!i>\*h/J>Ie/jY]3@KaCOb'_<H"%(l/mc[@[LN2
%[Kep"G0eS5Y*'iRoX@KSDii6L_>Vsa1u*tU#ZZjW`\H88#aoX0_G`4spCR1"+J4FC8`cUQUnWVAr#=pnQ7'egigQb"__V$.qJ>C=
%S*.\0c;LM*fQA_n*RS>c@uSGGI8qATWPM=J!64I)&sb=Qp\Q?(J4_)R44QZf3?[5CBmT]a7[cMHJ'e57ZiH*(nG7H;FD:R]#O-C$
%Pp#O"]#rJUb@>6(ot9cIm8(WjJ]P]]\V+DBk^BeM>6H5IG*7j%;n`*\[13O`RWpt*J#Nt%PXpT:LU[,e)o^:YR168'k2Ymo>HJ,*
%St>JgetNTCF@k2B;Xq5>2a"Fl8K?f-pN2b#1Gd<c"P1/Y(7S>ZHA@[sffY9NW>u[L2d&Xc-i^pRLM6gsqF]6p0\Z(ko$1i*P&#u@
%#1W1]L-Y=BHoF"'A%\h@WR2[aKDKZ:.\j%f;Q]i=EiN"01,*c0XD#HW6Ps@,08DfcUd`[K=a1oMp02rI<mfXTn=7(qo<FWaC!5_A
%.u(9"A'W7M!]kh$d7[29T]gS:0:W13&n(;slIRl<CN=*h!Nu[VgPOrV6691BA4ccOOT(pQR%Dm[b"ai7&^\2Z$g_L%ZoVN[R\]DQ
%&4Q3RhpCC15Z_3W=U-37+09>7J%C&J%Ej!iC#@H[b'hY-1sgrCi\"6Wa'(s>#<i:fcQ/!<Sch33\q<[\?EH/SC)D1aO5[:rO'Ppc
%)=e]<7h3F:`A02r76lK03jLre!b%ifT4TfEIO0-rGsYlg5Hjk]I5+"`4bbso)*dPZe)[k1JBj(XL;mGTmNW/C*_I"oB/,7R=65)2
%k;??$cJoK*ZsCW9Wa"8QYQ;[7*[2P1WqKdq\K*o9[)%H537D(("""_gab7:=a5k],^o?)*Go^<(U%lleb+;+U8oT!;ZH&a.06;@%
%:e'U+_C/A1>d`:9c#K?(f38kHMpcP`#njpa*<?1E]8S>%Si1C>eYQR?7iCj=JN(/9EC73E[J)t6(l"nHS<Q6mLDfNn!o>Si`sN/l
%9dGV?9ta:&\=P1&h_].\4TG<ub/5ig*Q`l_3?!8sKkolNW1-9[1TSU..F\+R]GcGoZS(h(*R4(>s#-G$GkA;i#$0%M?Se2_I7<n!
%V(>+I?;r&IW<[R]__V<^3YF5EnpAXK"JiO+0\pD5-Cd'Y2`Fl(ZXTG)=!rBq_ZVXQcSe-t?V[6>l2sg*Mhl`-q=BgL0PtN[`Ycpa
%H(&<PV\^9D&r+o(=[Z2#hE^>a`MT%/pD?`9ZY0OD)Ln`1_h?/cb%&LuZT:0N-<7]oh?@KH]Ys?s1^oh-(*cGPA"h#p@nYH^D+.Ku
%ZsNUH1uZ+l5[Y0ZF$FAHEb1'0XHFVPBW?G]h29.)$bRe)R"[pK3RZGSmH<BR+/Xm(i5lZoTm7kliQfrO9[M.6"Z6`IdR]iU?-73:
%Yg!VqX1!P0;g[g@e)[lu[j#L.],X-c(>TUF[uZ;YDZ:oMc'Zqn[1hVI)TPn3OX3ceV;G"*OBFu-"Pi2!=n/o#p?K`r$LAk>AieuZ
%9H/EgEOnXr'Jp-8I\q&V@C_5r^\PS">pg:L)G*WPPl`@MeEpLogk=)q\3\[!>oQLdNB!Psp9:S9(@f]O`mbY!_i/Z@RXoL0K5*(e
%>4$VkRK`@T)\!do`4,<A44Vr)Cm+I1KRO[Q6['6Z7WjljT\\'s9ck`=i87+)o;sC]kAU<-RS3b9/go<%I5WICZWD^4PD[]u5%Hpa
%:27CKo#hW09DtiRko%Z/oFLeZBfWh]W@BJb\X-]O_ar?o-Kf]t).IV_D*C@_=SlWs=B@c5htl/NT`H&.&/^q[PM_\jm9i>%<GXl:
%g5RMF?!M?3.4==+L*to3hHTl^$V[BU]7eQb8+\:V?`-&[CH/W4:ct,s^4[8Ta!0\I)eSn<#PS,E+/Xn7BW&a*bj7I-K"jV(=NS6?
%:<;ftU6/F2"*4IFnNQ$pErQD0kWbpZ;;@gf1%rhuH:4X<jZT9HPh)/3?i'h@X'(D'ZF`Ohkmk$VRULE@mr4O,TNn(jU$OkTkl>Kt
%<+P#UZ>O;Z%dN1K-=8RUi,AR&)H\<m0H(d_,DO.lXj%%_l9i_sA"C"Mb%/rnJ4$C2gM$DJqKfpA\,J'UaKc]S?dHu82JMt]diOXV
%K)tE*&0_B>+/gtcM`PnBW^f9>RSWd@C"CNg,#HfnHQ]e%dX[-d]9P(pHn?";Lm;@`b6>=j:0Qm9Z![@F1gCD?l\O&kgPD7=Ej94$
%:sTiZ%FKi@D(+%a9fE+4j\g_bVUk7saM6thRU3+5'R7<gJ(*G`k_LS_jV@O$\icdg;[;G@0uqTm0KC->_g?n!5;sQS<67@Jdu<//
%%:9=GVa,ErB;[e`CcL`<%e6$10VQ1R0ZWDK<duZ!9=hLob-ibqh1&=l<g4jS[8n?7Vd9C8@35\6CKr%E5mU!@Oq7DMBpGhY>A>Y5
%om=?U$;tE2!^8m7276.=cRj\&7$W`6Nt8n)oJiVLlH`N@+Ag6<ZBBNU/HGB=I2*dLno!E4*PB[e`3uhI*s;0Ad=pY6nme#WLBahQ
%J/TM'<*?G,kqrZSF`l6/KK113m&"Zsg1AXm1`l3\q&)D22a32Lh,B>/$1JGSj+>8bZ%IYF-BtL8#(,jXQ.`$O\2k1lFp6d2TBS\)
%rNpnPc*>P>=Uk6jaX)iQ<o)r=[agl(ZViU3AR5BPn9C"h&,O1#m_GYN3WQ&F.o.M6CZoS#cap_c.t@^";otZB`'l3F9QKt7>VhCi
%ks%fC_5fS#hTS"YFsgj?:/f\5oIHTX8!<$Ja-ca1Zdu^22`./GPk!=S(1QMM/u+1P(@1a4<l[j^jX)rj1n11>>PhVGH'%(NbYY>7
%kJ/0K;>S^iQJ7%F_e.1q:HFc4CT+!FH-%MhjbS2bS#QmS(&O#*%DAn1GFd:[GP,A]$JX'qV1+<hZfVPA_@.=pbO%DC;d1<<H+$me
%.Fd2LXE:)Y5A38c.O'!B/$VNRC&<7U]&^]XilUZ]V-[7bS58O0rM?79b8QeWdsgM_rp1lu=_+I8hV9P5^UpMseT7(U`B)*1@bFnA
%&P]I+aT=\0YZ\%^T<gcG5J-**KqX&)ccFX[\WTo@`_9;!@2ib4Vt]!mKO]:0^.SYi3Mcrhk,<8l0E#<_iPoK7g=)IkZ44:IU?XYS
%:!sk3]*4HiMJYEmYk4nrd'>;H;IA.qlik.H=BKsJl?5`W_B#F+l3u8Xc"PY_L1pDR,a>AC_6MGq7e\Y#Xk_/6[C`TKU#N+HG71\S
%P:)RtJJ?_Tm2a\\/\PFR-XUW8fTrfg<qal+KD%!(`MTTbQ@#O2hbq!paSZU9/`>L/JpL)'?Ml%[e:k-*K=M5Yhho;qdIsi.nneM(
%16\_3=$"PVT!bp^.qH&`mnr"=[`^i"e*^Ll%_)42r6q4,?,aDHa.e"KjTRqC8XQm@G+,8,(LH1:M$.5s*D]N9jtLhj;A9JQFh:Xr
%?)7ae3)Zs*AB"@,VASIi.^MNVO8D@q"#B(T%FB9lQh1/^62j%g>$n;I-k5D.e`d9Z8+Tk\N+u5`?RcY"9%j&[(fNMj<S&p*/b-iE
%6hf.P<pu*M;3-36QUSoDGHjsOLk@uh^N&T22`9fEHH&nhnnR1-GGcO)LXg0C>Y'W<an:0HZD<7N/C?"RSumA'R*(OeENMj"aPrd]
%+6&W![jb!31Zd,B&@$#ZUBEonUZ5llcm\9JcR#3BV^V$=OWDXlpZR)'ef@f30IOiP/o.Rs<[egi]*1E)NDN:Z=k"SS\`>80@RSu7
%nY(!EaHh,9%]a>8\G/@=:f'VSeoPn/iRfCN5m[5aKDsBPBqJ+)!(=h'f;2"WGc;1J]TU'FL9f,f$[;ZPV5RQpp8FifhA/b,Op%p<
%1'ZF5:=W@kD)7>c?Fnsm&uNc%+X(JffV_Y#e>3)$PS"2\\DfLd!hrQ>6Z)0lWq9b.M2]B>m]`-<$FJho9HFimooerBe]`:_f=e:/
%S(FsRdomo4ei8AJYn;ZP[q<,&PXn=7/.,Hhe$>YnaccT$.skSMW"QKrlM,>2@9I>3)c?@1:$9WCrN85`?GLXN:R\r:X*R82]nIY7
%!Bp+<KN;5F0Y;<pK:iX'pEK@#bh&*WX*LahUK*$'gde3rHBC_"F9A;@Joofs/Lfrp$ef$gLSs='lgoX5Yk/"oah2`-eY4g@(do'1
%7c%/H9#aBS(nLd>:t/48(c@sS@C=%Xg*E72C6s/Q@0!guIao]B\\CPN+sg]Fp<.rdJgJ>Q8B@+Ib:qs:c&d(h(Z5`N)EpC+>qIe=
%6sE.KWaqqJg"^P"[7NAn<sQm&on3QM52<0JM;g(DIm0qIm*<a,f%pQIq&Ci$U0<[:_jk*(7,^RtG=i)4ja2Ri]#1O=P;#F)S)D94
%W)k=R\/(5"O)qQ,T[Yn;=bbN*&#9QK`2J03lOKsqSH;'9/G%HlmX":i9G2fL7VSnap+bU&IK_BrqG"XVGW[Y*@!Se:2jbF&Y;HmP
%k/.2NZkuRX@,35c`^,,FmlpS-Ls9Z9?IDAB\NC>\XZNVI>m-o@;Tuf5;Y=V=2dmL]HCTD\K&kL8_X7Rm3"6WJ*R't_4S\m+IB4Um
%F?u4=o#+N^nGNE86@ACOiTUroRR`aJW0Y82?M(T<foL3GPPM4?XBtZN_0rSo>tu;MoA?`^kb8\Q#)MkMH7HgIYL*OTLG'AE5H8+.
%d5BjYgT@2_EmH4DVp!7dXIUuf&e^V=8*B+H<p@[RHCsZ''&g<'"SKqK..peg=;=gNP+KI1Q^='s[4NuI6`0-A?2TKld#T<D_8fG@
%@ktefcOGua>Ba1$e8tsPW@>V5Z3Yq64hs@bn_-fi\9[HfEX7N(<np@+#k@H[WI3;;2A;KF^`c_PFfH1ANL9t>X5:CUnW0@Jg*,D[
%?P]qg^FjL80n70aI+Rad<T#@n/<.hOM7Qb,(A=lEqGU,L6OJWC2U`"(/^STEAej4I_+).\LK-@YGR`m24DFlAV_tY8E>"s>Z>?7!
%+/62Tp[^(FQltGE&nXt4$#oJF$D)JPjI*QGpH0B,3//HYc2hq8-C.,?a1n87\I_c6fam-Fq;'"Y$s2]`m&hqc/f'r-A804j40gI'
%!@gUnmE"C[G.78#if\e=Za9MBO3!'4BW:dmr"q2,;^7d9cAX@.1>]-n"/jBp:t(c'M[?L/nm%9,a<Z/9q;m4DS)5T:Ia'2YEG!J0
%ASOT[WprfmCm[Q:L<cuJnKk=BTek@cPe<eDUS09F$3kM-:%GVI-7BJED^L/B`ddAA+$bVe`h^`%#oOhRAD'E4l^PuA&n*Y#1$H#5
%+Yu#"Gsio>99t!G"0nM*HLZa+^4*Zg*iQ,rWMqRS(86rFSQt\LDVdJB0jOFqIt!O-s#dZHZo1Xe%+bmMSEapY+U_o"Zj1phZSYUn
%g]H/M6T(bG,Zc6s`ilC5I62B7f+05m.DhZl\#>*02bHT8'[9f3*::8XN2<(^E0)=_\%c0kGEpA&%;T1"&D?9][S16]acDs%R)8`s
%)D:?$bG[?Z5OYRiYq\%s_:[SLpj(VR":FnBmNNer>i9(e7ZeSfbX=?#0>`tV*(Xh/f^3KD<fC+E2"gfI5:Fk8DrJ79oM8H0&R8s!
%GT"/Mi9s6^46Y<PN=jEcH:@D1GrU(kPaJ8>ID0fY<R@&=]r::8a7.It0mUuICb3nAPU;UM1Wb-*6Wl!3]V8Oofg2n?bHM^uS7&+d
%>gq(dkU1%-n@$GVLha]cY+dC)9u&Gi-QSPKDEa#I1p2c!*;Fu9`hpT8l#K+"BrbH4MiT0,b<Eo/FkVq)=++o5[?)14j@$!YNp"A6
%$h68P']`m@ITZAq^e>6]KW3*k$*s>!G?C^*Qjk_s?_aeIHE(9fXsj^pP1Gt/+`!GRZ2?+qgTT77^NCX!C5jr98bP8"Btmb+F+6]0
%.*l?'$a()_;Y%C&p8;b;FDZ><4shpUn#W7G"==kd>LSMK)EDcpjMN@YkqH]Omr^;*H5!QQY:`io0AUO=;W#=Qo3Vu6.4*DGK[:k-
%YfV.._SqE6']NTDq:3'PkB$8sh8a7bL7MLUe0(0!p1ZIn3,<%ZmYG=P;6(0:q7\9J(ojV4g,YM'Wl$5;;N45):&4Jk31hThW9HId
%L.f]S,<T<DLt/`(<+*lf,_(9orNt;B?HC^\](uN_`qJ]K6O]eSX=gUs#sN^dW;(pqYc;$L,6`#9kPe@6e#c8ENm[8-$Bb;UUQb?m
%NAh5?M+2j*7@PLEY8ca,G'JYs24sW0dLRAD\DbbupK^lDO`+aXi;G.YOMc<h?2Lo>QgNhSZ&!n/4r:68C2,ibg5$OOJqPi$I/!_H
%?#!q'+Kj(DEHgLmU],\;_gVKdqYBhkep*1Vh?\4jOFkBc\t_DpNC!VC488!O:k3+&\nc)P,A-JsI9r^XU_!+)W%/PV9WZcB+'f"-
%q!:1kJs5A&ZLpM]:L.N%Hr,6MK"Am+5_JrVBX@QpL1%H!k*hmHP<j307!0pJ3C,uFRFg1pMWRi[(o?95[@+GjX9Lq9YB5MpUO0O0
%Kn"q*8lL.bHnjmpKg2=]o/)L,WqfcPO1:>=Z?F*tM?1[*6ei45OBa=\FA:/fJADhK`^/IGU#lrY\*gImFu;p<]\fdb/:J2@,P'4*
%59K';=aqAUZTZH^/pY`rV(G_pqX_&]F01\W-hDo.g(nD#52!T*5+eR(kR#ZPd6)4T^mO>Q1GG9T24k6[SQgfQ]dV;)4f%_<Qagh%
%.iGi8aUCrt=Vn?->4-1pga)$j,/oE",)-V='HV01rH9Ih6Z[^i<o.NGlp&6$1<j??EGl_d6HLX=N1X179hdbJ4=f_Ha]<R^\b9H2
%q4:q,?pIu>q6cV>"MIKLO+X=5?KlIl:%20$V>3Q;-S-,WQ-$Tu+YjbIDi11]Zu*9&/G7NdTe(t)2YV452dR+qa(43$\k26,JfcN5
%gu<]@aQ/ND&Y8Kebbs*an6*4B&]GMiPXCbG':sl;?h*GZlPB49LGo2.4L2]0Ci.LX`3XBa,sD<ca,Ut#kmHRs/o!nbQ'Tc'FHXgS
%:^[b5R(WMR&)q"Nq+rKJDOEO084Hp9A-CG4`HY#RKZ&W<QRjjN&9bflFr:<taWaVligI6bX>j1MB.rQgZt0eR:$,^^(l'Kt4-76g
%e=CT(Ym]^X)4b*5/6>k9=Q'jR6/E!CD&_kCZBssn`ecL%lorsQ5jk>]=k*S%bF]<f4pHLn!T,-)o&#gN\SQbdh5Kh+OlH-dIa6)3
%@LFL8cf[K6UiCjT[VV6#Kj5Db!k]IfO![omI4&F!`a2l/m"oR8B\rLOE=#u*3,Smu/#us)TQE]9'lps0BjWCQ*aoWQ@DfGAfFB$[
%V""\Q\gPFE:`W"oY$p=c,,VlRoI?Z9CUD)Y?UDG4qk=#,.i\^8&LNE^Kuo)<IG_W\l@8E?rSd5Er]g@js6_Oir?)((f3eRB?iKjs
%J,-PqruJEFT)\`In,E@d^4,u]s7MHQoDeU'hu3HpDSa*bTA+klp](/@rVY-ZrV8*rr8TC(qu?/`J,Jp<qNjGFdsqAg?iKP=s7idI
%qCd?tnY^m9kC<<nTDn]Ms6'C1O+7)NTE"Sfs72L@s7k4Gqd9>0,lB'>nFqG4n,JaSkmr:<rrEQ/#5/~>
%AI9_PrivateDataEnd
